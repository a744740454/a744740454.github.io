<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2022-06-14T06:42:55.945Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mysql存储引擎</title>
    <link href="https://a744740454.github.io/2022/06/14/mysql/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
    <id>https://a744740454.github.io/2022/06/14/mysql/mysql%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</id>
    <published>2022-06-14T06:05:12.195Z</published>
    <updated>2022-06-14T06:42:55.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql存储引擎"><a href="#mysql存储引擎" class="headerlink" title="mysql存储引擎"></a>mysql存储引擎</h2><h3 id="存储引擎介绍"><a href="#存储引擎介绍" class="headerlink" title="存储引擎介绍"></a>存储引擎介绍</h3><h3 id="innodb"><a href="#innodb" class="headerlink" title="innodb"></a>innodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">innoDB是一种兼顾了高可靠性和高性能的通用存储引擎。在5.7和8.0版本中，innodb是默认的mysql存储引擎。在创建表的时候如果不指定存储引擎，默认就是指定的innodb作为存储引擎</span><br><span class="line"></span><br><span class="line">innodb存储引擎支持事务，设计目标主要面向在线事务处理OLTP的应用，其特点是行锁设计，支持外键，并且类似于Oracle的非锁定读，即默认读取操作不会产生锁，5.58后成为默认引擎</span><br><span class="line">innodb使用MVCC(多版本并发)控制来获得高并发性，并且实现了sql标准的4种隔离级别</span><br><span class="line">innodb还提供了插入缓冲，二次写，自适应哈希索引，预读等实用功能</span><br><span class="line">innodb采用聚集索引的方式，每张表的存储都是按照主键的顺序进行存放</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS:</span><br><span class="line">OLTP:</span><br><span class="line"></span><br><span class="line">MVCC</span><br><span class="line"></span><br><span class="line">插入缓冲</span><br><span class="line"></span><br><span class="line">二次写</span><br><span class="line"></span><br><span class="line">自适应哈希索引</span><br><span class="line"></span><br><span class="line">预读</span><br><span class="line"></span><br><span class="line">聚集索引</span><br></pre></td></tr></table></figure><h3 id="查看存储引擎的版本"><a href="#查看存储引擎的版本" class="headerlink" title="查看存储引擎的版本"></a>查看存储引擎的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@innodb_version;</span><br></pre></td></tr></table></figure><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="OLTP"><a href="#OLTP" class="headerlink" title="OLTP"></a>OLTP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OLTP(Online Transaction Processing): 联机事务处理 是专注于面向事务的数据处理，通常涉及在数据库中插入，更新或删除少量数据，主要是处理大量用户下的大量事务.</span><br><span class="line"></span><br><span class="line">简单来说就是支持事务，保证数据的一致性</span><br><span class="line"></span><br><span class="line">OLTP的应用--&gt;指支持事务的系统</span><br></pre></td></tr></table></figure><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MVCC(Multi-Version Concurrency Control) 多版本并发控制，主要是为了提高数据库的并发性能</span><br><span class="line"></span><br><span class="line">在遇到一行数据发生读写请求时，一般的处理方式是上锁阻塞住，但MVCC则采用了另外的方式去做，让读写发生冲突的时候不用加锁。</span><br></pre></td></tr></table></figure><a href="#">Post not found: 数据库约束</a><p>插入缓冲</p><p>二次写</p><p>自适应哈希索引</p><p>预读</p><p>聚集索引</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql存储引擎&quot;&gt;&lt;a href=&quot;#mysql存储引擎&quot; class=&quot;headerlink&quot; title=&quot;mysql存储引擎&quot;&gt;&lt;/a&gt;mysql存储引擎&lt;/h2&gt;&lt;h3 id=&quot;存储引擎介绍&quot;&gt;&lt;a href=&quot;#存储引擎介绍&quot; class=&quot;head</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>列约束及属性</title>
    <link href="https://a744740454.github.io/2022/06/13/mysql/%E5%88%97%E7%BA%A6%E6%9D%9F%E5%8F%8A%E5%B1%9E%E6%80%A7/"/>
    <id>https://a744740454.github.io/2022/06/13/mysql/%E5%88%97%E7%BA%A6%E6%9D%9F%E5%8F%8A%E5%B1%9E%E6%80%A7/</id>
    <published>2022-06-13T08:02:17.945Z</published>
    <updated>2022-06-14T06:01:14.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="列约束及属性"><a href="#列约束及属性" class="headerlink" title="列约束及属性"></a>列约束及属性</h2><h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary key"></a>primary key</h3><p>主键约束</p><h3 id="not-null"><a href="#not-null" class="headerlink" title="not null"></a>not null</h3><p>非空约束</p><h3 id="unique-key"><a href="#unique-key" class="headerlink" title="unique key"></a>unique key</h3><p>唯一约束</p><h3 id="unsigned"><a href="#unsigned" class="headerlink" title="unsigned"></a>unsigned</h3><p>数字类型约束</p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><p>默认值</p><h3 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto_increment"></a>auto_increment</h3><p>自增长</p><h3 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h3><p>注释</p><h3 id="foreign-key"><a href="#foreign-key" class="headerlink" title="foreign key"></a>foreign key</h3><p>外键约束</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;列约束及属性&quot;&gt;&lt;a href=&quot;#列约束及属性&quot; class=&quot;headerlink&quot; title=&quot;列约束及属性&quot;&gt;&lt;/a&gt;列约束及属性&lt;/h2&gt;&lt;h3 id=&quot;primary-key&quot;&gt;&lt;a href=&quot;#primary-key&quot; class=&quot;header</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>数据库类型</title>
    <link href="https://a744740454.github.io/2022/06/10/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B/"/>
    <id>https://a744740454.github.io/2022/06/10/mysql/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-06-10T09:59:54.076Z</published>
    <updated>2022-06-14T06:01:33.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>占用字节</strong></th><th><strong>无符号范围</strong></th><th><strong>有符号范围</strong></th><th><strong>数据长度</strong></th></tr></thead><tbody><tr><td>tinyint</td><td>1</td><td>0 - 255</td><td>-128 - 127</td><td>3</td></tr><tr><td>smallint</td><td>2</td><td>0 - 65535</td><td>-32768 - 32767</td><td>5</td></tr><tr><td>mediumint</td><td>3</td><td>0 - 16777215</td><td>-8388608 - 8388607</td><td>8</td></tr><tr><td>int</td><td>4</td><td>0 - 2^32</td><td>-2^31 - 2^32-1</td><td>10</td></tr><tr><td>bigint</td><td>8</td><td>0 - 2^64</td><td>-2^63 - 2^63-1</td><td>20</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">float</span><br><span class="line">float: 表示不指定小数位的浮点数</span><br><span class="line">float(M,D): 表示一共存储M个有效数字，其中小数部分占D位</span><br><span class="line">float(10,2): 整数部分为10位，小数部分为2位</span><br><span class="line"></span><br><span class="line">double</span><br><span class="line">双精度:系统用8个字节来存储数据,表示范围更大,10^308次方，但是精度只有15位左右。</span><br><span class="line"></span><br><span class="line">decimal</span><br><span class="line">系统自动根据存储的数据来分配存储空间,大概九个数值就会分配四个字节来进行存储,同时小数和整数部分是分开的。decimal(M,D): M表示总长度,最大值不能超过65,D代表小数部分长度,最长不能超过30.</span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">char</span><br><span class="line">定长字符: 指定长度之后,系统一定会分配指定的空间用于存储数据。</span><br><span class="line">基本语法: char(L),L代表字符数(中文与英文字母一样),L长度为0 ~ 255。</span><br><span class="line"></span><br><span class="line">varchar</span><br><span class="line">变长字符: 指定长度之后,系统会根据实际存储的数据来计算长度,分配合适的长度(数据不能超出长度)。基本语法: varchar(L),L代表字符数,L的长度理论值为0 ~ 65535。因为varchar要根据数据的长度自动分配空间,所以插入varchar类型数据后，如果数据小于255个字符,额外增加一个字节。如果数据大于255个字符，额外增加两个字节。用来保存数据所占用的空间长度。</span><br><span class="line"></span><br><span class="line">text</span><br><span class="line">文本类型用于存储普通的字符文本mysql一共提供了四种text类型</span><br><span class="line">tinytext:使用一个字节来保存,实际能够存储的数据为2^8 + 1</span><br><span class="line">text:使用两个字节保存,实际存储 2 ^ 16 + 2</span><br><span class="line">mediumtext:使用三个字节保存,实际存储为 2 ^ 24 + 3</span><br><span class="line">longtext:使用四个字节保存,实际存储为 2 ^ 32 + 4</span><br><span class="line"></span><br><span class="line">注意:不用定义text类型,当数据超过255个字符的时候,系统会根据存储的数据长度来选择合适的文本类型。</span><br><span class="line"></span><br><span class="line">blob</span><br><span class="line">存储二进制文本,例如图片,文件。一般不会使用blob来存储文件本身，通常是使用一个链接来执行对应的文件本身。</span><br><span class="line"></span><br><span class="line">enum</span><br><span class="line">枚举:创建列时,设定几个选项,该列的数据结果就是设定的几个选项任意一个。</span><br><span class="line">例如性别:男&#x2F;女小于255字符使用一个字节来存储枚举的数据大于255小于65535字符会使用两个字节来存储枚举的数据</span><br></pre></td></tr></table></figure><h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><table><thead><tr><th><strong>类型</strong></th><th><strong>占用字节</strong></th><th>范围</th><th>格式</th><th>用途</th></tr></thead><tbody><tr><td>date</td><td>3</td><td>1000-01-01 ~ 9999-12-31</td><td>YYYY-MM-DD</td><td>日期值</td></tr><tr><td>time</td><td>3</td><td>-838:59:59 ~ 838:59:59</td><td>HH:MM:SS</td><td>时间值或持续时间</td></tr><tr><td>year</td><td>1</td><td>1901 ~ 2155</td><td>YYYY</td><td>年份值</td></tr><tr><td>datetime</td><td>8</td><td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>混合日期和时间值</td></tr><tr><td>timestamp</td><td>4</td><td>1970-01-01 00:00:00 ~ 2038-1-19 11:14:07</td><td>YYYMMDD HHMMSS</td><td>混合时期和时间值/戳</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库类型&quot;&gt;&lt;a href=&quot;#数据库类型&quot; class=&quot;headerlink&quot; title=&quot;数据库类型&quot;&gt;&lt;/a&gt;数据库类型&lt;/h2&gt;&lt;h3 id=&quot;整型&quot;&gt;&lt;a href=&quot;#整型&quot; class=&quot;headerlink&quot; title=&quot;整型&quot;&gt;&lt;/a&gt;整</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>sql_mode分类</title>
    <link href="https://a744740454.github.io/2022/06/10/mysql/sql_mode%E5%88%86%E7%B1%BB/"/>
    <id>https://a744740454.github.io/2022/06/10/mysql/sql_mode%E5%88%86%E7%B1%BB/</id>
    <published>2022-06-10T09:06:42.824Z</published>
    <updated>2022-06-14T06:02:17.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sql-mode"><a href="#sql-mode" class="headerlink" title="sql_mode"></a>sql_mode</h2><table><thead><tr><th><strong>SQL_MODE</strong></th><th><strong>Comments</strong></th></tr></thead><tbody><tr><td>ONLY_FULL_GROUP_BY</td><td>对于group by聚合操作，如果在select中的列，having或者order by子句的列，没有在group by中出现，那么这个SQL是不合法的。</td></tr><tr><td>STRICT_TRANS_TABLES</td><td>STRICT_TRANS_TABLES模式: 严格模式，进行数据的严格校验，错误输入不能被插入。</td></tr><tr><td>NO_ZERO_IN_DATE</td><td>在严格模式下，不接受月或者日部分为0的日期</td></tr><tr><td>NO_ZERO_DATE</td><td>在严格模式下，不要将0000-00-00作为合法日期。</td></tr><tr><td>ERROR_FOR_DIVISION_BY_ZERO</td><td>在严格模式下，insert或update过程中，如果被0除则产生错误。</td></tr><tr><td>NO_ENGINE_SUBSTITUTION</td><td>如果需要的存储引擎被禁用或未编译，那么抛出错误</td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sql-mode&quot;&gt;&lt;a href=&quot;#sql-mode&quot; class=&quot;headerlink&quot; title=&quot;sql_mode&quot;&gt;&lt;/a&gt;sql_mode&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;SQL_MODE&lt;/strong</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>用户及安全管理</title>
    <link href="https://a744740454.github.io/2022/06/10/mysql/%E7%94%A8%E6%88%B7%E5%8F%8A%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/"/>
    <id>https://a744740454.github.io/2022/06/10/mysql/%E7%94%A8%E6%88%B7%E5%8F%8A%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-10T08:11:07.259Z</published>
    <updated>2022-06-14T06:01:48.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用户及安全管理"><a href="#用户及安全管理" class="headerlink" title="用户及安全管理"></a>用户及安全管理</h2><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建一个用户 </span><br><span class="line">create user test@&#39;10.0.0.11&#39; identified by &#39;123&#39;; </span><br><span class="line"></span><br><span class="line">创建一个用户并指定加密插件 </span><br><span class="line">create user test1@&#39;10.0.0.12&#39; identified with mysql_native_password by &#39;123&#39;;</span><br></pre></td></tr></table></figure><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select user,host, plugin from mysql.user;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user test@&#39;10.0.0.11&#39;;</span><br></pre></td></tr></table></figure><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修改用户密码 </span><br><span class="line">alter user test@&#39;10.0.0.11&#39; identified by &#39;123456&#39;; </span><br><span class="line"></span><br><span class="line">修改加密插件 </span><br><span class="line">alter user test@&#39;10.0.0.11&#39; identified with caching_sha2_password by &#39;123456&#39;;</span><br></pre></td></tr></table></figure><h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><table><thead><tr><th><strong>权 限</strong></th><th><strong>作用范围</strong></th><th><strong>作 用</strong></th></tr></thead><tbody><tr><td><strong>all</strong></td><td>服务器</td><td>所有权限</td></tr><tr><td><strong>select</strong></td><td>表、列</td><td>选择行</td></tr><tr><td><strong>insert</strong></td><td>表、列</td><td>插入行</td></tr><tr><td><strong>update</strong></td><td>表、列</td><td>更新行</td></tr><tr><td><strong>delete</strong></td><td>表</td><td>删除行</td></tr><tr><td><strong>create</strong></td><td>数据库、表、索引</td><td>创建</td></tr><tr><td><strong>drop</strong></td><td>数据库、表、视图</td><td>删除</td></tr><tr><td><strong>reload</strong></td><td>服务器</td><td>允许使用flush语句</td></tr><tr><td><strong>shutdown</strong></td><td>服务器</td><td>关闭服务</td></tr><tr><td><strong>process</strong></td><td>服务器</td><td>查看线程信息</td></tr><tr><td><strong>file</strong></td><td>服务器</td><td>文件操作</td></tr><tr><td><strong>grant option</strong></td><td>数据库、表、存储过程</td><td>授权</td></tr><tr><td><strong>references</strong></td><td>数据库、表</td><td>外键约束的父表</td></tr><tr><td><strong>index</strong></td><td>表</td><td>创建/删除索引</td></tr><tr><td><strong>alter</strong></td><td>表</td><td>修改表结构</td></tr><tr><td><strong>show databases</strong></td><td>服务器</td><td>查看数据库名称</td></tr><tr><td><strong>super</strong></td><td>服务器</td><td>超级权限</td></tr><tr><td><strong>create temporary</strong>  <strong>tables</strong></td><td>表</td><td>创建临时表</td></tr><tr><td><strong>lock tables</strong></td><td>数据库</td><td>锁表</td></tr><tr><td><strong>execute</strong></td><td>存储过程</td><td>执行</td></tr><tr><td><strong>replication client</strong></td><td>服务器</td><td>允许查看主/从/二进制日志状态</td></tr><tr><td><strong>replication slave</strong></td><td>服务器</td><td>主从复制</td></tr><tr><td><strong>create view</strong></td><td>视图</td><td>创建视图</td></tr><tr><td><strong>show view</strong></td><td>视图</td><td>查看视图</td></tr><tr><td><strong>create routine</strong></td><td>存储过程</td><td>创建存储过程</td></tr><tr><td><strong>alter routine</strong></td><td>存储过程</td><td>修改/删除存储过程</td></tr><tr><td><strong>create user</strong></td><td>服务器</td><td>创建用户</td></tr><tr><td><strong>event</strong></td><td>数据库</td><td>创建/更改/删除/查看事件</td></tr><tr><td><strong>trigger</strong></td><td>表</td><td>触发器</td></tr><tr><td><strong>create tablespace</strong></td><td>服务器</td><td>创建/更改/删除表空间/日志文件</td></tr><tr><td><strong>proxy</strong></td><td>服务器</td><td>代理成为其它用户</td></tr><tr><td><strong>usage</strong></td><td>服务器</td><td>没有权限</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="普通用户授权"><a href="#普通用户授权" class="headerlink" title="普通用户授权"></a>普通用户授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grant select ,update ,delete ,insert on *.* to test1@&#39;10.0.0.%&#39;; </span><br><span class="line">grant select ,update ,delete ,insert on test.* to test2@&#39;10.0.0.%&#39;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;用户及安全管理&quot;&gt;&lt;a href=&quot;#用户及安全管理&quot; class=&quot;headerlink&quot; title=&quot;用户及安全管理&quot;&gt;&lt;/a&gt;用户及安全管理&lt;/h2&gt;&lt;h3 id=&quot;创建用户&quot;&gt;&lt;a href=&quot;#创建用户&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql体系介绍</title>
    <link href="https://a744740454.github.io/2022/06/09/mysql/mysql%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/"/>
    <id>https://a744740454.github.io/2022/06/09/mysql/mysql%E4%BD%93%E7%B3%BB%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-06-09T10:14:57.743Z</published>
    <updated>2022-06-10T02:47:37.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql体系介绍"><a href="#mysql体系介绍" class="headerlink" title="mysql体系介绍"></a>mysql体系介绍</h2><h3 id="数据库和数据库实例概念"><a href="#数据库和数据库实例概念" class="headerlink" title="数据库和数据库实例概念"></a>数据库和数据库实例概念</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数据库:存储数据的集合</span><br><span class="line">数据库实例:操作数据库的集合</span><br><span class="line">从操作系统的角度，数据库实例表现为一个进程，对应多个线程，在非集群数据库架构中，数据库与数据库实例存在一一对应关系，在数据库集群中，可能存在多个数据库实例操作一个数据库的情况，即多对一关系</span><br></pre></td></tr></table></figure><h3 id="mysql基架"><a href="#mysql基架" class="headerlink" title="mysql基架"></a>mysql基架</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql基架大致分为9个模块</span><br><span class="line">1.mysql向外提供的交互接口(connectors):通过该组件来操作sql,实现sql的交互</span><br><span class="line"></span><br><span class="line">2.管理服务组件和工具组件(management &amp; utilities):通过该组件提供对mysql的集成管理，如备份，恢复，安全管理等</span><br><span class="line"></span><br><span class="line">3.连接池组件(connection pool):负责监听对客户端向MySQL Server端的各种请求，到目标模块。每个成功连接MySQL Server的客户请求都会被创建或分配一个线程，该线程负责客户端与MySQL Server端的通信，接收客户端发送的命令，传递服务端的结果信息等。</span><br><span class="line"></span><br><span class="line">4.sql接口组件(sql interface):接受用户sql命令，如DML,DDL和存储过程等，并将最终结果返回</span><br><span class="line"></span><br><span class="line">5.查询分析器组件(parser):首先分析SQL命令语法的合法性，并尝试将SQL命令分解成数据结构，若分</span><br><span class="line">解失败，则提示SQL语句不合理。</span><br><span class="line"></span><br><span class="line">6.优化器组件(optimizer):对SQL命令按照标准流程进行优化分析</span><br><span class="line"></span><br><span class="line">7.缓存(caches &amp; buffers):包括全局和引擎特定的缓存，提高查询的效率。如果查询缓存中有命中的</span><br><span class="line">查询结果，则查询语句就可以从缓存中取数据，无须再通过解析和执行。这个缓存机制是由一系列小缓存组成，如表缓存、记录缓存、key缓存、权限缓存等。</span><br><span class="line"></span><br><span class="line">8.插件式存储引擎(Pluggable Storage Engines)</span><br><span class="line"></span><br><span class="line">9.物理文件(file system)</span><br></pre></td></tr></table></figure><h3 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.什么是MySQL存储引擎</span><br><span class="line">MySQL属于关系型数据库，而关系型数据库的存储是以表的形式进行的，对于表的创建，数据的存储，检索，更新等都是由MySQL存储引擎完成的，这也是MySQL存储引擎在MySQL中扮演的重要角色。SQL Server和Oracle这两种数据库的存储引擎只有一个，而MySQL的存储引擎种类比较多，如MyISAM存储引擎，InnoDB存储引擎和Memory存储引擎. MySQL之所以有多种存储引擎，是因为MySQL的开源性决定的。MySQL存储引擎，从种类上来说，大致可归结为官方存储引擎和第三方存储引擎。MySQL的开源性，允许第三方基于MySQL架构，开发适合自己业务需求的存储引擎。</span><br><span class="line"></span><br><span class="line">2.MySQL存储引擎作用</span><br><span class="line">MySQL存储引擎在MySQL中扮演重要角色，其作比较重要作用，大致归结为</span><br><span class="line">如下两方面：</span><br><span class="line">作用一：管理表创建，数据检索，索引创建等</span><br><span class="line">作用二：满足自定义存储引擎开发。</span><br><span class="line"></span><br><span class="line">3.MySQL引擎种类</span><br><span class="line">不同种类的存储引擎，在存储表时的存储引擎表机制也有所不同，从MySQL存储引擎种类上来说，可以分为官方存储引擎和第三方存储引擎。当前，也存在多种MySQL存储引擎，如MyISAM存储引擎，InnoDB存储引擎，NDB存储引擎，Archive存储引擎，Federated存储引擎，Memory存储引擎，Merge存储引擎，Parter存储引擎，Community存储引擎，Custom存储引擎和其他存储引擎。其中，比较常用的存储引擎包括InnoDB存储引擎，MyISAM存储引擎和Momery存储引擎。</span><br></pre></td></tr></table></figure><h3 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql是一个进程，会等待客户端的连接(大概在150-250个线程)。是mysql体系架构的最上层，主要包含以下内容:</span><br><span class="line">连接处理:连接处理 当一个客户端向服务端发送连接请求后，MySQL server会从线程池中分配一个线程来和客户端进行连接，以后该客户端的请求都会被分配到该线程上。MySQL Server为了提高性能，提供了线程池，减少了创建线程和释放线程所花费的时间。</span><br><span class="line"></span><br><span class="line">用户鉴权:当客户端向MySQL服务端发起连接请求后，MySQL server会对发起连接的用户进行鉴权处理，MySQL鉴权依据是: 用户名，客户端主机地址和用户密码</span><br><span class="line"></span><br><span class="line">安全管理: 当客户连接到MySQL server后，MySQL server会根据用户的权限来判断用户具体可执行哪些操作</span><br></pre></td></tr></table></figure><h3 id="服务层"><a href="#服务层" class="headerlink" title="服务层"></a>服务层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">该层可分为下面的组件</span><br><span class="line">MySQL Management Server &amp; utilities(系统管理)</span><br><span class="line">SQL Interface(SQL 接口)</span><br><span class="line">SQL Parser(SQL 解析器) Optimizer (查询优化器)</span><br><span class="line">Caches &amp; buffers(缓存)</span><br><span class="line"></span><br><span class="line">1. MySQL Management Server &amp; utilities(系统管理) 提供了丰富的数据库管理</span><br><span class="line">功能，具体如下:</span><br><span class="line">数据库备份和恢复</span><br><span class="line">数据库安全管理，如用户及权限管理</span><br><span class="line">数据库复制管理</span><br><span class="line">数据库集群管理</span><br><span class="line">数据库分区，分库，分表管理</span><br><span class="line">数据库元数据管理</span><br><span class="line"></span><br><span class="line">2. SQL Interface(SQL 接口) SQL接口，接收用户的SQL命令并进行处理，得</span><br><span class="line">到用户所需要的结果，具体处理功能如下: Data Manipulation Language (DML). Data Definition Language (DDL).</span><br><span class="line">存储过程</span><br><span class="line">视图</span><br><span class="line">触发器</span><br><span class="line"></span><br><span class="line">3. SQL Parser(SQL 解析器) 解析器的作用主要是解析查询语句，最终生成语法树。首先解析器会对查询语句进行语法分析，如果语句语法有错误，则返回相应的错误信息。语法检查通过后，解析器会查询缓存，如果缓</span><br><span class="line">存中有对应的语句，就直接返回结果不进行接下来的优化执行操作。</span><br><span class="line">注：疑问？从缓存中查出来的数据会不会被修改，与真实的数据不一致，这里读者大可放心，因为缓存中数据被修改，会被清出缓存。</span><br><span class="line"></span><br><span class="line">4. Optimizer(查询优化器) 优化器的作用主要是对查询语句进行优化，包括选择合适的索引，数据的读取方式。</span><br><span class="line"></span><br><span class="line">5. Caches &amp; buffers(缓存) 包括全局和引擎特定的缓存，提高查询的效率。如果查询缓存中有命中的查询结果，则查询语句就可以从缓存中取数据，无须再通过解析和执行。这个缓存机制是由一系列小缓存组成，如</span><br><span class="line">表缓存、记录缓存、key缓存、权限缓存等。</span><br></pre></td></tr></table></figure><h3 id="引擎层"><a href="#引擎层" class="headerlink" title="引擎层"></a>引擎层</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">存储引擎 存储引擎是MySQL中具体与文件打交道的子系统，也是MySQL最有特色的地方。</span><br><span class="line"></span><br><span class="line">MySQL区别于其他数据库的最重要特点是其插件式的表存储引擎。他根据MySQL AB公司提供的文件访问层抽象接口来定制一种文件访问的机制（该机制叫存储引擎）。</span><br><span class="line"></span><br><span class="line">数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。</span><br><span class="line"></span><br><span class="line">SQL的执行过程：数据库通常不会被单独使用，而是由其它编程语言通过SQL支持接口调用MySQL，由MySQL处理并返回执行结果。首先，其它编程语言通过SQL支持接口调用MySQL，MySQL收到请求后，会将该请求暂时放</span><br><span class="line">在连接池，并由管理服务与工具进行管理。当该请求从等待队列进入到处理队列时，管理器会将该请求传给SQL接口，SQL接口接收到请求后，它会将请求进行hash处理并与缓存中的数据进行对比，如果匹配则通过缓存直</span><br><span class="line">接返回处理结果；否则，去文件系统查询：由SQL接口传给后面的解析器，解析器会判断SQL语句是否正确，若正确则将其转化为数据结构。解析器处理完毕后，便将处理后的请求传给优化器控制器，它会产生多种执行计</span><br><span class="line">划，最终数据库会选择最优的方案去执行。确定最优执行计划后，SQL语句交由存储引擎处理，存储引擎将会到文件系统中取得相应的数据，并原路返回。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql体系介绍&quot;&gt;&lt;a href=&quot;#mysql体系介绍&quot; class=&quot;headerlink&quot; title=&quot;mysql体系介绍&quot;&gt;&lt;/a&gt;mysql体系介绍&lt;/h2&gt;&lt;h3 id=&quot;数据库和数据库实例概念&quot;&gt;&lt;a href=&quot;#数据库和数据库实例概念&quot; c</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装</title>
    <link href="https://a744740454.github.io/2022/06/09/mysql/mysql%20%E5%AE%89%E8%A3%85/"/>
    <id>https://a744740454.github.io/2022/06/09/mysql/mysql%20%E5%AE%89%E8%A3%85/</id>
    <published>2022-06-09T08:45:19.845Z</published>
    <updated>2022-06-10T02:47:55.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql-安装"><a href="#mysql-安装" class="headerlink" title="mysql 安装"></a>mysql 安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">1.yum install -y libaio-devel  # libaio-dev包的作用是为了支持同步I&#x2F;O.对于数据库之类的系统特别重要</span><br><span class="line"></span><br><span class="line"># 创建目录</span><br><span class="line">2.mkdir &#x2F;data&#x2F;&#123;app,3306&#x2F;&#123;data,logs,error-log&#125;&#125; -p</span><br><span class="line"></span><br><span class="line">3.touch &#x2F;data&#x2F;3306&#x2F;error-log&#x2F;mysql.log</span><br><span class="line"></span><br><span class="line"># 下载mysql包</span><br><span class="line">4.wget https:&#x2F;&#x2F;downloads.mysql.com&#x2F;archives&#x2F;get&#x2F;p&#x2F;23&#x2F;file&#x2F;mysql-5.7.37-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line">5.cd &#x2F;data&#x2F;app</span><br><span class="line"></span><br><span class="line">6.mv mysql-5.7.37-linux-glibc2.12-x86_64&#x2F; mysql</span><br><span class="line"></span><br><span class="line"># 加入环境变量</span><br><span class="line">7.echo &#39;export PATH&#x3D;&#x2F;data&#x2F;app&#x2F;mysql&#x2F;bin:$PATH&#39; &gt;&gt;&#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># 读取环境变量</span><br><span class="line">8.source &#x2F;etc&#x2F;profile</span><br><span class="line"></span><br><span class="line"># 添加系统用户，后面初始化的时候需要使用</span><br><span class="line">9.useradd mysql</span><br><span class="line"></span><br><span class="line"># 初始化数据</span><br><span class="line">10.&#x2F;data&#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --initialize-insecure --user&#x3D;mysql --basedir&#x3D;&#x2F;data&#x2F;app&#x2F;mysql --datadir&#x3D;&#x2F;data&#x2F;3306&#x2F;data</span><br><span class="line">参数介绍:</span><br><span class="line">    --initialize-insecure 初始化核心参数</span><br><span class="line">    --user&#x3D;mysql 初始化用户和组</span><br><span class="line">    --basedir&#x3D;&#x2F;data&#x2F;app&#x2F;mysql 软件安装目录</span><br><span class="line">    --datadir&#x3D;&#x2F;data&#x2F;3306&#x2F;data 数据存放位置</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">11.cp &#x2F;data&#x2F;app&#x2F;mysql&#x2F;support-files&#x2F;mysql.server &#x2F;etc&#x2F;init.d&#x2F;mysqld</span><br><span class="line"></span><br><span class="line"># 修改配置文件</span><br><span class="line">12.vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld] </span><br><span class="line">user&#x3D;mysql </span><br><span class="line">basedir&#x3D;&#x2F;data&#x2F;app&#x2F;mysql </span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;3306&#x2F;data </span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock </span><br><span class="line">[mysql] </span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line"></span><br><span class="line">13.启动数据库</span><br><span class="line">&#x2F;etc&#x2F;init.d&#x2F;mysqld start</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mysql-安装&quot;&gt;&lt;a href=&quot;#mysql-安装&quot; class=&quot;headerlink&quot; title=&quot;mysql 安装&quot;&gt;&lt;/a&gt;mysql 安装&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="mysql" scheme="https://a744740454.github.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/06/08/linux/swap%E5%88%86%E5%8C%BA/"/>
    <id>https://a744740454.github.io/2022/06/08/linux/swap%E5%88%86%E5%8C%BA/</id>
    <published>2022-06-08T06:16:27.737Z</published>
    <updated>2022-06-08T06:38:09.237Z</updated>
    
    <content type="html"><![CDATA[<h2 id="swap分区"><a href="#swap分区" class="headerlink" title="swap分区"></a>swap分区</h2><p>swap分区通常被称之为交换分区，当实际内存不足的时候，操作系统会将部分数据暂时存放到交换分区中，为当前程序腾出足够的空间。在windos中也有对应的功能被称之为虚拟内存，linux当中则是swap分区。</p><h3 id="swap分区创建大小建议"><a href="#swap分区创建大小建议" class="headerlink" title="swap分区创建大小建议"></a>swap分区创建大小建议</h3><p> 1G-2G         1.5倍内存<br> 2G-16G       与内存相同<br> 16G以上     设置为16G即可</p><h3 id="swap分区创建流程"><a href="#swap分区创建流程" class="headerlink" title="swap分区创建流程"></a>swap分区创建流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;tmp&#x2F;swap&#x2F;</span><br><span class="line">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;tmp&#x2F;swap&#x2F;tmp.swap bs&#x3D;1024 count&#x3D;4096000</span><br><span class="line">mkswap &#x2F;tmp&#x2F;swap&#x2F;tmp.swap</span><br><span class="line"></span><br><span class="line">执行完上述流程之后还没有启用，如果使用free -m可以发现大小为0</span><br><span class="line">执行下述命令，启用swap</span><br><span class="line">swapon &#x2F;tmp&#x2F;swap&#x2F;tmp.swap</span><br><span class="line">free -m</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1837         135          62           8        1639        1532</span><br><span class="line">Swap:          3999           0        3999</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;swap分区&quot;&gt;&lt;a href=&quot;#swap分区&quot; class=&quot;headerlink&quot; title=&quot;swap分区&quot;&gt;&lt;/a&gt;swap分区&lt;/h2&gt;&lt;p&gt;swap分区通常被称之为交换分区，当实际内存不足的时候，操作系统会将部分数据暂时存放到交换分区中，为当前程序</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/06/08/linux/tmpfs%E4%BB%A5%E5%8F%8A%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4/"/>
    <id>https://a744740454.github.io/2022/06/08/linux/tmpfs%E4%BB%A5%E5%8F%8A%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4/</id>
    <published>2022-06-08T05:16:09.018Z</published>
    <updated>2022-06-08T06:12:51.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调整tmpfs内存"><a href="#调整tmpfs内存" class="headerlink" title="调整tmpfs内存"></a>调整tmpfs内存</h2><h3 id="tmpfs以及命令介绍"><a href="#tmpfs以及命令介绍" class="headerlink" title="tmpfs以及命令介绍"></a>tmpfs以及命令介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">tmpfs:临时文件系统，驻留在内存中，所以像&#x2F;dev&#x2F;shm这个目录不在硬盘中，而是在内存中。因此读写速度是较快的，我们可以将一些不需要保存的数据存放在这个目录当中，加快读写。并且值得一提的是，tmpfs系统挂载的内存大小的值，如果没有使用，是没有去真正占用的，只有当真正被使用的时候才会被占用。打个比方的话就是tmpfs挂载了500m的内存，我使用文件占用了10m,那么剩下的490m的空间是可以被其他的程序使用</span><br><span class="line"></span><br><span class="line"># 查看内存使用情况命令</span><br><span class="line">free -m # 以m的形式展示</span><br><span class="line">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class="line">Mem:           1837         130        1479           8         227        1560</span><br><span class="line">Swap:             0           0           0</span><br><span class="line"></span><br><span class="line"># 显示磁盘使用情况</span><br><span class="line">Filesystem     1K-blocks    Used Available Use% Mounted on</span><br><span class="line">devtmpfs          930356       0    930356   0% &#x2F;dev</span><br><span class="line">tmpfs             940808       0    940808   0% &#x2F;dev&#x2F;shm</span><br><span class="line">tmpfs             940808    8740    932068   1% &#x2F;run</span><br><span class="line">tmpfs             940808       0    940808   0% &#x2F;sys&#x2F;fs&#x2F;cgroup</span><br><span class="line">&#x2F;dev&#x2F;vda1       41152736 2150552  36888700   6% &#x2F;</span><br><span class="line">tmpfs             188164       0    188164   0% &#x2F;run&#x2F;user&#x2F;0</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改tmpfs的文件大小"><a href="#修改tmpfs的文件大小" class="headerlink" title="修改tmpfs的文件大小"></a>修改tmpfs的文件大小</h3><h4 id="临时修改"><a href="#临时修改" class="headerlink" title="临时修改"></a>临时修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,size&#x3D;777M tmpfs &#x2F;dev&#x2F;shm</span><br></pre></td></tr></table></figure><h4 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;fstab</span><br><span class="line">修改 tmpfs行</span><br><span class="line"></span><br><span class="line">tmpfs &#x2F;dev&#x2F;shm tmpfs defaults,size&#x3D;777M 0 0</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;调整tmpfs内存&quot;&gt;&lt;a href=&quot;#调整tmpfs内存&quot; class=&quot;headerlink&quot; title=&quot;调整tmpfs内存&quot;&gt;&lt;/a&gt;调整tmpfs内存&lt;/h2&gt;&lt;h3 id=&quot;tmpfs以及命令介绍&quot;&gt;&lt;a href=&quot;#tmpfs以及命令介绍&quot; c</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/06/07/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    <id>https://a744740454.github.io/2022/06/07/%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/</id>
    <published>2022-06-07T02:14:20.946Z</published>
    <updated>2022-06-07T02:53:39.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表是一种线性存储结构，数据是随机存储的，由于数据乱序存储，因此无法清楚数据之间的前后关系。所以每个数据存储的时候会配备一个指针，这个指针指向的是自己的后继元素。综上所述。数据元素随机存储，并通过指针表示前后关系的存储结构就是链式存储结构。</p><h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><p>一个链表由两部分组成</p><p>头指针:一个普通的指针，永远指向链表第一个节点的位置。</p><p>节点:存储数据的部分，细分又可以分为头节点、首元节点和其他节点</p><p>头节点:不存储任何数据的空节点，通常作为链表的第一个节点</p><p>首元节点:链表中第一个存有数据的节点被称之为首元节点</p><p>其他节点:其他节点</p><p><img src="https://s2.loli.net/2022/06/07/TwDU6J8rzdgQSIt.gif" alt="链表"></p><p>​                                                                <strong>链表示意图</strong></p><p>​            </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;链表&quot;&gt;&lt;a href=&quot;#链表&quot; class=&quot;headerlink&quot; title=&quot;链表&quot;&gt;&lt;/a&gt;链表&lt;/h2&gt;&lt;p&gt;链表是一种线性存储结构，数据是随机存储的，由于数据乱序存储，因此无法清楚数据之间的前后关系。所以每个数据存储的时候会配备一个指针，这个指针指</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/28/Vue%E5%AD%A6%E4%B9%A0/vue3/Vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/"/>
    <id>https://a744740454.github.io/2022/02/28/Vue%E5%AD%A6%E4%B9%A0/vue3/Vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/</id>
    <published>2022-02-28T07:00:31.193Z</published>
    <updated>2022-02-28T07:00:36.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue数据响应"><a href="#Vue数据响应" class="headerlink" title="Vue数据响应"></a>Vue数据响应</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### reactive</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue数据响应&quot;&gt;&lt;a href=&quot;#Vue数据响应&quot; class=&quot;headerlink&quot; title=&quot;Vue数据响应&quot;&gt;&lt;/a&gt;Vue数据响应&lt;/h2&gt;&lt;h3 id=&quot;ref&quot;&gt;&lt;a href=&quot;#ref&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/setup/"/>
    <id>https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/setup/</id>
    <published>2022-02-21T09:27:28.770Z</published>
    <updated>2022-02-28T06:59:24.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setup的初识"><a href="#setup的初识" class="headerlink" title="setup的初识"></a>setup的初识</h2><h3 id="vue2中写法"><a href="#vue2中写法" class="headerlink" title="vue2中写法"></a>vue2中写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default (&#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,methods:&#123;</span><br><span class="line">    updateCount()&#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue3中的写法"><a href="#vue3中的写法" class="headerlink" title="vue3中的写法"></a>vue3中的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  &#x2F;* 使用vue3的composition API *&#x2F;</span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义响应式数据 ref对象</span><br><span class="line">    const count &#x3D; ref(1)</span><br><span class="line">    console.log(count)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 更新响应式数据的函数</span><br><span class="line">    function update () &#123;</span><br><span class="line">      &#x2F;&#x2F; alert(&#39;update&#39;)</span><br><span class="line">      count.value &#x3D; count.value + 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;setup的初识&quot;&gt;&lt;a href=&quot;#setup的初识&quot; class=&quot;headerlink&quot; title=&quot;setup的初识&quot;&gt;&lt;/a&gt;setup的初识&lt;/h2&gt;&lt;h3 id=&quot;vue2中写法&quot;&gt;&lt;a href=&quot;#vue2中写法&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/vue3/"/>
    <id>https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/vue3/</id>
    <published>2022-02-21T09:13:59.882Z</published>
    <updated>2022-02-21T09:26:57.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue3安装与初识"><a href="#vue3安装与初识" class="headerlink" title="vue3安装与初识"></a>vue3安装与初识</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装vue3</span><br><span class="line"></span><br><span class="line">1.脚手架方式安装</span><br><span class="line">命令</span><br><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue --version</span><br><span class="line">vue create 项目名</span><br><span class="line"></span><br><span class="line">2.使用vite创建</span><br><span class="line">特定:</span><br><span class="line">1.快速的冷启动</span><br><span class="line">2.即时的热模块更新,替换性能和模块的解耦让更新飞起</span><br><span class="line">3.真正的按需编译，不再等待整个应用编译完成</span><br><span class="line">命令:</span><br><span class="line">npm init vite-app 项目名</span><br><span class="line">cd 项目名</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="App-vue代码"><a href="#App-vue代码" class="headerlink" title="App.vue代码"></a>App.vue代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue2中的html必须要有一对根标签，Vue3组件的html模板中可以没有根标签 --&gt;</span><br><span class="line">  &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">  &lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;引入一个子级组件</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;暴露出去一个定义好的组件</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F;当前组件的名称是App</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  &#x2F;&#x2F;注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x2F;&#x2F;注册一个子级组件</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue3安装与初识&quot;&gt;&lt;a href=&quot;#vue3安装与初识&quot; class=&quot;headerlink&quot; title=&quot;vue3安装与初识&quot;&gt;&lt;/a&gt;vue3安装与初识&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/16/Vue%E5%AD%A6%E4%B9%A0/webpack/"/>
    <id>https://a744740454.github.io/2022/01/16/Vue%E5%AD%A6%E4%B9%A0/webpack/</id>
    <published>2022-01-16T02:36:06.782Z</published>
    <updated>2022-01-16T04:40:45.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h3><p>webpack就是一个打包工具，浏览器只能识别.js.jpg等少部分的文件，通过webpack可以将一些不同文件后缀名的转换成浏览器可以识别的文件</p><h3 id="webpack与node的关系"><a href="#webpack与node的关系" class="headerlink" title="webpack与node的关系"></a>webpack与node的关系</h3><p>webpack 本身依赖于node执行，必须先安装node之后才能安装webpack,node安装之后会自带一个包管理工具npm，我们可以使用npm安装对应的包</p><h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><h3 id="webpack打包js文件"><a href="#webpack打包js文件" class="headerlink" title="webpack打包js文件"></a>webpack打包js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#对main文件进行打包，这样子就会将main文件中所有引用的内容以及本身的内容进行打包，存放到budle.js文件中</span><br><span class="line">webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.js</span><br><span class="line"></span><br><span class="line">然后在主文件中我们只需要引用bundle.js就可以了</span><br></pre></td></tr></table></figure><h3 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h3><h4 id="webpack配置文件-1"><a href="#webpack配置文件-1" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js</span><br><span class="line">    const path &#x3D; require(&#39;path&#39;) # 导入node包，用于找到当前文件路径</span><br><span class="line">    module.exports &#x3D;&#123;</span><br><span class="line">        entry:&#39;.&#x2F;src&#x2F;main.js&#39;, #输入文件路径</span><br><span class="line">        output :&#123;</span><br><span class="line">            path:path.resolve(__dirname,&#39;dist&#39;), #输出的文件夹路径，不能使用相对路径</span><br><span class="line">            filename : &#39;bundle.js&#39; #输出的文件名称</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>package.json是通过npm init生成的，我们可以通过这个文件去知道这个项目的一些基本信息，以及做到类似makefile的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>执行命令</span><br><span class="line">npm init #然后一路回车即可</span><br><span class="line"><span class="number">2.</span>package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;practice&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;  <span class="comment">//脚本，在这里写命令之后可以通过npm run 去实现后续的命令，例如npm run build == webpack</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;  <span class="comment">//包依赖</span></span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>webpack 打包直接下载后只能支持基础的打包，如果想要支持css获其余类型文件的打包必须要下载对应的loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">官方文档地址https:&#x2F;&#x2F;webpack.docschina.org&#x2F;loaders&#x2F;css-loader </span><br><span class="line">(1)安装</span><br><span class="line">npm install --save-dev css-loader &#x2F;&#x2F;这个loader只负载加载，如果想要css文件生效还需要style-loader</span><br><span class="line">npm install --save-dev style-loader &#x2F;&#x2F;这个loader负责渲染</span><br><span class="line">(2)配置</span><br><span class="line">webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;i, &#x2F;&#x2F;这里是正则表达式，代表对所有的css文件进行匹配，去执行下面的loader</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h2&gt;&lt;h3 id=&quot;webpack是什么&quot;&gt;&lt;a href=&quot;#webpack是什么&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-01-15T10:17:08.848Z</published>
    <updated>2022-01-15T10:50:24.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了代码的复用，es6中也有导入导出的方式，可以将复用的js代码进行抽取。</span><br><span class="line"></span><br><span class="line">新建一个文件，在该文件中定义一些变量或函数</span><br><span class="line">使用export&#123;变量名1,变量名2&#125;</span><br><span class="line">import &#39;变量名1&#39; from &#39;文件路径&#39;;</span><br><span class="line"></span><br><span class="line">简单的说前端就是通过导出的方式去判断是内部函数或变量还是外部可以调用的方式。</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.html:&lt;script src&#x3D;&quot;info.js&quot; type&#x3D;&quot;module&quot;&#x2F;&gt; #引入js文件</span><br><span class="line">2.两个js互相导入导出</span><br><span class="line">import &#123;s,b,c&#125; from &#39;文件路径&#39; # 引入default关键字的变量不需要加大括号</span><br></pre></td></tr></table></figure><h3 id="导出方式"><a href="#导出方式" class="headerlink" title="导出方式"></a>导出方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.在需要导出的函数名前加export</span><br><span class="line">export function 变量名</span><br><span class="line"></span><br><span class="line">2.先定义好，定义好后集体导出</span><br><span class="line">export&#123;函数1，函数2&#125;</span><br><span class="line"></span><br><span class="line">3.让导入者自己命名</span><br><span class="line">export default aaa # 只能有一个default</span><br><span class="line">import bbb from &#39;文件名&#39; 将前端有default的重命名成了bbb(不需要大括号)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端模块化&quot;&gt;&lt;a href=&quot;#前端模块化&quot; class=&quot;headerlink&quot; title=&quot;前端模块化&quot;&gt;&lt;/a&gt;前端模块化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/</id>
    <published>2022-01-15T09:32:52.348Z</published>
    <updated>2021-01-12T11:38:31.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">该属性与data,methods这些属于同一级别,你可以在这个属性里面写一个函数，这个函数的结果就会成为外界使用这个函数的结果。效果类似于methods.</span><br><span class="line">基本语法:</span><br><span class="line">html方面:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;demo&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">vue方面:</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            demo:function()&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#该属性与methods的区别</span></span><br><span class="line">methods你每次都需要重新调用一遍函数，若是一个确定的固定的值，那这是很没有必要的。会浪费大量的计算资源。这个时候我们就可以使用computed,该属性会将内部的函数计算的结果保存下来。以后你每次调用他就会将这个值直接返回给你，而不会在进行一遍函数的运算</span><br></pre></td></tr></table></figure><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Vue提供了一个属性帮助我们监听属性的变化，当属性发生了变化的时候，他会自己去调用这个属性里面的函数</span><br><span class="line"></span><br><span class="line">html相关:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; @click=&quot;button_test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&#123;&#123;test&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue相关:</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">data:&#123;</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">test: function(new_test,old_test)&#123;</span><br><span class="line">console.log(new_test)</span><br><span class="line">console.log(old_test)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">button_test:function()&#123;</span><br><span class="line">this.test += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue%E7%BB%84%E4%BB%B6/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue%E7%BB%84%E4%BB%B6/</id>
    <published>2022-01-15T09:32:52.345Z</published>
    <updated>2022-01-15T09:40:09.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><h4 id="组件基本使用"><a href="#组件基本使用" class="headerlink" title="组件基本使用"></a>组件基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vue组件的功能简单的说就是帮助我们将一些复用的代码进行封装,然后我们在前端的页面上就可以通过特定的标签将这些组件渲染在页面上，这样子我们就可以省去写重复代码的情况</span><br><span class="line">html代码:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">&lt;component_test&gt;&lt;/component_test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">js代码:</span><br><span class="line">Vue.component(<span class="string">&#x27;component_test&#x27;</span>, &#123;</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;button v-on:click=&quot;count--&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span> <span class="comment">#将这里的标签渲染在上面</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ps:组件中的data必须是一个函数，这是为了防止多个组件之间的数据被互相影响</span><br></pre></td></tr></table></figure><h4 id="通过prop向组件传递数据"><a href="#通过prop向组件传递数据" class="headerlink" title="通过prop向组件传递数据"></a>通过prop向组件传递数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">当我们通过一个实例化的对象获得了一定的API数据后，我们若是想将这个实例化对象的数据传递给我们的组件，我们可以使用下述的方式</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>port的值</span><br><span class="line">vue = new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        ports:[</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">1</span>,title:<span class="string">&#x27;这是port1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">2</span>,title:<span class="string">&#x27;这是port2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">3</span>,title:<span class="string">&#x27;这是port3&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建一个标签，并获得标签中port属性的值</span><br><span class="line">Vue.component(<span class="string">&#x27;component_test&#x27;</span>, &#123;</span><br><span class="line">    props:[<span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;p&gt;&#123;&#123; port[0].id &#125;&#125; &#123;&#123; port[0].title &#125;&#125;&lt;/p&gt;&#x27;</span> <span class="comment">#可以在模板中使用这个port中的值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>使用v-bind为标签设置属性</span><br><span class="line">&lt;component_test v-bind:port=&#x27;ports&#x27;&gt;&lt;/component_test&gt;</span><br><span class="line"> </span><br><span class="line">ps:我们可以限制传过来的数据的类型</span><br><span class="line">props: &#123;</span><br><span class="line">            myname:String, <span class="comment">#传过来的数据必须是字符串类型</span></span><br><span class="line">            isshow:Boolean <span class="comment">#传过来的数据必须是布尔类型</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组件向vue实例传递数据的方式"><a href="#组件向vue实例传递数据的方式" class="headerlink" title="组件向vue实例传递数据的方式"></a>组件向vue实例传递数据的方式</h4><h5 id="1-通过自定义事件来传递数据"><a href="#1-通过自定义事件来传递数据" class="headerlink" title="1.通过自定义事件来传递数据"></a>1.通过自定义事件来传递数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过自定义事件来传递数据</span><br><span class="line">html:</span><br><span class="line">&lt;navbar @myevent=&quot;handleClick&quot;&gt;&lt;/navbar&gt;</span><br><span class="line"></span><br><span class="line">组件:</span><br><span class="line">    Vue.component(<span class="string">&#x27;navbar&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click=&quot;handleNav&quot;&gt;点我，触发父组件的某个函数执行&lt;/button&gt; #创建一个按钮并绑定了点击事件</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                name:<span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleNav()&#123;</span><br><span class="line">                this.$emit(<span class="string">&#x27;myevent&#x27;</span>,<span class="number">100</span>,this.name,<span class="number">99</span>) <span class="comment">#每当按钮被点击时会触发这边的事件，后面是传递的参数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">vue实例:</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick(ev,a,b)&#123;</span><br><span class="line">                console.log(<span class="string">&#x27;我是父组件的函数，我执行了&#x27;</span>)</span><br><span class="line">                console.log(ev)</span><br><span class="line">                console.log(a)</span><br><span class="line">                console.log(b)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-通过ref属性来传递数据"><a href="#2-通过ref属性来传递数据" class="headerlink" title="2.通过ref属性来传递数据"></a>2.通过ref属性来传递数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ref属性放置在标签上，拿到的是原生节点</span><br><span class="line">ref属性放置在组件上，拿到的是组件对象</span><br><span class="line">eg:</span><br><span class="line">    html:</span><br><span class="line">        &lt;child ref=&quot;mychild&quot;&gt;&lt;/child&gt; #子组件设置属性</span><br><span class="line">        </span><br><span class="line">    组件:</span><br><span class="line">        Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">            template: `</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            我是子组件的<span class="built_in">input</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            `,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    mytext: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add(a)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;返回了&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">实例:</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: <span class="string">&#x27;asdf&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handle(a) &#123;</span><br><span class="line">                this.name = a</span><br><span class="line">            &#125;,</span><br><span class="line">            handleButton()&#123;</span><br><span class="line">                console.log(this.$refs.mychild.mytext) <span class="comment">#获得子组件中的mytext数据</span></span><br><span class="line">                console.log(this.$refs.mychild.add(this.name)) <span class="comment">#向子组件传递数据，将name属性传递给他的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="组件与组件之间传递数据的方式"><a href="#组件与组件之间传递数据的方式" class="headerlink" title="组件与组件之间传递数据的方式"></a>组件与组件之间传递数据的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们可能遇到一些需要往另一个组件中传递数据的情况，这种时候我们需要用到一个叫做事件总线的技术，让他在组件与组件之间起到桥梁的作用</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>首先我们先定义一个事件总线</span><br><span class="line">    var bus=new Vue()</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>在某个组件中使用这个事件总线</span><br><span class="line">    Vue.component(<span class="string">&#x27;child1&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=&quot;handleClick&quot;&gt;点我传递数据到另一个组件&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(this.text)</span><br><span class="line">                bus.$emit(<span class="string">&#x27;suibian&#x27;</span>,this.text) <span class="comment">#把数据传递给事件总线</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在另外一个组件上监听事件总线的变化</span><br><span class="line">    Vue.component(<span class="string">&#x27;child2&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        收到的消息是：&#123;&#123;recv_text&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                recv_text:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;  <span class="comment">#组件挂载（生命周期钩子函数中的一个），开始监听事件总线上的随便</span></span><br><span class="line">            bus.$on(&#x27;suibian&#x27;,(item)=&gt;&#123;</span><br><span class="line">                console.log(<span class="string">&#x27;收到了&#x27;</span>,item)</span><br><span class="line">                this.recv_text=item</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="vue生命周期图"><a href="#vue生命周期图" class="headerlink" title="vue生命周期图"></a>vue生命周期图</h4><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期" style="zoom:50%;" /><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们可能拥有多个子组件，但同一时间内只会显示一个，或通过用户的某些操作来改变组件的展示</span><br><span class="line">这时我们就需要用到动态组件</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>在实例中的data中设置一个任意名称的数据，这个数据要与组件有关系</span><br><span class="line">实例:</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            who: <span class="string">&#x27;child1&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            child1: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是首页 </span><br><span class="line">                &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;,</span><br><span class="line">            child2: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是商品 &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;,</span><br><span class="line">            child3: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是订单 &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>在html中设置一个component标签</span><br><span class="line">&lt;component :is=&quot;who&quot;&gt;&lt;/component&gt; 这个标签的:is属性与data中的数据有关系，后期我们可以通过修改who的属性来设置这个地方出现的组件是谁</span><br></pre></td></tr></table></figure><h4 id="keep-alive标签的作用"><a href="#keep-alive标签的作用" class="headerlink" title="keep-alive标签的作用"></a>keep-alive标签的作用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加入该标签后，若你切换到另外一个组件，这个组件不会被销毁，这样的话数据会保留下来</span><br><span class="line">eg：</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;component :is=&quot;who&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h4 id="使用axios向后端发送ajax请求"><a href="#使用axios向后端发送ajax请求" class="headerlink" title="使用axios向后端发送ajax请求"></a>使用axios向后端发送ajax请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios是一个框架，使用这个框架可以帮助我们向后端发送ajax请求</span><br><span class="line"><span class="number">1.</span>导入cdn</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.0/axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如上图，我们可以看到vue的生命周期，在mounted之后我们对前端设定的模板进行了替换，所以我们可以在此之前发送ajax请求，获得数据。</span><br><span class="line">然后他会对前端的模板进行替换。</span><br><span class="line">vue = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#axios&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        data:null</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        axios.get(<span class="string">&#x27;http://127.0.0.1:8001/home/home/&#x27;</span>).</span><br><span class="line">        <span class="comment">#设置一个回调函数</span></span><br><span class="line">        then(response =&gt; (</span><br><span class="line">            this.data = response.data <span class="comment"># 将this.data中的数据替换成返回的数据</span></span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">我们之前有学过有关组件的基本内容，而插槽就是在组件内进行一个定位。我们可以在某些位置对定位的内容进行定量的替换</span><br><span class="line"></span><br><span class="line">html内容</span><br><span class="line">&lt;slot_test&gt;</span><br><span class="line">&lt;slot_test2&gt;&lt;/slot_test2&gt;</span><br><span class="line">&lt;/slot_test&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue插槽内容:</span><br><span class="line"><span class="comment">#模板文件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test&#x27;</span>,&#123;</span><br><span class="line">    template:</span><br><span class="line">    `&lt;div&gt;这是第一层的div</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            这是第二层的div</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            这是slot底下的文字</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#要插入模板文件的组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test2&#x27;</span>,&#123;</span><br><span class="line">template:`&lt;div&gt;我在哪？&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如上所示，我们将底下的组件插入到上面的组件中的模板中了，它默认是在所有的slot位置插入所有有写的组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们也可以根据插槽的一个name属性，来指定我们将某个插件插入在哪个位置</span><br><span class="line"><span class="number">1.</span>首先我们在一个根插槽为一个slot设置一个name属性</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test&#x27;</span>,&#123;</span><br><span class="line">template:</span><br><span class="line">`&lt;div&gt;</span><br><span class="line">这是第一层的div</span><br><span class="line">&lt;slot name=&#x27;first&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">这是第一层slot底下的文字</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">这是第二层的div</span><br><span class="line">&lt;slot name=&#x27;second&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">这是第二层slot底下的文字</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>其次我们就可以利用这个在组件中使用slot属性指定我们需要将对应的组件插入的位置</span><br><span class="line">html:</span><br><span class="line">&lt;slot_test&gt;</span><br><span class="line">&lt;slot_test2 slot=&#x27;second&#x27;&gt;&lt;/slot_test2&gt;</span><br><span class="line">&lt;slot_test3 slot=&#x27;first&#x27;&gt;&lt;/slot_test3&gt;</span><br><span class="line">&lt;/slot_test&gt;</span><br><span class="line"></span><br><span class="line">组件:</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test2&#x27;</span>,&#123;</span><br><span class="line">    template:`&lt;div &gt;我在哪？&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test3&#x27;</span>,&#123;</span><br><span class="line">    template:`&lt;div &gt;我在这&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vue提供了自定义指令的方式</span><br><span class="line">    html:</span><br><span class="line">    &lt;div v-mystyle=&quot;color&quot;&gt; 我是div&lt;/div&gt;</span><br><span class="line">    组件:</span><br><span class="line">        Vue.directive(<span class="string">&#x27;mystyle&#x27;</span>, &#123;</span><br><span class="line">            inserted(ev, color) &#123;  <span class="comment">#ev就是标签对象</span></span><br><span class="line">                console.log(ev)</span><br><span class="line">                console.log(color.value) <span class="comment">#color.value才是真正的数据</span></span><br><span class="line">                ev.style.background = color.value</span><br><span class="line">            &#125;,</span><br><span class="line">            update(el, <span class="built_in">input</span>) &#123;</span><br><span class="line">                el.style.background = <span class="built_in">input</span>.value</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">过滤器可以帮助我们进行一些特定的操作</span><br><span class="line">html:</span><br><span class="line">&lt;img :src=<span class="string">&quot;item.img | repUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">过滤器:   </span><br><span class="line">    Vue.<span class="built_in">filter</span>(<span class="string">&#x27;repUrl&#x27;</span>, function (url) &#123;</span><br><span class="line">        <span class="keyword">return</span> url.replace(<span class="string">&#x27;w.h&#x27;</span>, <span class="string">&#x27;128.180&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue组件&quot;&gt;&lt;a href=&quot;#Vue组件&quot; class=&quot;headerlink&quot; title=&quot;Vue组件&quot;&gt;&lt;/a&gt;Vue组件&lt;/h3&gt;&lt;h4 id=&quot;组件基本使用&quot;&gt;&lt;a href=&quot;#组件基本使用&quot; class=&quot;headerlink&quot; title=&quot;组</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue基本语法</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-01-15T09:32:52.342Z</published>
    <updated>2022-01-15T09:35:06.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue基本语法"><a href="#vue基本语法" class="headerlink" title="vue基本语法"></a>vue基本语法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; #vue导入</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">#导入后实例化一个新的Vue对象</span></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;选择器&#x27;</span>,<span class="comment">#使用这个找到你需要的标签，然后你就可以在这个标签内找到该对象内的值</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,<span class="comment">#这里面写各种函数</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="comment">#这里写各种数据，你可以在标签内通过&#123;&#123; &#125;&#125;获得数据</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&#123;&#123; message &#125;&#125; <span class="comment"># vue对象中的message会渲染到这里</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">        message: <span class="string">&#x27;hello Vue&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ps：若data中存在列表以及对象，列表使用索引取值，对象使用.key的方式取值</span><br></pre></td></tr></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这个指令会让元素只渲染一次，后续不会随着数据的改变而改变</span><br><span class="line">eg:</span><br><span class="line">&lt;h2 v-once&#x3D;&quot;school.phone + &#39;!&#39; &quot;&gt;&lt;&#x2F;h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: &quot;北京校区&quot;,</span><br><span class="line">phone: 13333</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-text与v-html"><a href="#v-text与v-html" class="headerlink" title="v-text与v-html"></a>v-text与v-html</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v-text==js中的innerText() 你为一个标签设置该属性之后，他只会将该标签内的内容全部替换为你指定的内容</span><br><span class="line">ps：可以使用运算符</span><br><span class="line">eg：</span><br><span class="line">&lt;h2 v-text=&quot;school.phone + &#x27;!&#x27; &quot;&gt;&lt;/h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: <span class="string">&quot;北京校区&quot;</span>,</span><br><span class="line">phone: <span class="number">13333</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">v-html则是==js中的innerHtml() 若是你在data中设置的值附带标签，那么他会将*标签*渲染在该位置</span><br></pre></td></tr></table></figure><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-pre类似于后端的转义符，可以让模板语言中的模板失效，会原封不动的将模板转成字符串打印出来</span><br><span class="line">eg：</span><br><span class="line">&lt;h2 v-pre&#x3D;&quot;school.phone + &#39;!&#39; &quot;&gt;&lt;&#x2F;h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: &quot;北京校区&quot;,</span><br><span class="line">phone: 13333</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">你可以通过v-on设置事件</span><br><span class="line">v-on有下述几种常用事件</span><br><span class="line"><span class="meta">@click:标签被点击时触发</span></span><br><span class="line"><span class="meta">@blur:失去焦点触发</span></span><br><span class="line"><span class="meta">@change:失去焦点时触发，与blur一样，除了一种特殊情况，就是当用户点入input框后，若是没进行任何的修改，直接退出，那么不会触发</span></span><br><span class="line"><span class="meta">@input:数据发生改变触发</span></span><br><span class="line"><span class="meta">@keyup.xxx:键盘上某个键被按下时触发，键盘的每一个按键都有特定的数字与其进行映射，例如<span class="number">13</span>就是回车键</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="comment">#为下述两个标签设置点击事件</span></span><br><span class="line">    &lt;div v-on:click=&quot;click&quot;&gt;132&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;click&quot;&gt;456&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">#点击事件的具体逻辑</span></span><br><span class="line">    <span class="comment">#语法----函数名:function()&#123;&#125;</span></span><br><span class="line">    click: function() &#123;</span><br><span class="line">        // 可以通过this获得这个Vue对象内的任意值</span><br><span class="line">        this.school.name = <span class="string">&#x27;我被点击了&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps:@等于v-on:是他的简化版</span><br><span class="line">ps:若要为事件传参直接在标签的函数名后添加括号即可</span><br><span class="line">&lt;div v-on:click=&quot;click(123)&quot;&gt;132&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">在v-on后面还可以执行一些简单的js代码</span><br><span class="line">&lt;button type=&quot;button&quot; v-on:click=&quot;count++&quot;&gt;点击我试试&lt;/button&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">js代码:</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            count:<span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在v-on后面设置事件后，我们还可以设置一些事件修饰符</span><br><span class="line">常用的事件修饰符如下所示</span><br><span class="line">.stop 阻止事件冒泡</span><br><span class="line">.self 只处理自己的事件，子控件冒泡的事件不处理</span><br><span class="line">.prevent 阻止a链接跳转</span><br><span class="line">.once 只处理一次就解绑(抽奖页面)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">     &lt;div @click.stop=&quot;click&quot;&gt;132&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以通过该方法设置一个标签是否隐藏</span><br><span class="line">&lt;div v-show=&quot;is_show&quot; v-on:click=&quot;show&quot;&gt;我还在&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    is_show:true,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#我们可以通过修改data中的is_show来修改标签是否显示</span></span><br></pre></td></tr></table></figure><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">if</span>控制标签是否显示时功能与v-show一致，不同的是他直接操作dom树，会将一个标签直接移除。</span><br><span class="line">他后面还可以写原生的js语句</span><br><span class="line">他会判断后面的js语句是否正确，我们可以利用这个特性和v-<span class="keyword">else</span>做到流程控制</span><br></pre></td></tr></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v-bind用于绑定标签的属性，以此来设置标签的属性</span><br><span class="line"><span class="number">1.</span>v-bind与普通属性的绑定</span><br><span class="line">eg：</span><br><span class="line">&lt;img v-bind:src=<span class="string">&quot;img_src&quot;</span> &gt;</span><br><span class="line">    data: &#123;</span><br><span class="line">        img_src:<span class="string">&#x27;public/favicon.ico&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">上述例子中就会将img标签中的src属性绑定为img_src</span><br><span class="line">v-bind还有简写的方式，可以将v-bind省去，只留下:</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>v-bind与类的绑定</span><br><span class="line">:class=&quot;&#123;active:is_active&#125;&quot; 语法为 &#123;css样式的类名:data&#125; true的话会显示，false的话不显示</span><br><span class="line">data: &#123;</span><br><span class="line">        is_active:true,</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">该语法类似于python中的<span class="keyword">for</span>循环</span><br><span class="line">eg:</span><br><span class="line">    &lt;li v-for=&quot;i in food&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt; </span><br><span class="line">    data: &#123;</span><br><span class="line">        food:[<span class="string">&#x27;西红柿炒蛋&#x27;</span>,<span class="string">&#x27;蛋炒西红柿&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">如上会生成两个li标签我们还可以获得他的索引</span><br><span class="line">    &lt;li v-for=&quot;(food,index) in foods&quot;&gt;&#123;&#123; index &#125;&#125;&#123;&#123; food &#125;&#125;&lt;/li&gt; </span><br><span class="line">    data: &#123;</span><br><span class="line">        foods:[<span class="string">&#x27;西红柿炒蛋&#x27;</span>,<span class="string">&#x27;蛋炒西红柿&#x27;</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用v-model可以做到标签与数据的双向绑定，一般用于<span class="built_in">input</span>标签，这样就会在<span class="built_in">input</span>标签内显示message信息</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;我是vue内的message&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="key属性的作用"><a href="#key属性的作用" class="headerlink" title="key属性的作用"></a>key属性的作用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key属性在Vue中起到的作用主要是提高元素的渲染效果，这个key一般一个标签只有一个。</span><br></pre></td></tr></table></figure><h4 id="虚拟dom树"><a href="#虚拟dom树" class="headerlink" title="虚拟dom树"></a>虚拟dom树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟dom也就是虚拟节点，利用js对象来描述真实的dom节点。每次只修改真实dom变更的部分，这样做可以保证高效的渲染，提高渲染性能</span><br></pre></td></tr></table></figure><h4 id="Vue的diff算法"><a href="#Vue的diff算法" class="headerlink" title="Vue的diff算法"></a>Vue的diff算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue利用自己的diff算法对真实dom与虚拟dom的替换做了一个优化</span><br><span class="line">共有三种方案</span><br><span class="line">-分层级比较</span><br><span class="line">    -同key值比较（循环中尽量加key）</span><br><span class="line">    -组件或标签的比较去替换</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue基本语法&quot;&gt;&lt;a href=&quot;#vue基本语法&quot; class=&quot;headerlink&quot; title=&quot;vue基本语法&quot;&gt;&lt;/a&gt;vue基本语法&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E4%BD%BF%E7%94%A8swiper/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E4%BD%BF%E7%94%A8swiper/</id>
    <published>2022-01-15T09:32:52.340Z</published>
    <updated>2021-01-12T11:38:33.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue使用swiper"><a href="#vue使用swiper" class="headerlink" title="vue使用swiper"></a>vue使用swiper</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先需要安装</span><br><span class="line">cnpm install swiper vue-awesome-swiper --save</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在main.js中导入</span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在组件中使用</span><br><span class="line"><span class="comment">#在mounted中进行实例化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/swiper-bundle.css&#x27;</span> <span class="comment">#导入样式，也可以在main.js中导入，代表全局</span></span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.$swiper = new Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">#这里写配置的各种属性</span></span><br><span class="line">        slidesPerView: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">#一个页面中显示几个</span></span><br><span class="line">        virtual: true,</span><br><span class="line">        // loop: true, <span class="comment">#是否开启循环</span></span><br><span class="line">        slidesPerGroup : <span class="number">3</span>, <span class="comment">#按几个分为一组</span></span><br><span class="line">        watchSlidesProgress : true, <span class="comment">#监听进度</span></span><br><span class="line">        navigation: &#123; <span class="comment">#前后按钮组件</span></span><br><span class="line">            nextEl: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">            prevEl: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;vue使用swiper&quot;&gt;&lt;a href=&quot;#vue使用swiper&quot; class=&quot;headerlink&quot; title=&quot;vue使用swiper&quot;&gt;&lt;/a&gt;vue使用swiper&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue_CLI</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue_CLI/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue_CLI/</id>
    <published>2022-01-15T09:32:52.337Z</published>
    <updated>2022-01-15T09:34:39.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue_CLI"></a>Vue_CLI</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装node</span><br><span class="line">官网下载安装包，傻瓜式安装：https://nodejs.org/zh-cn/</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>安装cnpm <span class="comment">#淘宝源，下载速度较快</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>安装脚手架</span><br><span class="line">cnpm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>清空缓存处理</span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>项目创建</span><br><span class="line">vue create 项目名 <span class="comment">#项目会创建在当前文件夹下</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>启动服务</span><br><span class="line">npm run serve <span class="comment">#需要进入项目根目录</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>打包项目</span><br><span class="line">npm run build <span class="comment">#需要进入项目根目录</span></span><br></pre></td></tr></table></figure><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dist: 打包的项目目录(打包后会生成)</span><br><span class="line">node_modules: 项目依赖</span><br><span class="line">public: 共用资源</span><br><span class="line">src: 项目目标,书写代码的地方</span><br><span class="line">-- assets:资源</span><br><span class="line">-- components:组件</span><br><span class="line">-- views:视图组件</span><br><span class="line">-- App.vue:根组件</span><br><span class="line">-- main.js: 入口js</span><br><span class="line">-- router.js: 路由文件</span><br><span class="line">-- store.js: 状态库文件</span><br><span class="line">vue.config.js: 项目配置文件(没有可以自己新建)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="vue项目修改端口"><a href="#vue项目修改端口" class="headerlink" title="vue项目修改端口"></a>vue项目修改端口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过修改vue.config.js来实现达到修改端口的目的</span><br><span class="line"><span class="comment">#vue.config.js</span></span><br><span class="line">module.exports=&#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">port: <span class="number">8888</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现自定义组件跳转"><a href="#实现自定义组件跳转" class="headerlink" title="实现自定义组件跳转"></a>实现自定义组件跳转</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">组件的跳转</span><br><span class="line"><span class="number">1.</span>在app.vue中的template中添加两个标签</span><br><span class="line">&lt;router-link to=&quot;/要跳往的路径&quot;&gt;内容&lt;/router-link&gt; #该标签类似于前端的a标签</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt; #组件的内容如果想要展示必须加</span><br><span class="line">   eg:</span><br><span class="line">        &lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"><span class="number">2.</span>新建组件</span><br><span class="line">如上述示例所示，我们需要在components下新建一个以vue结尾的文件</span><br><span class="line">    </span><br><span class="line">    template:</span><br><span class="line">         &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;home&lt;/h1&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">     </span><br><span class="line">    script:</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;  <span class="comment">#export是导出的意思，只有在这里导出了我们才能在别处引用这个组件</span></span><br><span class="line">                data () &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        msg: <span class="string">&quot;我是home 组件&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span>新建一个router.js文件,将组件的路径写在这边</span><br><span class="line">router.js：</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">#导入vue</span></span><br><span class="line">    <span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">#导入vue-router,没有该组件的需要安装</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#导入组件</span></span><br><span class="line">    <span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/home&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;./components/about&#x27;</span></span><br><span class="line"></span><br><span class="line">    Vue.use(VueRouter) <span class="comment">#注册，告诉vue我们需要使用VueRouter</span></span><br><span class="line"></span><br><span class="line">    export default new VueRouter(&#123;</span><br><span class="line">        routes:[</span><br><span class="line">            &#123;</span><br><span class="line">            path: <span class="string">&#x27;/home&#x27;</span>, <span class="comment">#在url中输入路径对应的组件</span></span><br><span class="line">            name: <span class="string">&#x27;home&#x27;</span>, <span class="comment">#对应的名称</span></span><br><span class="line">            component:Home <span class="comment">#路径对应的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>最后在main.js中注册一下     </span><br><span class="line">main.js:</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">    Vue.config.productionTip = false <span class="comment">#这是提示</span></span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">      render: h =&gt; h(App),</span><br><span class="line">      router <span class="comment">#添加这个</span></span><br><span class="line">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在实际的开发环境中我们经常需要做到动态的路由匹配</span><br><span class="line">例如:</span><br><span class="line">    http://<span class="number">192.168</span><span class="number">.11</span><span class="number">.214</span>:<span class="number">8888</span>/user/<span class="number">1</span> <span class="comment">#找到对应编号为1的用户，</span></span><br><span class="line">那么我们需要如何去匹配这个路径让他去往对应的路径呢</span><br><span class="line">eg：</span><br><span class="line">router.js:</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/user/:username&#x27;</span>, <span class="comment">#:username代表key,方便我们在后续的页面使用特殊的方式取出这个参数</span></span><br><span class="line">        name: <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">        component:User <span class="comment">#上述路径对应的组件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">user.vue:</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">   &lt;div&gt;用户名是:&#123;&#123;$route.params.username&#125;&#125;&lt;/div&gt; #router.params代表的就是参数对象</span><br><span class="line">    &lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="捕获路径不正确的页面返回404"><a href="#捕获路径不正确的页面返回404" class="headerlink" title="捕获路径不正确的页面返回404"></a>捕获路径不正确的页面返回404</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们可以在路由的最后添加一个path: <span class="string">&#x27;*&#x27;</span>，这代表匹配所有的路径，由于我们路由匹配时自上而下的，所以我们可以把这个匹配到所有路由的分配给<span class="number">404</span>页面</span><br><span class="line">eg:</span><br><span class="line">router.js:</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">     name: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        component:Error</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们需要在一个组件中进行一些组件的嵌套，面对这种需求vue也为我们提供了相应的语法</span><br><span class="line">在路由中我们只需要在对应的组件下面添加一个children属性即可</span><br><span class="line">router.js:</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">    component:Main,</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            component:Home</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">然后我们在父组件中添加一个&lt;router-view&gt;&lt;/router-view&gt;标签就可以把对应的组件渲染在该位置</span><br></pre></td></tr></table></figure><h4 id="使用js实现页面组件跳转"><a href="#使用js实现页面组件跳转" class="headerlink" title="使用js实现页面组件跳转"></a>使用js实现页面组件跳转</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过点击页面组件中的某个控件来达到跳转组件的效果，但是我们本身也可以通过js来实现页面组件的跳转</span><br><span class="line">语法:</span><br><span class="line">    this.$router.push(<span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue-CLI&quot;&gt;&lt;a href=&quot;#Vue-CLI&quot; class=&quot;headerlink&quot; title=&quot;Vue_CLI&quot;&gt;&lt;/a&gt;Vue_CLI&lt;/h3&gt;&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
