<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-03-15T15:16:45.793Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mongodb CURD操作</title>
    <link href="https://a744740454.github.io/2021/03/15/mongodb/mongodbCURD/"/>
    <id>https://a744740454.github.io/2021/03/15/mongodb/mongodbCURD/</id>
    <published>2021-03-15T14:57:27.010Z</published>
    <updated>2021-03-15T15:16:45.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb-CURD操作"><a href="#mongodb-CURD操作" class="headerlink" title="mongodb CURD操作"></a>mongodb CURD操作</h2><h3 id="mongodb数据库操作"><a href="#mongodb数据库操作" class="headerlink" title="mongodb数据库操作"></a>mongodb数据库操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、增</span></span><br><span class="line">use 数据库名 <span class="comment">#如果数据库不存在，则创建数据库，否则切换到指定数据库。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查</span></span><br><span class="line">show dbs <span class="comment">#查看所有</span></span><br><span class="line"></span><br><span class="line">若直接创建完数据库使用这个命令，你是看不到的，要显示它，我们需要向config数据库插入一些数据。</span><br><span class="line">db.table1.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删</span></span><br><span class="line">use 数据库名 <span class="comment">#先切换到要删的库下</span></span><br><span class="line">db.dropDatabase() <span class="comment">#删除当前库</span></span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">db代表当前库</span><br></pre></td></tr></table></figure><h3 id="mongodb集合操作-表"><a href="#mongodb集合操作-表" class="headerlink" title="mongodb集合操作(表)"></a>mongodb集合操作(表)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、增</span></span><br><span class="line">当第一个文档(数据)插入时，集合就会被创建</span><br><span class="line">use database1</span><br><span class="line">db.table1.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment">#自动创建集合并且插入数据</span></span><br><span class="line"><span class="comment">#注意 db.user和db.user.info是两个表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查</span></span><br><span class="line">show collections</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删</span></span><br><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><h3 id="mongodb文档操作"><a href="#mongodb文档操作" class="headerlink" title="mongodb文档操作"></a>mongodb文档操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增单条</span></span><br><span class="line"><span class="comment">#新建数据</span></span><br><span class="line">user0=&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;dancing&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;addr&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;BJ&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.test.insert(user0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加多条</span></span><br><span class="line"><span class="comment">#新建多条数据</span></span><br><span class="line">db.user.insertMany([user1,user2,user3,user4,user5])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有则覆盖，没则新增</span></span><br><span class="line">db.user.save(&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;)</span><br><span class="line">db.user.save(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>比较运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line"><span class="comment"># SQL：=,!=,&gt;,&lt;,&gt;=,&lt;=</span></span><br><span class="line"><span class="comment"># MongoDB：&#123;key:value&#125;代表什么等于什么,&quot;$ne&quot;,&quot;$gt&quot;,&quot;$lt&quot;,&quot;gte&quot;,&quot;lte&quot;,其中&quot;$ne&quot;能用于所有数据类型</span></span><br><span class="line">db.user.find().pretty()  <span class="comment"># 以json格式显示，了解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where name = &quot;lqz1&quot;;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lqz1&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where name != &quot;lqz2&quot;;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;name&#x27;</span>:&#123;<span class="string">&quot;$ne&quot;</span>:<span class="string">&#x27;lqz2&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、select * from db1.user where id &gt; 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&#x27;$gt&#x27;</span>:<span class="number">2</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、select * from db1.user where id &lt; 3;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&#x27;$lt&#x27;</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、select * from db1.user where id &gt;= 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>,&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、select * from db1.user where id &lt;= 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$lte&quot;</span>:<span class="number">2</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑运算</span></span><br><span class="line"><span class="comment"># SQL：and，or，not ，mod（取余数）</span></span><br><span class="line"><span class="comment"># MongoDB：字典中逗号分隔的多个条件是and关系，&quot;$or&quot;的条件放到[]内,&quot;$not&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where id &gt;= 2 and id &lt; 4;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>,<span class="string">&quot;$lt&quot;</span>:<span class="number">4</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where id &gt;= 2 and age &lt; 40;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$lt&quot;</span>:<span class="number">40</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、select * from db1.user where id &gt;= 5 or name = &quot;lqz&quot;;</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line">    <span class="string">&quot;$or&quot;</span>:[</span><br><span class="line">        &#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">5</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、select * from db1.user where id % 2=1;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$mod&quot;</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、上题，取反</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$not&quot;</span>:&#123;<span class="string">&quot;$mod&quot;</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>成员运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成员运算</span></span><br><span class="line"><span class="comment"># SQL：in，not in</span></span><br><span class="line"><span class="comment"># MongoDB：&quot;$in&quot;,&quot;$nin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where age in (20,30,31);</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$in&quot;</span>:[<span class="number">20</span>,<span class="number">30</span>,<span class="number">31</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where name not in (&#x27;lqz1&#x27;,&#x27;lqz2&#x27;);</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;name&quot;</span>:&#123;<span class="string">&quot;$nin&quot;</span>:[<span class="string">&#x27;lqz1&#x27;</span>,<span class="string">&#x27;lqz2&#x27;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>正则匹配</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQL: regexp 正则</span></span><br><span class="line"><span class="comment"># MongoDB: /正则表达/i</span></span><br><span class="line"><span class="comment">#1、select * from db1.user where name regexp &#x27;^l&#x27;;</span></span><br><span class="line"><span class="comment"># 查询名字以l开头的人</span></span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/.*?/&#125;)</span><br><span class="line">db.user.find(&#123;<span class="string">&quot;name&quot;</span>:/^l/&#125;)</span><br><span class="line"><span class="comment"># 查询名字以l开头，以1结尾的所有数据</span></span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/^l.*?1$/&#125;)</span><br></pre></td></tr></table></figure><p>取指定字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、select name,age from db1.user where id=3;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;name&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 0表示不显示，1表示显示</span></span><br></pre></td></tr></table></figure><p>查询数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、查看有dancing爱好的人</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;hobbies&#x27;</span>:<span class="string">&#x27;dancing&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查看既有dancing爱好又有tea爱好的人</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;$all&quot;</span>:[<span class="string">&#x27;dancing&#x27;</span>,<span class="string">&#x27;tea&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查看第4个爱好为tea的人</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;hobbies.3&quot;</span>:<span class="string">&#x27;tea&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、查看所有人最后两个爱好(注意没有hobbies字段的也会被查出)（本质用的是取指定字段，所以要放在后面的字典中）</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">&#x27;hobbies&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:-<span class="number">2</span>&#125;,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="number">0</span>,<span class="string">&quot;addr&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、查看所有人的第2个到第3个爱好</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">&#x27;hobbies&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="number">0</span>,<span class="string">&quot;addr&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.blog.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;alex意外死亡的真相&quot;</span>,</span><br><span class="line">        <span class="string">&quot;comments&quot;</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;egon&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;alex是谁？？？&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;wxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;我去，真的假的&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">300</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;yxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;吃喝嫖赌抽，欠下两个亿&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">40</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;egon&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">db.blog.find(&#123;&#125;,&#123;<span class="string">&#x27;comments&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:-<span class="number">2</span>&#125;&#125;).pretty() <span class="comment">#查询最后两个</span></span><br><span class="line">db.blog.find(&#123;&#125;,&#123;<span class="string">&#x27;comments&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;&#125;).pretty() <span class="comment">#查询1到2</span></span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排序:--1代表升序，-1代表降序</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">&quot;name&quot;</span>:<span class="number">1</span>,&#125;)</span><br><span class="line">db.user.find().sort(&#123;<span class="string">&quot;age&quot;</span>:-<span class="number">1</span>,<span class="string">&#x27;_id&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页:--limit代表取多少个document，skip代表跳过前多少个document。 </span></span><br><span class="line"><span class="comment"># limit中表示一页显示的条数，skip(页码数*一页显示的条数)</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;).limit(<span class="number">1</span>).skip(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表关联</span></span><br><span class="line">user &#123;_id:<span class="number">1</span>,name:lqz,age:<span class="number">18</span>&#125;   一个人写多篇文章</span><br><span class="line">article ----》子查询</span><br><span class="line">&#123;<span class="string">&#x27;userid&#x27;</span>:<span class="number">1</span>,article:红楼梦&#125;</span><br><span class="line">  &#123;<span class="string">&#x27;userid&#x27;</span>:<span class="number">1</span>,article:西游记&#125;</span><br></pre></td></tr></table></figure><p>获取数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数量</span></span><br><span class="line">db.user.count(&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">30</span>&#125;&#125;) </span><br><span class="line">--或者</span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">30</span>&#125;&#125;).count()</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、&#123;&#x27;key&#x27;:null&#125; 匹配key的值为null或者没有这个key</span></span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">111</span>&#125;)</span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">20</span>&#125;)</span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;b&#x27;</span>:null&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.t2.find(&#123;<span class="string">&quot;b&quot;</span>:null&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5a5cc2a7c1b4645aad959e5a&quot;</span>), <span class="string">&quot;a&quot;</span> : <span class="number">20</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5a5cc2a8c1b4645aad959e5b&quot;</span>), <span class="string">&quot;b&quot;</span> : null &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查找所有</span></span><br><span class="line">db.user.find() <span class="comment">#等同于db.user.find(&#123;&#125;)</span></span><br><span class="line">db.user.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查找一个，与find用法一致，只是只取匹配成功的第一个</span></span><br><span class="line">db.user.findOne(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">3</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mongodb-CURD操作&quot;&gt;&lt;a href=&quot;#mongodb-CURD操作&quot; class=&quot;headerlink&quot; title=&quot;mongodb CURD操作&quot;&gt;&lt;/a&gt;mongodb CURD操作&lt;/h2&gt;&lt;h3 id=&quot;mongodb数据库操作&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="mongodb" scheme="https://a744740454.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://a744740454.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Flask-PyMongo简单使用</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/Flask-PyMongo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/Flask-PyMongo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-15T14:34:40.012Z</published>
    <updated>2021-03-15T15:17:14.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-PyMongo-CRUD操作"><a href="#Flask-PyMongo-CRUD操作" class="headerlink" title="Flask-PyMongo CRUD操作"></a>Flask-PyMongo CRUD操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask-PyMongo-CRUD操作&quot;&gt;&lt;a href=&quot;#Flask-PyMongo-CRUD操作&quot; class=&quot;headerlink&quot; title=&quot;Flask-PyMongo CRUD操作&quot;&gt;&lt;/a&gt;Flask-PyMongo CRUD操作&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>将mongo中的数据转换成json格式</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/%E5%B0%86mongo%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90json%E6%A0%BC%E5%BC%8F/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/%E5%B0%86mongo%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90json%E6%A0%BC%E5%BC%8F/</id>
    <published>2021-03-15T14:31:31.311Z</published>
    <updated>2021-03-15T14:31:31.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将mongo中的数据转换成json格式"><a href="#将mongo中的数据转换成json格式" class="headerlink" title="将mongo中的数据转换成json格式"></a>将mongo中的数据转换成json格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个是将mongo Document对象转换成json的编码器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoEncoder</span>(<span class="params">JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, o</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换日期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, (datetime, date)):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换Document</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, BaseDocument):</span><br><span class="line">            <span class="keyword">return</span> o.to_mongo()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换id</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, ObjectId):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(o)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSONEncoder.default(self, o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在蓝图上添加mongo解码器.  jsonify会自动将Document对象转成json</span></span><br><span class="line">bp = Blueprint(<span class="string">&quot;article&quot;</span>, __name__, url_prefix=<span class="string">&quot;/article&quot;</span>)</span><br><span class="line">bp.json_encoder = MongoEncoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&quot;/&lt;id&gt;/&quot;</span>, methods=(<span class="params"><span class="string">&quot;GET&quot;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span>(<span class="params"><span class="built_in">id</span>: <span class="built_in">str</span></span>):</span></span><br><span class="line">    instance = Article.objects.get_or_404(<span class="built_in">id</span>=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: instance</span><br><span class="line">    &#125;)      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将mongo中的数据转换成json格式&quot;&gt;&lt;a href=&quot;#将mongo中的数据转换成json格式&quot; class=&quot;headerlink&quot; title=&quot;将mongo中的数据转换成json格式&quot;&gt;&lt;/a&gt;将mongo中的数据转换成json格式&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask使用mongodb</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/flask%E4%B8%AD%E4%BD%BF%E7%94%A8MongoDB/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/flask%E4%B8%AD%E4%BD%BF%E7%94%A8MongoDB/</id>
    <published>2021-03-15T13:53:16.523Z</published>
    <updated>2021-03-15T14:30:25.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask连接mongodb"><a href="#flask连接mongodb" class="headerlink" title="flask连接mongodb"></a>flask连接mongodb</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">经过一番资料的查找，我发现flask连接mongodb有三种方式</span><br><span class="line"><span class="number">1.</span>PyMongo <span class="comment">#官方提供的最基本的</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>flask_pymongo <span class="comment">#在pymongo上封装的</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>Flask-MongoEngine <span class="comment">#类似于django orm的</span></span><br><span class="line"></span><br><span class="line">我这里的业务需求的话只需要使用第二种即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line"><span class="number">1.</span>安装flask_pymongo</span><br><span class="line">pip install Flask-PyMongo</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>获得mongo对象</span><br><span class="line"><span class="keyword">from</span> flask_pymongo <span class="keyword">import</span> PyMongo</span><br><span class="line">app.config[<span class="string">&quot;MONGO_URI&quot;</span>] = <span class="string">&quot;mongodb://username:password@host:port/myDatabase&quot;</span></span><br><span class="line">mongo = PyMongo(app)</span><br><span class="line"></span><br><span class="line">ps:上述的连接可能会报出认证错误，解决问题的方法如下</span><br><span class="line">app.config[<span class="string">&quot;MONGO_URI&quot;</span>] = <span class="string">&quot;mongodb://username:password@host:port/myDatabase?authSource=admin&quot;</span>    </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask连接mongodb&quot;&gt;&lt;a href=&quot;#flask连接mongodb&quot; class=&quot;headerlink&quot; title=&quot;flask连接mongodb&quot;&gt;&lt;/a&gt;flask连接mongodb&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:47.734Z</published>
    <updated>2021-03-03T04:01:59.474Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:47.734Z</published>
    <updated>2021-03-03T04:01:47.734Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:21.037Z</published>
    <updated>2021-03-03T04:01:21.037Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>脏读、不可重复读、幻读</title>
    <link href="https://a744740454.github.io/2021/03/03/mysql/%E8%84%8F%E8%AF%BB%E3%80%81%E5%B9%BB%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    <id>https://a744740454.github.io/2021/03/03/mysql/%E8%84%8F%E8%AF%BB%E3%80%81%E5%B9%BB%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/</id>
    <published>2021-03-03T01:48:12.755Z</published>
    <updated>2021-03-03T08:09:20.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脏读、不可重复读、幻读"><a href="#脏读、不可重复读、幻读" class="headerlink" title="脏读、不可重复读、幻读"></a>脏读、不可重复读、幻读</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脏读:A事务读取到B事务未提交的数据，然后由于某种原因B事务进行了回滚，这样子A事务获取的数据就和回滚后的数据不一样了</span><br><span class="line">不可重复读:事务a在同一个事务内多次读取同一个数据，可能事务b再此期间修改了这个数值，导致前后读取的数据值不一样</span><br><span class="line">幻读:事务a在读取一段范围内的数据的时候，事务b往这个范围内写入了一条数据，事务a在以相同的条件查询数据的时候查出了多出来的一条数据</span><br></pre></td></tr></table></figure><h2 id="mysql四种隔离级别"><a href="#mysql四种隔离级别" class="headerlink" title="mysql四种隔离级别"></a>mysql四种隔离级别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Read Uncommitted（读取未提交内容）</span><br><span class="line">在这个隔离级别中，所有的事务都可以看到其他未提交事务的执行结果。</span><br><span class="line">这个隔离级别很少被用在实际应用场景中，因为她的效率比其他的隔离级别好多少，并且会造成脏读的情况。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read Committed（读取提交内容）</span><br><span class="line">这个级别所有的事务只能看见其余事务已经提交的结果</span><br><span class="line"></span><br><span class="line">Repeatable Read（可重读）</span><br><span class="line">同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上这个会造成幻读的情况</span><br><span class="line"></span><br><span class="line">Serializable（可串行化）</span><br><span class="line">这是最高的隔离级别，它让事务之间以串行的方式进行，让事务之间不可能互相冲突，从而解决幻读问题，不过这会导致数据库读取资源过慢，导致大量超时现象的发生</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;脏读、不可重复读、幻读&quot;&gt;&lt;a href=&quot;#脏读、不可重复读、幻读&quot; class=&quot;headerlink&quot; title=&quot;脏读、不可重复读、幻读&quot;&gt;&lt;/a&gt;脏读、不可重复读、幻读&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="mysql高级" scheme="https://a744740454.github.io/categories/mysql%E9%AB%98%E7%BA%A7/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>flask请求流程</title>
    <link href="https://a744740454.github.io/2021/03/02/flask/flask%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>https://a744740454.github.io/2021/03/02/flask/flask%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</id>
    <published>2021-03-02T10:58:05.540Z</published>
    <updated>2021-03-02T11:26:59.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask请求流程flask项目一启动，有6个全局变量"><a href="#flask请求流程flask项目一启动，有6个全局变量" class="headerlink" title="flask请求流程flask项目一启动，有6个全局变量"></a>flask请求流程flask项目一启动，有6个全局变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack:LocalStack #LocalStack对象</span><br><span class="line">_app_ctx_stack:LocalStack #LocalStack对象</span><br><span class="line">current_app:LocalProxy(_find_app)</span><br><span class="line">request:LocalProxy #LocalStack对象</span><br><span class="line">session:LocalProxy #LocalStack对象</span><br><span class="line">g:LocalProxy #LocalStack对象</span><br></pre></td></tr></table></figure><h3 id="请求来了"><a href="#请求来了" class="headerlink" title="请求来了"></a>请求来了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.__call__()-----&gt;内部执行:self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure><h3 id="wsgi-app"><a href="#wsgi-app" class="headerlink" title="wsgi_app()"></a>wsgi_app()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>执行:ctx = self.request_context(environ):返回一个RequestContext对象，并且封装了request(当次请求的request对象),session。</span><br><span class="line"><span class="number">2.</span>执行:ctx.push():RequestContext对象的push方法</span><br><span class="line">    <span class="number">2.1</span> push方法中中间位置<span class="number">382</span>行有:_request_ctx_stack.push(self),self指的是ctx对象</span><br><span class="line">    <span class="number">2.2</span> 去_request_ctx_stack对象的类中找push方法(LocalStack中找push方法)</span><br><span class="line">    <span class="number">2.3</span> push源码</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">    <span class="comment"># 通过反射找到self._local,在__init__实例化的时候生成的:self._local = Local()</span></span><br><span class="line">    <span class="comment"># Local() flask封装了支持线程和协程的local对象</span></span><br><span class="line">    <span class="comment"># 一开始取不到stack,返回None</span></span><br><span class="line">    rv = <span class="built_in">getattr</span>(self._local, <span class="string">&quot;stack&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br></pre></td></tr></table></figure><h3 id="如果在视图函数中使用request对象，比如-print-request"><a href="#如果在视图函数中使用request对象，比如-print-request" class="headerlink" title="如果在视图函数中使用request对象，比如:print(request)"></a>如果在视图函数中使用request对象，比如:print(request)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>会调用request对象的`__str__`方法,request类是:LocalProxy</span><br><span class="line"><span class="number">2.</span>LocalProxy中的`__str__`方法:<span class="keyword">lambda</span> x: <span class="built_in">str</span>(x._get_current_object())</span><br><span class="line"><span class="number">1.</span>内部执行_get_current_object()方法的源码如下:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self.__local, <span class="string">&quot;__release_local__&quot;</span>):</span><br><span class="line">        <span class="comment"># self.__local()在__init__的时候，实例化的，在__init__中:object.__setattr__(self, &quot;_LocalProxy__local&quot;, local)</span></span><br><span class="line">        <span class="comment"># 用了隐藏属性</span></span><br><span class="line">        <span class="comment"># self.__loacl</span></span><br><span class="line"><span class="comment"># 实例化该类的时候传入的local(偏函数的内存地址:request = LocalProxy(partial(_lookup_req_object, &quot;request&quot;)))</span></span><br><span class="line">            </span><br><span class="line"><span class="number">3.</span>_lookup_req_object函数源码如下:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># name就是&#x27;request&#x27;字符串</span></span><br><span class="line">    <span class="comment"># top方法是把第二步中放入的ctx取出来，因为都在一个线程内，当前取到的就是当前请求的ctx对象</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">     </span><br><span class="line"><span class="number">4.</span>所以:print(request)实质上是在打印当次请求的request对象的__str__</span><br></pre></td></tr></table></figure><h3 id="如果在视图函数中使用request对象"><a href="#如果在视图函数中使用request对象" class="headerlink" title="如果在视图函数中使用request对象"></a>如果在视图函数中使用request对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：print(request.method):实质上是取到当次请求的request对象的methid属性</span><br></pre></td></tr></table></figure><h3 id="最终，请求结束执行"><a href="#最终，请求结束执行" class="headerlink" title="最终，请求结束执行"></a>最终，请求结束执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.auto_pop(error)# 把ctx移除掉</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask请求流程flask项目一启动，有6个全局变量&quot;&gt;&lt;a href=&quot;#flask请求流程flask项目一启动，有6个全局变量&quot; class=&quot;headerlink&quot; title=&quot;flask请求流程flask项目一启动，有6个全局变量&quot;&gt;&lt;/a&gt;flask</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>python项目模块导出</title>
    <link href="https://a744740454.github.io/2021/03/02/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/python%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA/"/>
    <id>https://a744740454.github.io/2021/03/02/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/python%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA/</id>
    <published>2021-03-02T10:42:51.902Z</published>
    <updated>2021-03-02T10:44:50.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python项目模块导出"><a href="#python项目模块导出" class="headerlink" title="python项目模块导出"></a>python项目模块导出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 在虚拟环境中直接导出</span><br><span class="line">pip3 freeze &gt;requirements.txt</span><br><span class="line"><span class="number">2</span> 系统环境装了很多模块，只导出当前项目依赖的模块</span><br><span class="line">-pip3 install pipreqs</span><br><span class="line">    -pipreqs ./ --encoding=utf8</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python项目模块导出&quot;&gt;&lt;a href=&quot;#python项目模块导出&quot; class=&quot;headerlink&quot; title=&quot;python项目模块导出&quot;&gt;&lt;/a&gt;python项目模块导出&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    <category term="python实用技巧" scheme="https://a744740454.github.io/categories/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="python" scheme="https://a744740454.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>flask划分目录(蓝图)</title>
    <link href="https://a744740454.github.io/2021/03/02/flask/flask%E5%88%92%E5%88%86%E7%9B%AE%E5%BD%95(%E8%93%9D%E5%9B%BE)/"/>
    <id>https://a744740454.github.io/2021/03/02/flask/flask%E5%88%92%E5%88%86%E7%9B%AE%E5%BD%95(%E8%93%9D%E5%9B%BE)/</id>
    <published>2021-03-02T08:27:23.226Z</published>
    <updated>2021-03-02T09:13:07.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask划分目录"><a href="#flask划分目录" class="headerlink" title="flask划分目录"></a>flask划分目录</h2><h3 id="flask不使用蓝图划分目录"><a href="#flask不使用蓝图划分目录" class="headerlink" title="flask不使用蓝图划分目录"></a>flask不使用蓝图划分目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">目录结构</span><br><span class="line">flask_study</span><br><span class="line">    static</span><br><span class="line">    templates</span><br><span class="line">    views</span><br><span class="line">        __init__.py</span><br><span class="line">        order.py <span class="comment">#app文件</span></span><br><span class="line">        user.py <span class="comment">#app文件</span></span><br><span class="line">    main.py</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#main.py 项目的入口</span></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app <span class="comment">#从views导入app对象</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__.py 在这里实例化app对象</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,views</span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;../templates&#x27;</span>)</span><br><span class="line">app.debug=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app <span class="comment">#导入app对象</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user_index/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是user接口的首页&#x27;</span></span><br><span class="line"></span><br><span class="line">只有上述代码是不能执行的，因为这样子只执行了__init__的代码，但是没有将user.py中的代码执行，因此我们需要在__init__.py中将app导入</span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> order</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user</span><br></pre></td></tr></table></figure><h3 id="flask蓝图"><a href="#flask蓝图" class="headerlink" title="flask蓝图"></a>flask蓝图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">上述代码虽然可以执行，但是容易出现循环导入的问题，因此flask官方提供了一种方法，帮助我们划分目录，这就是蓝图</span><br><span class="line"></span><br><span class="line">使用步骤</span><br><span class="line"><span class="number">1.</span>实例化对象</span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">    user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__) <span class="comment">#第一个参数是蓝图的名称，任意写</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在app中注册</span><br><span class="line"><span class="comment">#__init__.py</span></span><br><span class="line"><span class="keyword">from</span> views.user <span class="keyword">import</span> user <span class="comment">#将app应用中实例化的对象导入过来</span></span><br><span class="line">app.register_blueprint(user) <span class="comment">#注册</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>写路由</span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="meta">    @user.route(<span class="params"><span class="string">&#x27;/user_index/&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_index</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是user接口的首页&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span>其余知识点</span><br><span class="line"><span class="number">1.</span>可以指定路由进来时的前缀，添加一个url_prefix即可</span><br><span class="line">    app.register_blueprint(user, url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">    <span class="number">2.</span>若app划分为一个文件夹，我们可以在这个文件夹中有自己的templates和static文件夹</span><br><span class="line">    web = Blueprint(<span class="string">&#x27;web&#x27;</span>,__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">    <span class="number">3.</span>蓝图对象有自己的请求扩展，你只有访问这个蓝图的路径时才会触发</span><br><span class="line">        web = Blueprint(<span class="string">&#x27;web&#x27;</span>, __name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line"><span class="meta">        @web.before_request</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">web_request</span>():</span></span><br><span class="line">            print(<span class="string">&#x27;web request&#x27;</span>)</span><br><span class="line"><span class="meta">        @web.after_request</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">web_after</span>(<span class="params">response</span>):</span></span><br><span class="line">            print(response)</span><br><span class="line">            <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask划分目录&quot;&gt;&lt;a href=&quot;#flask划分目录&quot; class=&quot;headerlink&quot; title=&quot;flask划分目录&quot;&gt;&lt;/a&gt;flask划分目录&lt;/h2&gt;&lt;h3 id=&quot;flask不使用蓝图划分目录&quot;&gt;&lt;a href=&quot;#flask不使用蓝图划</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-03-01T00:56:25.149Z</published>
    <updated>2021-03-01T07:33:14.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是布隆过滤器</span><br><span class="line">布隆过滤器是一种数据结构，用来判断某个值是否已经存在某个集合中了</span><br><span class="line">优点：空间效率和时间效率极高</span><br><span class="line">缺点：有一定的误识别率，并且随着数据量的增加这个误差的概率会越来越大</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器的应用场景"><a href="#布隆过滤器的应用场景" class="headerlink" title="布隆过滤器的应用场景"></a>布隆过滤器的应用场景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布隆过滤器广泛应用于网页黑名单系统、垃圾邮件过滤系统、爬虫网址判重系统等。</span><br><span class="line">当你数据库有大量的数据的时候，你每次进行查询都是很消耗服务器资源的一种行为，并且对数据库的压力也会增大。</span><br><span class="line">这种时候就可以考虑使用布隆过滤器</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当有一个集合，并且集合里面有多个元素时，首先将位数组进行初始化，然后将集合中的数据通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，这个编码可能对应位数组上的一个点获多个点，然后将位数组上对应的值更改为<span class="number">1.</span>数据越多，对应的位数组上的值被改为<span class="number">1</span>的越多。</span><br><span class="line"></span><br><span class="line">位数组:一个很长的二进制向量 </span><br><span class="line"></span><br><span class="line">布隆过滤器误判的原因</span><br><span class="line">当你将一个值通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，可能这个值并没有存储过，但是被判断为已经存在过了。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106143141784-1475031003.png" alt="1030776-20170106143141784-1475031003"></p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈希函数是布隆过滤器的基础，布隆过滤器也是根据哈希函数实现的</span><br><span class="line">哈希函数：将任意大小的数据转换成特定大小的数据的函数，转换后的数据称为哈希值或哈希编码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106142012816-1867044021.png" alt="1030776-20170106142012816-1867044021"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/categories/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    <category term="数据结构" scheme="https://a744740454.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Flask请求扩展</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/</id>
    <published>2021-02-24T11:23:50.339Z</published>
    <updated>2021-02-24T11:32:59.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask请求扩展"><a href="#Flask请求扩展" class="headerlink" title="Flask请求扩展"></a>Flask请求扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Flask的请求扩展类似于django的中间件，在请求进入视图函数和离开视图函数之后执行的一些功能，总共有<span class="number">7</span>个</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>before_request：请求来之前执行（可以加多个，从上往下执行，等同于中间件的process_request）</span><br><span class="line"><span class="number">2.</span>after_request:请求走之后（可以加多个，从下往上执行，等同于以中间件的process_response）</span><br><span class="line"><span class="number">3.</span>before_first_request:项目运行后的第一次会执行它（初始化的工工作）</span><br><span class="line"><span class="number">4.</span>teardown_request:出错也会走，记录日志</span><br><span class="line"><span class="number">5.</span>errorhandler(<span class="number">404</span>)：状态码是响应的，就会触发它的执行</span><br><span class="line"><span class="comment">#上面五个使用方法大致相似，与下面2个使用方法不一样</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span>():</span></span><br><span class="line">    <span class="comment">#取出访问者的ip，记录一下</span></span><br><span class="line">    print(request.path)</span><br><span class="line">    print(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;回去&#x27;</span>  <span class="comment"># 直接回去了，等同于django中return Response对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>template_global()  <span class="comment"># 全局函数，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123;sb(<span class="number">1</span>,<span class="number">2</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>template_filter() <span class="comment"># 全局过滤器，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>(<span class="params">a1,a2,a3,a4</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + <span class="number">100</span>+a2+a3+a4</span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123; <span class="number">1</span>|db(<span class="number">2</span>,<span class="number">3</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask请求扩展&quot;&gt;&lt;a href=&quot;#Flask请求扩展&quot; class=&quot;headerlink&quot; title=&quot;Flask请求扩展&quot;&gt;&lt;/a&gt;Flask请求扩展&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask闪现</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/</id>
    <published>2021-02-24T11:20:17.247Z</published>
    <updated>2021-02-24T11:20:17.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask闪现"><a href="#Flask闪现" class="headerlink" title="Flask闪现"></a>Flask闪现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">闪现的本质就是先将一部分数据存储在某个位置，下次请求的时候取出来，取出以后该数据消失</span><br><span class="line">而flask的闪现是存放在session中的</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>存值</span><br><span class="line">flash(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>取值</span><br><span class="line">get_flashed_message()</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>设置闪现分类</span><br><span class="line">flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>从对应的分类中取出数据</span><br><span class="line">data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask闪现&quot;&gt;&lt;a href=&quot;#Flask闪现&quot; class=&quot;headerlink&quot; title=&quot;Flask闪现&quot;&gt;&lt;/a&gt;Flask闪现&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask设置session</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/</id>
    <published>2021-02-24T11:01:52.026Z</published>
    <updated>2021-02-24T11:07:31.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask设置session"><a href="#Flask设置session" class="headerlink" title="Flask设置session"></a>Flask设置session</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>设置密钥</span><br><span class="line">app.secret_key = <span class="string">&#x27;&#x27;</span>随机密钥</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入全局session对象</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>赋值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>] = value</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>取值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ps:session存放的位置是浏览器端的cookie中，类似于荷载</span><br></pre></td></tr></table></figure><h2 id="session的执行流程"><a href="#session的执行流程" class="headerlink" title="session的执行流程"></a>session的执行流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>请求来了在open_session中取出cookie，反解数据，包装成session---》视图函数中使用session</span><br><span class="line"><span class="number">2.</span>只要session修改了，请求走了---》save_session---》把session加密，放到cookie中，返回给前端</span><br><span class="line"><span class="number">3.</span>不同浏览器，cookie不同（你的淘宝，同一个浏览器只能登陆一个用户）</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask设置session&quot;&gt;&lt;a href=&quot;#Flask设置session&quot; class=&quot;headerlink&quot; title=&quot;Flask设置session&quot;&gt;&lt;/a&gt;Flask设置session&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的请求响应</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</id>
    <published>2021-02-24T09:20:58.781Z</published>
    <updated>2021-02-24T11:00:57.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask的请求对象"><a href="#Flask的请求对象" class="headerlink" title="Flask的请求对象"></a>Flask的请求对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入位置</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>request中的各个属性</span><br><span class="line">    <span class="comment"># print(type(request.values[&#x27;name&#x27;]))  # post和get提交的数据总和 还是个字典</span></span><br><span class="line">    <span class="comment"># print(request.full_path) # 全路径</span></span><br><span class="line">    <span class="comment"># print(request.url)      # 带数据</span></span><br><span class="line">    <span class="comment"># print(request.base_url) # 带域名</span></span><br><span class="line">    <span class="comment"># print(request.files)    # 等同于django中的request.FILES</span></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method  提交的方法</span></span><br><span class="line">    <span class="comment"># request.args  get请求提及的数据</span></span><br><span class="line">    <span class="comment"># request.form   post请求提交的数据</span></span><br><span class="line">    <span class="comment"># request.values  post和get提交的数据总和</span></span><br><span class="line">    <span class="comment"># request.cookies  客户端所带的cookie</span></span><br><span class="line">    <span class="comment"># request.headers  请求头</span></span><br><span class="line">    <span class="comment"># request.path     不带域名，请求路径</span></span><br><span class="line">    <span class="comment"># request.full_path  不带域名，带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.script_root</span></span><br><span class="line">    <span class="comment"># request.url           带域名带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.base_url带域名请求路径</span></span><br><span class="line">    <span class="comment"># request.url_root      域名</span></span><br><span class="line">    <span class="comment"># request.host_url域名</span></span><br><span class="line">    <span class="comment"># request.host127.0.0.1:500</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br></pre></td></tr></table></figure><h2 id="Flask的响应对象"><a href="#Flask的响应对象" class="headerlink" title="Flask的响应对象"></a>Flask的响应对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入位置</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>响应对象的生成</span><br><span class="line">response = make_response(render_template(<span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>响应对象设置属性</span><br><span class="line">response.delete_cookie(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">response.set_cookie(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">response.headers[<span class="string">&#x27;X-Something&#x27;</span>] = <span class="string">&#x27;A value&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>生成各个类型的响应对象</span><br><span class="line">res=make_response(render_template(<span class="string">&#x27;index.html&#x27;</span>)) <span class="comment"># 模板响应对象</span></span><br><span class="line">res=make_response(jsonify(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lqz&#x27;</span>&#125;)) <span class="comment"># json响应对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask的请求对象&quot;&gt;&lt;a href=&quot;#Flask的请求对象&quot; class=&quot;headerlink&quot; title=&quot;Flask的请求对象&quot;&gt;&lt;/a&gt;Flask的请求对象&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的模板语言</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/flask%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/flask%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80/</id>
    <published>2021-02-24T09:05:38.231Z</published>
    <updated>2021-02-24T09:19:51.954Z</updated>
    
    <content type="html"><![CDATA[<p>Flask的模板语言是按Jinja2模板语言的标准，基于jinja2做了一点点的封装</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">可以说flask的模板语言与django中的模板语言大致相同，但是具备django模板语言所不具备的一些点</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>flask往模板中传递数据</span><br><span class="line">STUDENT = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Old&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">38</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;中&#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;student.html&quot;</span>, student=STUDENT)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>flask模板语言可以使用.[]get的方式取值</span><br><span class="line">&lt;td&gt;&#123;&#123; student.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; student[&quot;age&quot;] &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; student.get(&quot;gender&quot;) &#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>flask模板中可以使用函数的内存地址+括号来调用函数，并传递参数</span><br><span class="line">&lt;td&gt;&#123;&#123; student.get(&quot;gender&quot;) &#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flask的模板语言是按Jinja2模板语言的标准，基于jinja2做了一点点的封装&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的CBV如何使用</title>
    <link href="https://a744740454.github.io/2021/02/23/flask/Flask%E7%9A%84CBV%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/02/23/flask/Flask%E7%9A%84CBV%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-23T13:41:06.058Z</published>
    <updated>2021-02-23T13:56:55.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask的CBV如何使用"><a href="#Flask的CBV如何使用" class="headerlink" title="Flask的CBV如何使用"></a>Flask的CBV如何使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>新建一个类继承views中的MethodView，并在里面重写方法即可</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods=[<span class="string">&quot;GET&quot;</span>]   <span class="comment">#允许的请求方式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">ps:如果继承view.View需要重写dispatch_request()方法，MethodView帮助你写好了dispatch_request</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>在app.add_url_rule中注册路由</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index.as_view(name=<span class="string">&#x27;index&#x27;</span>)) <span class="comment">#as_view中的name必填</span></span><br></pre></td></tr></table></figure><h2 id="CBV装饰器的使用"><a href="#CBV装饰器的使用" class="headerlink" title="CBV装饰器的使用"></a>CBV装饰器的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只需要在类中添加一个decorator属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    decorator=()   <span class="comment">#装饰器的内存地址</span></span><br><span class="line">    </span><br><span class="line">cbv源码装饰器部分：</span><br><span class="line"><span class="keyword">if</span> cls.decorators:</span><br><span class="line">    view.__name__ = name</span><br><span class="line">    view.__module__ = cls.__module__</span><br><span class="line">    <span class="keyword">for</span> decorator <span class="keyword">in</span> cls.decorators:</span><br><span class="line">        view = decorator(view)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask的CBV如何使用&quot;&gt;&lt;a href=&quot;#Flask的CBV如何使用&quot; class=&quot;headerlink&quot; title=&quot;Flask的CBV如何使用&quot;&gt;&lt;/a&gt;Flask的CBV如何使用&lt;/h2&gt;&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask的路由系统</title>
    <link href="https://a744740454.github.io/2021/02/23/flask/flask%E7%9A%84%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://a744740454.github.io/2021/02/23/flask/flask%E7%9A%84%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-02-23T10:56:54.473Z</published>
    <updated>2021-02-23T13:40:29.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask的路由系统"><a href="#flask的路由系统" class="headerlink" title="flask的路由系统"></a>flask的路由系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">flask中最经典的设置路由的方式是通过装饰器</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#route的参数</span></span><br><span class="line"><span class="number">1.</span>rule 路径 <span class="comment">#这个必须要填</span></span><br><span class="line"><span class="number">2.</span>options</span><br><span class="line">methods     <span class="comment">#允许进入的请求方式，例如GET,POST</span></span><br><span class="line">    endpoint    <span class="comment">#别名，用于做反向解析,不写，默认是函数名</span></span><br><span class="line">    default     <span class="comment">#给函数传递的参数</span></span><br><span class="line">    redirect_to <span class="comment">#重定向的地址</span></span><br><span class="line">strict_slashes = <span class="literal">None</span> <span class="comment">#对URL最后的 / 符号是否严格要求</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#转换器</span></span><br><span class="line">我们还可以使用在路由中使用转换器</span><br><span class="line">eg:</span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>],endpoint=<span class="string">&#x27;detail&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line">flask我们还可以设置另外一种路由方式</span><br><span class="line"><span class="comment">#FBV式的</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CBV式的</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index.as_view(name=<span class="string">&#x27;index&#x27;</span>)) <span class="comment">#as_view中的name必填</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask的路由系统&quot;&gt;&lt;a href=&quot;#flask的路由系统&quot; class=&quot;headerlink&quot; title=&quot;flask的路由系统&quot;&gt;&lt;/a&gt;flask的路由系统&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>drf视图类及路由设置</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%8F%8A%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%8F%8A%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-02-22T11:50:55.194Z</published>
    <updated>2021-02-22T11:53:07.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drf视图类及路由设置"><a href="#drf视图类及路由设置" class="headerlink" title="drf视图类及路由设置"></a>drf视图类及路由设置</h2><h3 id="drf两个基类"><a href="#drf两个基类" class="headerlink" title="drf两个基类"></a>drf两个基类</h3><p>1.APIView</p><p>​    该类是继承了django原生view类的drf类，他重写了django类的as_view方法，将request换成了自己的request，并做了认证等功能</p><p>​    ps:可以从rest_framework.views</p><p>2.GenericAPIView </p><p>​    该类继承了APIView是对APIView的进一步封装</p><p>​    ps:可以从 rest_framework.generics 导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继承该类后你只需要在类的开头为类添加queryset，serializer_class</span></span><br><span class="line"><span class="comment">#之后每次之后每次只需要调用get_queryset()就可以或得queryset对象</span></span><br><span class="line"><span class="comment">#每次只需要调用get_serializer()就可以或得序列化器对象对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">GenericAPIView</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        queryset = self.get_queryset()</span><br><span class="line">        ser = self.get_serializer(instance=queryset, many=<span class="literal">True</span>)</span><br><span class="line">        print(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><h3 id="5个视图扩展类"><a href="#5个视图扩展类" class="headerlink" title="5个视图扩展类"></a>5个视图扩展类</h3><p>基于drf的两个基类又扩展出了5个扩展类，他们是基于上述两个基类之后又进行了一步封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">可以从rest_framework.mixins中导入 </span><br><span class="line">这五个类需要与GenericAPIView类一起使用</span><br><span class="line">CreateModelMixin <span class="comment">#创建数据 依然需要写post()</span></span><br><span class="line">DestroyModelMixin <span class="comment">#删除单条数据 依然需要写delete()</span></span><br><span class="line">UpdateModelMixin <span class="comment"># 更新数据库数据 依然需要写put()</span></span><br><span class="line">ListModelMixin <span class="comment"># 获得多条数据   需要写名词复数类的get()</span></span><br><span class="line">RetrieveModelMixin <span class="comment">#获得单条数据 需要写名词类的get()</span></span><br><span class="line"></span><br><span class="line">这些类的内部做的就是我们之前写的调用序列化器，将queryset对象传入等操作，这样我们只需要做到简单的调用方法即可</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">GenericAPIView,ListModelMixin</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span> <span class="comment"># 写get方法</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request,*args,**kwargs)</span><br></pre></td></tr></table></figure><h3 id="9个子类视图"><a href="#9个子类视图" class="headerlink" title="9个子类视图"></a>9个子类视图</h3><p>这九个子类视图则是对五个视图扩展类的进一步封装，上述五个视图扩展类还需要我们写get等方法，接下来我们只需要通过继承，就可以实现我们需要的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这九个子类视图我们可以通过rest_framework.generics获得</span><br><span class="line">下述五个实现了基本功能</span><br><span class="line">CreateAPIView ，GenericAPIView，CreateModelMixin</span><br><span class="line">ListAPIView</span><br><span class="line">DestroyAPIView</span><br><span class="line">UpdateAPIView</span><br><span class="line">RetrieveAPIView</span><br><span class="line"></span><br><span class="line">下述<span class="number">4</span>个则是功能的混合搭配</span><br><span class="line">ListCreateAPIView：同时具备查询多个以及创建数据的功能</span><br><span class="line">RetrieveDestroyAPIView：具备查询一个以及删除的功能</span><br><span class="line">RetrieveUpdateAPIView：具备查询一个以及更新的功能</span><br><span class="line">RetrieveUpdateDestroyAPIView：具备查询一个以及更新以及删除的功能</span><br></pre></td></tr></table></figure><h3 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h3><p>ModelViewSet类则是对上述代码的进一步封装，我们只需要继承该类并在路由中进行一定的配置就可以简单的完成路由与视图的搭配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">该类需要从rest_framework.viewsets中导入</span><br><span class="line"></span><br><span class="line">这个类继承了五个视图扩展类以及GenericViewSet</span><br><span class="line">GenericViewSet:该类继承了ViewSetMixin, generics.GenericAPIView</span><br><span class="line">ViewSet:该类继承ViewSetMixin和APIView</span><br><span class="line">其中的重点便是ViewSetMixin该混合类重写了as_view方法，正是由于重写的这个方法帮助我们做到了视图与类方法的映射</span><br><span class="line"></span><br><span class="line">ps:ReadOnlyModelViewSet：继承mixins.RetrieveModelMixin,mixins.ListModelMixin,GenericViewSet,该类不具备写入的功能</span><br></pre></td></tr></table></figure><h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><p>我们让一个类继承了ModelViewSet之后我们便需要对视图进行一定的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">最原始的直接写</span><br><span class="line"></span><br><span class="line">下述两个方法都需要继承ModelViewSet之后才能使用</span><br><span class="line">方式二：</span><br><span class="line">url(<span class="string">r&#x27;^books/&#x27;</span>, views.Books.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;<span class="comment">#这里写一个字典代表映射关系)),当get请求过来的时候会执行list方法</span></span><br><span class="line">                                    </span><br><span class="line">方式三：自动化创建路径</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;路径前缀&#x27;</span>,指定的视图类 ) </span><br><span class="line">eg:router.register(<span class="string">&#x27;books&#x27;</span>, views.Books )</span><br><span class="line">                                    </span><br><span class="line">若使用方式三自动创建路径,若我们需要指定运行的方法时该如何做</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action 导入action装饰器</span><br><span class="line">在你需要执行的类方法上添加该装饰器</span><br><span class="line">                                    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line">                                    </span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>],detail=<span class="literal">False</span></span>) </span><span class="comment">#当get方法来的时候执行该类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aaa</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">                                    </span><br><span class="line">action参数的含义:                                  </span><br><span class="line">-methods：什么请求方式会触发被装饰函数的执行</span><br><span class="line">-detail：是<span class="literal">True</span>是基于带<span class="built_in">id</span>的路由生成的，如果是<span class="literal">False</span>，是基于不带<span class="built_in">id</span>的路由生成的</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;drf视图类及路由设置&quot;&gt;&lt;a href=&quot;#drf视图类及路由设置&quot; class=&quot;headerlink&quot; title=&quot;drf视图类及路由设置&quot;&gt;&lt;/a&gt;drf视图类及路由设置&lt;/h2&gt;&lt;h3 id=&quot;drf两个基类&quot;&gt;&lt;a href=&quot;#drf两个基类&quot; c</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
</feed>
