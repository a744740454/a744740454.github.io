<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-04-16T15:50:26.609Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>rabbitmq交换机</title>
    <link href="https://a744740454.github.io/2021/04/16/rabbitmq/rabbitmq%E4%BA%A4%E6%8D%A2%E6%9C%BA/"/>
    <id>https://a744740454.github.io/2021/04/16/rabbitmq/rabbitmq%E4%BA%A4%E6%8D%A2%E6%9C%BA/</id>
    <published>2021-04-16T15:46:56.780Z</published>
    <updated>2021-04-16T15:50:26.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h2><h3 id="什么是AMQP"><a href="#什么是AMQP" class="headerlink" title="什么是AMQP"></a>什么是AMQP</h3><p>amqp（高级消息队列协议）是一个协议，rabbitmq就是完全基于这个协议去实现的</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210407145149.jpg" alt="v2-95679b747c214fcc1b30b5592177acb1_720w"></p><h3 id="amqp协议名词介绍"><a href="#amqp协议名词介绍" class="headerlink" title="amqp协议名词介绍"></a>amqp协议名词介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Producer：消息生产者，即投递消息的程序。</span><br><span class="line">Broker：消息队列服务器实体。</span><br><span class="line">Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。</span><br><span class="line">Binding：绑定，它的作用就是把 Exchange 和 Queue 按照路由规则绑定起来。</span><br><span class="line">Queue：消息队列载体，每个消息都会被投入到一个或多个队列。</span><br><span class="line">Consumer：消息消费者，即接受消息的程序。</span><br></pre></td></tr></table></figure><h3 id="exchange"><a href="#exchange" class="headerlink" title="exchange"></a>exchange</h3><p>那么为什么我们需要 Exchange 而不是直接将消息发送至队列呢？</p><p>AMQP 协议中的核心思想就是生产者和消费者的解耦，生产者从不直接将消息发送给队列。生产者通常不知道是否一个消息会被发送到队列中，只是将消息发送到一个交换机。先由 Exchange 来接收，然后 Exchange 按照特定的策略转发到 Queue 进行存储。Exchange 就类似于一个交换机，将各个消息分发到相应的队列中。</p><p>s<img src="https://gitee.com/a744740454/mypic/raw/master/img/20210407145057.jpg" alt="v2-a8594e4f7fec1495e692bdd1dc152d19_720w">s</p><p>exchange常用的三种类型有fanout、Direct、Topic</p><h4 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210407170755.jpg" alt="v2-7bb89836159c987975f6cde0b9ed7003_720w"></h4><p>Fanout Exchange 会忽略 RoutingKey 的设置，直接将 Message 广播到所有绑定的 Queue 中。</p><h4 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h4><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210407170950.jpg" alt="v2-c439643980a67bade215dc99a694c69d_720w"></p><p>Direct Exchange 是 RabbitMQ 默认的 Exchange，完全根据 RoutingKey 来路由消息。设置 Exchange 和 Queue 的 Binding 时需指定 RoutingKey（一般为 Queue Name），发消息时也指定一样的 RoutingKey，消息就会被路由到对应的Queue</p><h4 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h4><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210407171127.jpg" alt="v2-c735dc7d3e0ea74acc7f933abeaa40b7_720w"></p><p>Topic Exchange 和 Direct Exchange 类似，也需要通过 RoutingKey 来路由消息，区别在于Direct Exchange 对 RoutingKey 是精确匹配，而 Topic Exchange 支持模糊匹配。分别支持<code>*</code>和<code>#</code>通配符，<code>*</code>表示匹配一个单词，<code>#</code>则表示匹配没有或者多个单词。</p><h3 id="两种特殊的-Exchange"><a href="#两种特殊的-Exchange" class="headerlink" title="两种特殊的 Exchange"></a>两种特殊的 Exchange</h3><h4 id="Headers-Exchange"><a href="#Headers-Exchange" class="headerlink" title="Headers Exchange"></a>Headers Exchange</h4><p>Headers Exchange 会忽略 RoutingKey 而根据消息中的 Headers 和创建绑定关系时指定的 Arguments 来匹配决定路由到哪些 Queue。</p><p>Headers Exchange 的性能比较差，而且 Direct Exchange 完全可以代替它，所以不建议使用。</p><h4 id="Default-Exchange"><a href="#Default-Exchange" class="headerlink" title="Default Exchange"></a>Default Exchange</h4><p>Default Exchange 是一种特殊的 Direct Exchange。当你手动创建一个队列时，后台会自动将这个队列绑定到一个名称为空的 Direct Exchange 上，绑定 RoutingKey 与队列名称相同。有了这个默认的交换机和绑定，使我们只关心队列这一层即可，这个比较适合做一些简单的应用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Exchange&quot;&gt;&lt;a href=&quot;#Exchange&quot; class=&quot;headerlink&quot; title=&quot;Exchange&quot;&gt;&lt;/a&gt;Exchange&lt;/h2&gt;&lt;h3 id=&quot;什么是AMQP&quot;&gt;&lt;a href=&quot;#什么是AMQP&quot; class=&quot;header</summary>
      
    
    
    
    <category term="rabbitmq" scheme="https://a744740454.github.io/categories/rabbitmq/"/>
    
    
    <category term="rabbitmq" scheme="https://a744740454.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像基础操作</title>
    <link href="https://a744740454.github.io/2021/04/16/docker/docker%E9%95%9C%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://a744740454.github.io/2021/04/16/docker/docker%E9%95%9C%E5%83%8F%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-16T15:46:55.190Z</published>
    <updated>2021-04-16T15:49:25.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker镜像基础操作"><a href="#docker镜像基础操作" class="headerlink" title="docker镜像基础操作"></a>docker镜像基础操作</h2><h3 id="镜像获取"><a href="#镜像获取" class="headerlink" title="镜像获取"></a>镜像获取</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像获取</span><br><span class="line">docker pull [image_name][:image_version]</span><br><span class="line">eg:</span><br><span class="line">docker pull nginx:1.17</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看本地主机上已有的镜像的基本信息</span></span><br><span class="line">docker images</span><br><span class="line">docker images ls</span><br><span class="line">REPOSITORY   TAG     IMAGE ID      CREATED      SIZE</span><br><span class="line">镜像来源     镜像标签     镜像<span class="built_in">id</span>      镜像创建时间   镜像大小</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">-a:列出所有(包括临时文件)镜像文件</span><br><span class="line">-q:仅显示 ID 信息</span><br><span class="line">--digests=true|false：列出镜像的数字摘要值</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像详细信息，可以看到作者、id等</span></span><br><span class="line">docker inspect [REPOSITORY]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看镜像历史,若构建信息过长，可以使用--no-trunc来输出完整信息</span></span><br><span class="line">docker history [REPOSITORY]</span><br></pre></td></tr></table></figure><h3 id="镜像添加tag"><a href="#镜像添加tag" class="headerlink" title="镜像添加tag"></a>镜像添加tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">镜像添加tag</span><br><span class="line">docker tag redis:latest myredis:latest</span><br><span class="line"></span><br><span class="line">REPOSITORY   TAG     IMAGE ID       CREATED        SIZE </span><br><span class="line">redis        latest  74d107221092   19 hours ago   104MB</span><br></pre></td></tr></table></figure><h3 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker search [option] keyword</span><br><span class="line">option:</span><br><span class="line">-f:过滤输出内容 <span class="keyword">is</span>-official=true/false stars=<span class="number">800</span>(收藏数超过<span class="number">8000</span>)</span><br><span class="line">--limit:限制<span class="number">3</span>条</span><br><span class="line">--no-trunc:不截断输出结果,有些输出结果过长的话会被截断，添加这个可以看到完整的信息</span><br><span class="line"></span><br><span class="line">输出参数释义</span><br><span class="line">NAME         DESCRIPTION    STARS    OFFICIAL    AUTOMATED</span><br><span class="line">镜像名称       镜像描述        点赞数    是否是官方    自动构建</span><br></pre></td></tr></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [option] [name]</span><br><span class="line">docker image rm [option] [name]</span><br><span class="line">参数:</span><br><span class="line">-f:强制</span><br><span class="line"></span><br><span class="line">docker image prune [option] <span class="comment">#清理镜像</span></span><br><span class="line">-a:删除所有不用的镜像，不加的话是删除临时镜像</span><br><span class="line">-f:强制删除，没有提示</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>构建镜像的方式有三种，基于容器导入、基于本地模板导入、基于dockerfile创建</p><h4 id="基于容器导入"><a href="#基于容器导入" class="headerlink" title="基于容器导入"></a>基于容器导入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker commit [option] [container id] [image:tag]</span><br><span class="line">eg:docker commit -m &quot;Add a file&quot; -a &quot;Alvin&quot; 820a17fe3935 centos:v1</span><br><span class="line">option:</span><br><span class="line">-a:作者信息</span><br><span class="line">-m:提交信息</span><br><span class="line">-p:提交时，暂停容器运行</span><br><span class="line"></span><br><span class="line">执行命令后会在本地生成一个基于原先容器的镜像</span><br></pre></td></tr></table></figure><h4 id="将容器导出并保存为镜像-export"><a href="#将容器导出并保存为镜像-export" class="headerlink" title="将容器导出并保存为镜像(export)"></a>将容器导出并保存为镜像(export)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker export [container id] &gt; file</span><br><span class="line">eg:</span><br><span class="line">docker export daf9c3656be3 &gt; nginx.tar</span><br><span class="line"></span><br><span class="line">ps:使用export命令导出的是个压缩包，且只保存容器当时的状态</span><br></pre></td></tr></table></figure><h4 id="从包中读取镜像-import"><a href="#从包中读取镜像-import" class="headerlink" title="从包中读取镜像(import)"></a>从包中读取镜像(import)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对应export的读取</span><br><span class="line">docker import file image:tag</span><br><span class="line">eg:</span><br><span class="line">docker import nginx.tar nginx:v1</span><br></pre></td></tr></table></figure><h4 id="将本地的镜像保存为镜像包-save"><a href="#将本地的镜像保存为镜像包-save" class="headerlink" title="将本地的镜像保存为镜像包(save)"></a>将本地的镜像保存为镜像包(save)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker save [REPOSITORY]&#x2F;[image_id] &gt; file</span><br><span class="line">eg:</span><br><span class="line">    docker save nginx &gt; nginx.tar</span><br><span class="line">    docker save 62d49f9bab67 &gt; nginx.tar</span><br><span class="line">    </span><br><span class="line">将本地的多个镜像保存为镜像包</span><br><span class="line">docker save [image] [image] &gt; file</span><br><span class="line">docker save -o file [image] [image]</span><br></pre></td></tr></table></figure><h4 id="从包中加载镜像-load"><a href="#从包中加载镜像-load" class="headerlink" title="从包中加载镜像(load)"></a>从包中加载镜像(load)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对应save的读取</span><br><span class="line">docker load &lt; file</span><br></pre></td></tr></table></figure><h4 id="save与export区别"><a href="#save与export区别" class="headerlink" title="save与export区别"></a>save与export区别</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export导出的是容器打包</span><br><span class="line">save 是将镜像打包成包</span><br><span class="line"></span><br><span class="line">export因为是保存的容器当时的状态，因此体积会小于save,相应的会丢失到容器的元数据和以前的历史记录</span><br><span class="line">save会完整的保存</span><br><span class="line"></span><br><span class="line">export 不能将多个容器打包</span><br><span class="line">save 可以将多个包打包</span><br><span class="line"></span><br><span class="line">export 一般用来制作基础镜像:如我们从一个 ubuntu 镜像启动一个容器，然后安 装一些软件和进行一些设置后，使用 docker export 保存为一个基础镜像。然后，把这个镜像分发给其他人使用， 比如作为基础的开发环境</span><br><span class="line"></span><br><span class="line">save 一般用于不能连接外网的情况下，将本地的镜像打包，给别的机器使用</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker镜像基础操作&quot;&gt;&lt;a href=&quot;#docker镜像基础操作&quot; class=&quot;headerlink&quot; title=&quot;docker镜像基础操作&quot;&gt;&lt;/a&gt;docker镜像基础操作&lt;/h2&gt;&lt;h3 id=&quot;镜像获取&quot;&gt;&lt;a href=&quot;#镜像获取&quot; cla</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker安装教程</title>
    <link href="https://a744740454.github.io/2021/04/16/docker/docker%E5%AE%89%E8%A3%85/"/>
    <id>https://a744740454.github.io/2021/04/16/docker/docker%E5%AE%89%E8%A3%85/</id>
    <published>2021-04-16T15:46:55.174Z</published>
    <updated>2021-04-16T15:46:59.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker安装教程-centos"><a href="#docker安装教程-centos" class="headerlink" title="docker安装教程(centos)"></a>docker安装教程(centos)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>更换yum源</span><br><span class="line"><span class="comment">#里面找到你需要更换的系统版本，根据教程即可</span></span><br><span class="line">https://developer.aliyun.com/mirror/</span><br><span class="line">yum clean <span class="built_in">all</span> <span class="comment">#清除缓存</span></span><br><span class="line">yum makecache <span class="comment">#生成缓存</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>更新系统</span><br><span class="line">yum update -y --exclud=kernel*</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>安装所需的基础软件</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-<span class="number">7.</span>repo</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>将docker-ce的源换成国内阿里的</span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">ps:上述命令找不到的话先使用安装一些工具包 yum -y install yum-utils</span><br><span class="line">yum makecache fast <span class="comment">#更新缓存</span></span><br><span class="line"> </span><br><span class="line"><span class="number">5.</span>安装docker-ce</span><br><span class="line">yum -y install docker-ce <span class="comment">#docker社区版</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>设置开机自启动并且立即启动程序</span><br><span class="line">systemctl enable --now docker </span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>检验是否启动成功</span><br><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="docker安装教程-Ubuntu"><a href="#docker安装教程-Ubuntu" class="headerlink" title="docker安装教程(Ubuntu)"></a>docker安装教程(Ubuntu)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>更新系统</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装基础软件</span><br><span class="line">apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>安装GPG证书</span><br><span class="line">curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add - OK</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>写入软件源信息</span><br><span class="line">add-apt-repository <span class="string">&quot;deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>更新</span><br><span class="line">apt-get -y update</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>安装docker-ce</span><br><span class="line">apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>启动</span><br><span class="line">Docker Engine - Community</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker安装教程-centos&quot;&gt;&lt;a href=&quot;#docker安装教程-centos&quot; class=&quot;headerlink&quot; title=&quot;docker安装教程(centos)&quot;&gt;&lt;/a&gt;docker安装教程(centos)&lt;/h2&gt;&lt;figure cla</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker容器基础操作</title>
    <link href="https://a744740454.github.io/2021/04/16/docker/docker%20%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://a744740454.github.io/2021/04/16/docker/docker%20%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2021-04-16T15:46:55.158Z</published>
    <updated>2021-04-16T15:49:04.432Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-容器基础操作"><a href="#docker-容器基础操作" class="headerlink" title="docker 容器基础操作"></a>docker 容器基础操作</h2><h3 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run [option] image [cmd]</span><br><span class="line">option:</span><br><span class="line">-d:以守护进程方式运行</span><br><span class="line">-p:指定映射端口</span><br><span class="line">-P:随机映射端口</span><br><span class="line">-i:保持标准输入打开</span><br><span class="line">-t:分配一个伪终端</span><br><span class="line">-v:设置挂载文件到主机上</span><br><span class="line">--rm:当容器关闭时自动删除</span><br><span class="line">--name:为启动的容器设置一个名字</span><br><span class="line">--network:指定使用哪个网络</span><br><span class="line">-e:设置容器中的环境变量</span><br><span class="line">--link:链接到另一个容器</span><br><span class="line">-h:指定容器内的主机名</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps [option]</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND        CREATED             STATUS       PORTS        NAMES</span><br><span class="line">容器id          镜像名     命令            创建时间             状态          端口号        容器名称    </span><br><span class="line"></span><br><span class="line">option:</span><br><span class="line">-a:全部容器，包括停止的</span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker终止容器是首先向容器发送SIGTERM信号,等待一段时间超时后(默认10秒)，再发送SIGKILL信号来终止容器。</span><br><span class="line">docker stop [container id]&#x2F;[names]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><h4 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach [container id]&#x2F;[names]</span><br><span class="line">attach是最早docker官方推出的进入容器的命令了，不过使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作，当所有窗口退出时，容器结束</span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker exec [options] [container id]&#x2F;[names] [command]</span><br><span class="line">既attach之后，exec是官方推出的有一个新的进入容器的命令，这个命令相当于在容器中执行一个命令。</span><br><span class="line">options:</span><br><span class="line">    -d :分离模式: 在后台运行</span><br><span class="line">    -i :即使没有附加也保持STDIN 打开</span><br><span class="line">    -t :分配一个伪终端</span><br></pre></td></tr></table></figure><h4 id="nsenter"><a href="#nsenter" class="headerlink" title="nsenter"></a>nsenter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">是一个轻量级的软件，我们可以使用这个软件进入容器之中，一般配合docker inspect使用</span><br><span class="line"></span><br><span class="line">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; [container id]&#x2F;[names] 获取容器的pid</span><br><span class="line">nsenter</span><br><span class="line">-t, --target pid：指定被进入命名空间的目标进程的pid</span><br><span class="line">-m, --mount[&#x3D;file]：进入mount命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-u, --uts[&#x3D;file]：进入uts命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-i, --ipc[&#x3D;file]：进入ipc命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-n, --net[&#x3D;file]：进入net命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-p, --pid[&#x3D;file]：进入pid命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-U, --user[&#x3D;file]：进入user命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-G, --setgid gid：设置运行程序的gid</span><br><span class="line">-S, --setuid uid：设置运行程序的uid</span><br><span class="line">-r, --root[&#x3D;directory]：设置根目录</span><br><span class="line">-w, --wd[&#x3D;directory]：设置工作目录</span><br></pre></td></tr></table></figure><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在生产环境中排除了使用 docker attach 命令进入容器之后，相信大家第一个想到的就是 ssh。在镜像（或容器） 中安装 SSH Server，这样就能保证多人进入容器且相互之间不受干扰了，相信大家在当前的生产环境中（没有 使用 Docker 的情况）也是这样做的。但是使用了 Docker 容器之后不建议使用 ssh 进入到 Docker 容器内。</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm [options] [container id]&#x2F;[name]</span><br><span class="line">options</span><br><span class="line">-f:强制删除</span><br></pre></td></tr></table></figure><h3 id="容器的文件复制"><a href="#容器的文件复制" class="headerlink" title="容器的文件复制"></a>容器的文件复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将容器内的文件复制出来</span><br><span class="line">docker cp [container id]&#x2F;name:容器内路径 本地路径</span><br><span class="line"></span><br><span class="line">将宿主机的文件复制到容器中</span><br><span class="line">docker cp 本地路径 [container id]&#x2F;name:容器内路径</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-容器基础操作&quot;&gt;&lt;a href=&quot;#docker-容器基础操作&quot; class=&quot;headerlink&quot; title=&quot;docker 容器基础操作&quot;&gt;&lt;/a&gt;docker 容器基础操作&lt;/h2&gt;&lt;h3 id=&quot;容器创建&quot;&gt;&lt;a href=&quot;#容器创建&quot;</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>celery参数详解</title>
    <link href="https://a744740454.github.io/2021/04/16/celery/celery%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>https://a744740454.github.io/2021/04/16/celery/celery%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-04-16T15:46:54.720Z</published>
    <updated>2021-04-16T15:48:13.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery指令详解"><a href="#celery指令详解" class="headerlink" title="celery指令详解"></a>celery指令详解</h2><h3 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">全局指令:</span><br><span class="line">-A APP,--app celery对象</span><br><span class="line">-b BROKER,--broker broker位置</span><br><span class="line">--result-backend backend位置</span><br><span class="line">--loader LOADER</span><br><span class="line">--config CONFIG</span><br><span class="line">--workdir WORKDIR     Optional directory to change to after detaching.</span><br><span class="line">--no-color, -C</span><br><span class="line">--quiet, -q</span><br></pre></td></tr></table></figure><h3 id="worker指令"><a href="#worker指令" class="headerlink" title="worker指令"></a>worker指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">worker指令:</span><br><span class="line">  -n HOSTNAME, --hostname HOSTNAME</span><br><span class="line">  设置worker的hostname</span><br><span class="line">  </span><br><span class="line">                        Set custom hostname (e.g., &#39;w1@%h&#39;). Expands: %h</span><br><span class="line">                        (hostname), %n (name) and %d, (domain).                      </span><br><span class="line">  -D, --detach          启动worker作为后台进程</span><br><span class="line">  </span><br><span class="line">  -S STATEDB, --statedb STATEDB</span><br><span class="line">                        Path to the state database. The extension &#39;.db&#39; may be</span><br><span class="line">                        appended to the filename. Default: None</span><br><span class="line">  -l LOGLEVEL, --loglevel LOGLEVEL</span><br><span class="line">  日志记录的级别,可以选择DEBUG, INFO, WARNING,</span><br><span class="line">                        ERROR, CRITICAL, or FATAL.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  -O OPTIMIZATION</span><br><span class="line">  --prefetch-multiplier PREFETCH_MULTIPLIER</span><br><span class="line">                        Set custom prefetch multiplier value for this worker</span><br><span class="line">                        instance.</span><br></pre></td></tr></table></figure><h3 id="Pool-指令"><a href="#Pool-指令" class="headerlink" title="Pool 指令"></a>Pool 指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Pool 指令:</span><br><span class="line">  -c CONCURRENCY, --concurrency CONCURRENCY</span><br><span class="line">处理队列的子进程数。默认值是电脑系统可用的cpu数量</span><br><span class="line"></span><br><span class="line">  -P POOL, --pool POOL  实现池的方式: prefork (default), eventlet,gevent or solo.</span><br><span class="line">  </span><br><span class="line">  -E, --task-events, --events</span><br><span class="line">                        Send task-related events that can be captured by</span><br><span class="line">                        monitors like celery events, celerymon, and others.</span><br><span class="line">                        </span><br><span class="line">  --time-limit TIME_LIMIT</span><br><span class="line">                        为任务设置一个超时时间,时间到了会直接杀死task启动另外一个task</span><br><span class="line">                        </span><br><span class="line">  --soft-time-limit SOFT_TIME_LIMIT</span><br><span class="line">                        为任务设置一个超时时间，时间到了会抛出异常，并结束task</span><br><span class="line">                        </span><br><span class="line">  --max-tasks-per-child MAX_TASKS_PER_CHILD, --maxtasksperchild MAX_TASKS_PER_CHILD</span><br><span class="line">                        每次可以执行的最大的任务数</span><br><span class="line">                        </span><br><span class="line">  --max-memory-per-child MAX_MEMORY_PER_CHILD, --maxmemperchild MAX_MEMORY_PER_CHILD</span><br><span class="line">                        子进程最大能占据的内存数，当一个任务导致这个进程超过限制后，任务会被完成，然后进程会被替换</span><br><span class="line">                        默认没有限制</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Queue-指令"><a href="#Queue-指令" class="headerlink" title="Queue 指令"></a>Queue 指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Queue 指令:</span><br><span class="line">  --purge, --discard    </span><br><span class="line">  在守护进程启动之前将清除所有等待的任务，所有在消息队列上的任务都会被删除</span><br><span class="line">                        </span><br><span class="line">  --queues QUEUES, -Q QUEUES</span><br><span class="line">  要为这个worker启用的队列，使用逗号进行分割，默认都启用</span><br><span class="line">                        Example: -Q video,image</span><br><span class="line">                        </span><br><span class="line">  --exclude-queues EXCLUDE_QUEUES, -X EXCLUDE_QUEUES</span><br><span class="line">                        要为这个worker禁用的队列，使用逗号进行分割</span><br><span class="line">                        enabled. Example: -X video,image.</span><br><span class="line">                        </span><br><span class="line">  --include INCLUDE, -I INCLUDE</span><br><span class="line">                        用逗号分割要导入的模块列表</span><br><span class="line">                        Example: -I foo.tasks,bar.tasks</span><br></pre></td></tr></table></figure><h3 id="Features指令"><a href="#Features指令" class="headerlink" title="Features指令"></a>Features指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Features 指令:</span><br><span class="line">  --without-gossip      不会订阅其他的workers events.</span><br><span class="line">  --without-mingle      不会在启动的时候和其他worker同步</span><br><span class="line">  --without-heartbeat   不发送heartbeats.</span><br><span class="line">  --heartbeat-interval HEARTBEAT_INTERVAL</span><br><span class="line">                        发送worker heartbeat的时间间隔</span><br><span class="line">  --autoscale AUTOSCALE</span><br><span class="line">                       通过提供max_concurrency和min_concurrency来启用自动伸缩</span><br><span class="line">                       Example:: --autoscale&#x3D;10,3 (always keep 3 processes, but grow to 10 if necessary)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Daemonization-指令"><a href="#Daemonization-指令" class="headerlink" title="Daemonization 指令"></a>Daemonization 指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Daemonization 指令:</span><br><span class="line">  -f LOGFILE, --logfile LOGFILE</span><br><span class="line">                        日志文件的路径,不指定的话输出到stderr</span><br><span class="line">                        </span><br><span class="line">  --pidfile PIDFILE     用于存储进程的文件，如果文件已经存在并且进程还存活，就不会启动这个进程</span><br><span class="line">  </span><br><span class="line">  --uid UID             User id, or user name of the user to run as after</span><br><span class="line">                        detaching.</span><br><span class="line">                        </span><br><span class="line">  --gid GID             Group id, or group name of the main group to change to</span><br><span class="line">                        after detaching.</span><br><span class="line">                        </span><br><span class="line">  --umask UMASK         Effective umask(1) (in octal) of the process after</span><br><span class="line">                        detaching. Inherits the umask(1) of the parent process</span><br><span class="line">                        by default.</span><br><span class="line">                        </span><br><span class="line">  --executable EXECUTABLE</span><br><span class="line">                        Executable to use for the detached process.</span><br></pre></td></tr></table></figure><h3 id="Embedded-Beat-指令"><a href="#Embedded-Beat-指令" class="headerlink" title="Embedded Beat 指令"></a>Embedded Beat 指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Embedded Beat 指令:</span><br><span class="line">  -B, --beat          用于运行celery的周期任务，在服务中一次只能有一个beat，在生产环境中需要将celery beat分开 </span><br><span class="line"></span><br><span class="line">                        </span><br><span class="line">  -s SCHEDULE_FILENAME, --schedule-filename SCHEDULE_FILENAME, --schedule SCHEDULE_FILENAME</span><br><span class="line">                        Path to the schedule database if running with the -B</span><br><span class="line">                        option. Defaults to celerybeat-schedule. The extension</span><br><span class="line">                        &quot;.db&quot; may be appended to the filename. Apply</span><br><span class="line">                        optimization profile. Supported: default, fair</span><br><span class="line">                        </span><br><span class="line">  --scheduler SCHEDULER</span><br><span class="line">  指定sehedule的类，默认是celery.beat.PersistentScheduler</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="celery-–poll参数详解"><a href="#celery-–poll参数详解" class="headerlink" title="celery –poll参数详解"></a>celery –poll参数详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1. prefork（默认）：worker会开启多个进程来执行具体的任务实例（task instance），适合于CPU密集型应用；这会开启一个worker主进程，和一组工作进程（如果并行度设置为2，当使用ps -ef | grep celery的时候，会看到3个进程，多出来的一个就是主进程）</span><br><span class="line"></span><br><span class="line">2. eventlet：适用于I&#x2F;O密集型应用；底层使用epoll或者libevent来驱动多路复用。要注意不要在这样的worker中运行CPU密集型的任务实例。</span><br><span class="line"></span><br><span class="line">3. gevent：类似于eventlet，基于libev或者libuv事件循环。</span><br><span class="line"></span><br><span class="line">4. solo：接收控制指令同运行任务实例在同一个进程里执行，如果任务实例执行时间较长会阻塞控制指令请求的响应，客户端需要适度增加超时时间设置。（一般不使用）</span><br></pre></td></tr></table></figure><h3 id="celery中的-task-time-limit-和-task-soft-time-limit"><a href="#celery中的-task-time-limit-和-task-soft-time-limit" class="headerlink" title="celery中的 task_time_limit 和 task_soft_time_limit"></a>celery中的 task_time_limit 和 task_soft_time_limit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">task_time_limit：</span><br><span class="line">hard模式，如果配置了10s， 10s内 task 没有执行结束，则处理这个task会被杀掉，并继续执行其他新的 task</span><br><span class="line"></span><br><span class="line">task_soft_time_limit：</span><br><span class="line">soft 模式，如果配置了10s， 10s内 task 没有执行结束，可以在 task 内捕获这个异常，并处理。也可以在全局处理，进行重试或扔死信队列等操作。</span><br><span class="line">比如，在 task 中捕获异常：</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;celery指令详解&quot;&gt;&lt;a href=&quot;#celery指令详解&quot; class=&quot;headerlink&quot; title=&quot;celery指令详解&quot;&gt;&lt;/a&gt;celery指令详解&lt;/h2&gt;&lt;h3 id=&quot;全局指令&quot;&gt;&lt;a href=&quot;#全局指令&quot; class=&quot;head</summary>
      
    
    
    
    <category term="celery学习" scheme="https://a744740454.github.io/categories/celery%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="celery" scheme="https://a744740454.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>mongodb CURD操作</title>
    <link href="https://a744740454.github.io/2021/03/15/mongodb/mongodbCURD/"/>
    <id>https://a744740454.github.io/2021/03/15/mongodb/mongodbCURD/</id>
    <published>2021-03-15T14:57:27.010Z</published>
    <updated>2021-03-15T15:16:45.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mongodb-CURD操作"><a href="#mongodb-CURD操作" class="headerlink" title="mongodb CURD操作"></a>mongodb CURD操作</h2><h3 id="mongodb数据库操作"><a href="#mongodb数据库操作" class="headerlink" title="mongodb数据库操作"></a>mongodb数据库操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、增</span></span><br><span class="line">use 数据库名 <span class="comment">#如果数据库不存在，则创建数据库，否则切换到指定数据库。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查</span></span><br><span class="line">show dbs <span class="comment">#查看所有</span></span><br><span class="line"></span><br><span class="line">若直接创建完数据库使用这个命令，你是看不到的，要显示它，我们需要向config数据库插入一些数据。</span><br><span class="line">db.table1.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删</span></span><br><span class="line">use 数据库名 <span class="comment">#先切换到要删的库下</span></span><br><span class="line">db.dropDatabase() <span class="comment">#删除当前库</span></span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">db代表当前库</span><br></pre></td></tr></table></figure><h3 id="mongodb集合操作-表"><a href="#mongodb集合操作-表" class="headerlink" title="mongodb集合操作(表)"></a>mongodb集合操作(表)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、增</span></span><br><span class="line">当第一个文档(数据)插入时，集合就会被创建</span><br><span class="line">use database1</span><br><span class="line">db.table1.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>&#125;) <span class="comment">#自动创建集合并且插入数据</span></span><br><span class="line"><span class="comment">#注意 db.user和db.user.info是两个表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查</span></span><br><span class="line">show collections</span><br><span class="line">show tables</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、删</span></span><br><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><h3 id="mongodb文档操作"><a href="#mongodb文档操作" class="headerlink" title="mongodb文档操作"></a>mongodb文档操作</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#增单条</span></span><br><span class="line"><span class="comment">#新建数据</span></span><br><span class="line">user0=&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">10</span>,</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>:[<span class="string">&#x27;music&#x27;</span>,<span class="string">&#x27;read&#x27;</span>,<span class="string">&#x27;dancing&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;addr&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&#x27;country&#x27;</span>:<span class="string">&#x27;China&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;city&#x27;</span>:<span class="string">&#x27;BJ&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db.test.insert(user0)</span><br><span class="line"></span><br><span class="line"><span class="comment">#增加多条</span></span><br><span class="line"><span class="comment">#新建多条数据</span></span><br><span class="line">db.user.insertMany([user1,user2,user3,user4,user5])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有则覆盖，没则新增</span></span><br><span class="line">db.user.save(&#123;<span class="string">&quot;_id&quot;</span>:<span class="number">1</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;)</span><br><span class="line">db.user.save(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>比较运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较运算</span></span><br><span class="line"><span class="comment"># SQL：=,!=,&gt;,&lt;,&gt;=,&lt;=</span></span><br><span class="line"><span class="comment"># MongoDB：&#123;key:value&#125;代表什么等于什么,&quot;$ne&quot;,&quot;$gt&quot;,&quot;$lt&quot;,&quot;gte&quot;,&quot;lte&quot;,其中&quot;$ne&quot;能用于所有数据类型</span></span><br><span class="line">db.user.find().pretty()  <span class="comment"># 以json格式显示，了解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where name = &quot;lqz1&quot;;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lqz1&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where name != &quot;lqz2&quot;;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;name&#x27;</span>:&#123;<span class="string">&quot;$ne&quot;</span>:<span class="string">&#x27;lqz2&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、select * from db1.user where id &gt; 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&#x27;$gt&#x27;</span>:<span class="number">2</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、select * from db1.user where id &lt; 3;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&#x27;$lt&#x27;</span>:<span class="number">3</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、select * from db1.user where id &gt;= 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>,&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6、select * from db1.user where id &lt;= 2;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$lte&quot;</span>:<span class="number">2</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><p>逻辑运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#逻辑运算</span></span><br><span class="line"><span class="comment"># SQL：and，or，not ，mod（取余数）</span></span><br><span class="line"><span class="comment"># MongoDB：字典中逗号分隔的多个条件是and关系，&quot;$or&quot;的条件放到[]内,&quot;$not&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where id &gt;= 2 and id &lt; 4;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>,<span class="string">&quot;$lt&quot;</span>:<span class="number">4</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where id &gt;= 2 and age &lt; 40;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">2</span>&#125;,<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$lt&quot;</span>:<span class="number">40</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、select * from db1.user where id &gt;= 5 or name = &quot;lqz&quot;;</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line">    <span class="string">&quot;$or&quot;</span>:[</span><br><span class="line">        &#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$gte&quot;</span>:<span class="number">5</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;lqz&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、select * from db1.user where id % 2=1;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$mod&quot;</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、上题，取反</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:&#123;<span class="string">&quot;$not&quot;</span>:&#123;<span class="string">&quot;$mod&quot;</span>:[<span class="number">2</span>,<span class="number">1</span>]&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>成员运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 成员运算</span></span><br><span class="line"><span class="comment"># SQL：in，not in</span></span><br><span class="line"><span class="comment"># MongoDB：&quot;$in&quot;,&quot;$nin&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#1、select * from db1.user where age in (20,30,31);</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;age&quot;</span>:&#123;<span class="string">&quot;$in&quot;</span>:[<span class="number">20</span>,<span class="number">30</span>,<span class="number">31</span>]&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、select * from db1.user where name not in (&#x27;lqz1&#x27;,&#x27;lqz2&#x27;);</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;name&quot;</span>:&#123;<span class="string">&quot;$nin&quot;</span>:[<span class="string">&#x27;lqz1&#x27;</span>,<span class="string">&#x27;lqz2&#x27;</span>]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>正则匹配</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SQL: regexp 正则</span></span><br><span class="line"><span class="comment"># MongoDB: /正则表达/i</span></span><br><span class="line"><span class="comment">#1、select * from db1.user where name regexp &#x27;^l&#x27;;</span></span><br><span class="line"><span class="comment"># 查询名字以l开头的人</span></span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/.*?/&#125;)</span><br><span class="line">db.user.find(&#123;<span class="string">&quot;name&quot;</span>:/^l/&#125;)</span><br><span class="line"><span class="comment"># 查询名字以l开头，以1结尾的所有数据</span></span><br><span class="line">db.user.find(&#123;&quot;name&quot;:/^l.*?1$/&#125;)</span><br></pre></td></tr></table></figure><p>取指定字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、select name,age from db1.user where id=3;</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">3</span>&#125;,&#123;<span class="string">&#x27;_id&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;name&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="comment"># 0表示不显示，1表示显示</span></span><br></pre></td></tr></table></figure><p>查询数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、查看有dancing爱好的人</span></span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;hobbies&#x27;</span>:<span class="string">&#x27;dancing&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查看既有dancing爱好又有tea爱好的人</span></span><br><span class="line">db.user.find(&#123;</span><br><span class="line">    <span class="string">&#x27;hobbies&#x27;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;$all&quot;</span>:[<span class="string">&#x27;dancing&#x27;</span>,<span class="string">&#x27;tea&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查看第4个爱好为tea的人</span></span><br><span class="line">db.user.find(&#123;<span class="string">&quot;hobbies.3&quot;</span>:<span class="string">&#x27;tea&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4、查看所有人最后两个爱好(注意没有hobbies字段的也会被查出)（本质用的是取指定字段，所以要放在后面的字典中）</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">&#x27;hobbies&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:-<span class="number">2</span>&#125;,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="number">0</span>,<span class="string">&quot;addr&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5、查看所有人的第2个到第3个爱好</span></span><br><span class="line">db.user.find(&#123;&#125;,&#123;<span class="string">&#x27;hobbies&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;_id&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="number">0</span>,<span class="string">&quot;addr&quot;</span>:<span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.blog.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;alex意外死亡的真相&quot;</span>,</span><br><span class="line">        <span class="string">&quot;comments&quot;</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;egon&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;alex是谁？？？&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">200</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;wxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;我去，真的假的&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">300</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;yxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;吃喝嫖赌抽，欠下两个亿&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">40</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="string">&quot;egon&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;content&quot;</span> : <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;thumb&quot;</span> : <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">db.blog.find(&#123;&#125;,&#123;<span class="string">&#x27;comments&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:-<span class="number">2</span>&#125;&#125;).pretty() <span class="comment">#查询最后两个</span></span><br><span class="line">db.blog.find(&#123;&#125;,&#123;<span class="string">&#x27;comments&#x27;</span>:&#123;<span class="string">&quot;$slice&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;&#125;).pretty() <span class="comment">#查询1到2</span></span><br></pre></td></tr></table></figure><p>排序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 排序:--1代表升序，-1代表降序</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">&quot;name&quot;</span>:<span class="number">1</span>,&#125;)</span><br><span class="line">db.user.find().sort(&#123;<span class="string">&quot;age&quot;</span>:-<span class="number">1</span>,<span class="string">&#x27;_id&#x27;</span>:<span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><p>分页</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页:--limit代表取多少个document，skip代表跳过前多少个document。 </span></span><br><span class="line"><span class="comment"># limit中表示一页显示的条数，skip(页码数*一页显示的条数)</span></span><br><span class="line">db.user.find().sort(&#123;<span class="string">&#x27;age&#x27;</span>:<span class="number">1</span>&#125;).limit(<span class="number">1</span>).skip(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 表关联</span></span><br><span class="line">user &#123;_id:<span class="number">1</span>,name:lqz,age:<span class="number">18</span>&#125;   一个人写多篇文章</span><br><span class="line">article ----》子查询</span><br><span class="line">&#123;<span class="string">&#x27;userid&#x27;</span>:<span class="number">1</span>,article:红楼梦&#125;</span><br><span class="line">  &#123;<span class="string">&#x27;userid&#x27;</span>:<span class="number">1</span>,article:西游记&#125;</span><br></pre></td></tr></table></figure><p>获取数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取数量</span></span><br><span class="line">db.user.count(&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">30</span>&#125;&#125;) </span><br><span class="line">--或者</span><br><span class="line">db.user.find(&#123;<span class="string">&#x27;age&#x27;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">30</span>&#125;&#125;).count()</span><br></pre></td></tr></table></figure><p>其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、&#123;&#x27;key&#x27;:null&#125; 匹配key的值为null或者没有这个key</span></span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">10</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">111</span>&#125;)</span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">20</span>&#125;)</span><br><span class="line">db.t2.insert(&#123;<span class="string">&#x27;b&#x27;</span>:null&#125;)</span><br><span class="line"></span><br><span class="line">&gt; db.t2.find(&#123;<span class="string">&quot;b&quot;</span>:null&#125;)</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5a5cc2a7c1b4645aad959e5a&quot;</span>), <span class="string">&quot;a&quot;</span> : <span class="number">20</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5a5cc2a8c1b4645aad959e5b&quot;</span>), <span class="string">&quot;b&quot;</span> : null &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#2、查找所有</span></span><br><span class="line">db.user.find() <span class="comment">#等同于db.user.find(&#123;&#125;)</span></span><br><span class="line">db.user.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、查找一个，与find用法一致，只是只取匹配成功的第一个</span></span><br><span class="line">db.user.findOne(&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;$gt&quot;</span>:<span class="number">3</span>&#125;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;mongodb-CURD操作&quot;&gt;&lt;a href=&quot;#mongodb-CURD操作&quot; class=&quot;headerlink&quot; title=&quot;mongodb CURD操作&quot;&gt;&lt;/a&gt;mongodb CURD操作&lt;/h2&gt;&lt;h3 id=&quot;mongodb数据库操作&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="mongodb" scheme="https://a744740454.github.io/categories/mongodb/"/>
    
    
    <category term="mongodb" scheme="https://a744740454.github.io/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Flask-PyMongo简单使用</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/Flask-PyMongo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/Flask-PyMongo%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-15T14:34:40.012Z</published>
    <updated>2021-03-15T15:17:14.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask-PyMongo-CRUD操作"><a href="#Flask-PyMongo-CRUD操作" class="headerlink" title="Flask-PyMongo CRUD操作"></a>Flask-PyMongo CRUD操作</h2><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask-PyMongo-CRUD操作&quot;&gt;&lt;a href=&quot;#Flask-PyMongo-CRUD操作&quot; class=&quot;headerlink&quot; title=&quot;Flask-PyMongo CRUD操作&quot;&gt;&lt;/a&gt;Flask-PyMongo CRUD操作&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>将mongo中的数据转换成json格式</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/%E5%B0%86mongo%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90json%E6%A0%BC%E5%BC%8F/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/%E5%B0%86mongo%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E6%88%90json%E6%A0%BC%E5%BC%8F/</id>
    <published>2021-03-15T14:31:31.311Z</published>
    <updated>2021-03-15T14:31:31.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将mongo中的数据转换成json格式"><a href="#将mongo中的数据转换成json格式" class="headerlink" title="将mongo中的数据转换成json格式"></a>将mongo中的数据转换成json格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个是将mongo Document对象转换成json的编码器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoEncoder</span>(<span class="params">JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, o</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换日期</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, (datetime, date)):</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换Document</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, BaseDocument):</span><br><span class="line">            <span class="keyword">return</span> o.to_mongo()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换id</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, ObjectId):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(o)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JSONEncoder.default(self, o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在蓝图上添加mongo解码器.  jsonify会自动将Document对象转成json</span></span><br><span class="line">bp = Blueprint(<span class="string">&quot;article&quot;</span>, __name__, url_prefix=<span class="string">&quot;/article&quot;</span>)</span><br><span class="line">bp.json_encoder = MongoEncoder</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">&quot;/&lt;id&gt;/&quot;</span>, methods=(<span class="params"><span class="string">&quot;GET&quot;</span>,</span>)</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article</span>(<span class="params"><span class="built_in">id</span>: <span class="built_in">str</span></span>):</span></span><br><span class="line">    instance = Article.objects.get_or_404(<span class="built_in">id</span>=<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;</span><br><span class="line">        <span class="string">&quot;code&quot;</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">&quot;msg&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">        <span class="string">&quot;data&quot;</span>: instance</span><br><span class="line">    &#125;)      </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;将mongo中的数据转换成json格式&quot;&gt;&lt;a href=&quot;#将mongo中的数据转换成json格式&quot; class=&quot;headerlink&quot; title=&quot;将mongo中的数据转换成json格式&quot;&gt;&lt;/a&gt;将mongo中的数据转换成json格式&lt;/h2&gt;&lt;figu</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask使用mongodb</title>
    <link href="https://a744740454.github.io/2021/03/15/flask/flask%E4%B8%AD%E4%BD%BF%E7%94%A8MongoDB/"/>
    <id>https://a744740454.github.io/2021/03/15/flask/flask%E4%B8%AD%E4%BD%BF%E7%94%A8MongoDB/</id>
    <published>2021-03-15T13:53:16.523Z</published>
    <updated>2021-03-15T14:30:25.633Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask连接mongodb"><a href="#flask连接mongodb" class="headerlink" title="flask连接mongodb"></a>flask连接mongodb</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">经过一番资料的查找，我发现flask连接mongodb有三种方式</span><br><span class="line"><span class="number">1.</span>PyMongo <span class="comment">#官方提供的最基本的</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>flask_pymongo <span class="comment">#在pymongo上封装的</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>Flask-MongoEngine <span class="comment">#类似于django orm的</span></span><br><span class="line"></span><br><span class="line">我这里的业务需求的话只需要使用第二种即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用</span></span><br><span class="line"><span class="number">1.</span>安装flask_pymongo</span><br><span class="line">pip install Flask-PyMongo</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>获得mongo对象</span><br><span class="line"><span class="keyword">from</span> flask_pymongo <span class="keyword">import</span> PyMongo</span><br><span class="line">app.config[<span class="string">&quot;MONGO_URI&quot;</span>] = <span class="string">&quot;mongodb://username:password@host:port/myDatabase&quot;</span></span><br><span class="line">mongo = PyMongo(app)</span><br><span class="line"></span><br><span class="line">ps:上述的连接可能会报出认证错误，解决问题的方法如下</span><br><span class="line">app.config[<span class="string">&quot;MONGO_URI&quot;</span>] = <span class="string">&quot;mongodb://username:password@host:port/myDatabase?authSource=admin&quot;</span>    </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask连接mongodb&quot;&gt;&lt;a href=&quot;#flask连接mongodb&quot; class=&quot;headerlink&quot; title=&quot;flask连接mongodb&quot;&gt;&lt;/a&gt;flask连接mongodb&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:47.734Z</published>
    <updated>2021-03-03T04:01:59.474Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:47.734Z</published>
    <updated>2021-03-03T04:01:47.734Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    <id>https://a744740454.github.io/2021/03/03/%E7%AE%97%E6%B3%95%E7%9B%B8%E5%85%B3/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</id>
    <published>2021-03-03T04:01:21.037Z</published>
    <updated>2021-03-03T04:01:21.037Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>脏读、不可重复读、幻读</title>
    <link href="https://a744740454.github.io/2021/03/03/mysql/%E8%84%8F%E8%AF%BB%E3%80%81%E5%B9%BB%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/"/>
    <id>https://a744740454.github.io/2021/03/03/mysql/%E8%84%8F%E8%AF%BB%E3%80%81%E5%B9%BB%E8%AF%BB%E3%80%81%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/</id>
    <published>2021-03-03T01:48:12.755Z</published>
    <updated>2021-03-03T08:09:20.483Z</updated>
    
    <content type="html"><![CDATA[<h2 id="脏读、不可重复读、幻读"><a href="#脏读、不可重复读、幻读" class="headerlink" title="脏读、不可重复读、幻读"></a>脏读、不可重复读、幻读</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">脏读:A事务读取到B事务未提交的数据，然后由于某种原因B事务进行了回滚，这样子A事务获取的数据就和回滚后的数据不一样了</span><br><span class="line">不可重复读:事务a在同一个事务内多次读取同一个数据，可能事务b再此期间修改了这个数值，导致前后读取的数据值不一样</span><br><span class="line">幻读:事务a在读取一段范围内的数据的时候，事务b往这个范围内写入了一条数据，事务a在以相同的条件查询数据的时候查出了多出来的一条数据</span><br></pre></td></tr></table></figure><h2 id="mysql四种隔离级别"><a href="#mysql四种隔离级别" class="headerlink" title="mysql四种隔离级别"></a>mysql四种隔离级别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Read Uncommitted（读取未提交内容）</span><br><span class="line">在这个隔离级别中，所有的事务都可以看到其他未提交事务的执行结果。</span><br><span class="line">这个隔离级别很少被用在实际应用场景中，因为她的效率比其他的隔离级别好多少，并且会造成脏读的情况。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Read Committed（读取提交内容）</span><br><span class="line">这个级别所有的事务只能看见其余事务已经提交的结果</span><br><span class="line"></span><br><span class="line">Repeatable Read（可重读）</span><br><span class="line">同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上这个会造成幻读的情况</span><br><span class="line"></span><br><span class="line">Serializable（可串行化）</span><br><span class="line">这是最高的隔离级别，它让事务之间以串行的方式进行，让事务之间不可能互相冲突，从而解决幻读问题，不过这会导致数据库读取资源过慢，导致大量超时现象的发生</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;脏读、不可重复读、幻读&quot;&gt;&lt;a href=&quot;#脏读、不可重复读、幻读&quot; class=&quot;headerlink&quot; title=&quot;脏读、不可重复读、幻读&quot;&gt;&lt;/a&gt;脏读、不可重复读、幻读&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="mysql高级" scheme="https://a744740454.github.io/categories/mysql%E9%AB%98%E7%BA%A7/"/>
    
    
    <category term="mysql" scheme="https://a744740454.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>flask请求流程</title>
    <link href="https://a744740454.github.io/2021/03/02/flask/flask%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/"/>
    <id>https://a744740454.github.io/2021/03/02/flask/flask%E8%AF%B7%E6%B1%82%E6%B5%81%E7%A8%8B/</id>
    <published>2021-03-02T10:58:05.540Z</published>
    <updated>2021-03-02T11:26:59.345Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask请求流程flask项目一启动，有6个全局变量"><a href="#flask请求流程flask项目一启动，有6个全局变量" class="headerlink" title="flask请求流程flask项目一启动，有6个全局变量"></a>flask请求流程flask项目一启动，有6个全局变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_request_ctx_stack:LocalStack #LocalStack对象</span><br><span class="line">_app_ctx_stack:LocalStack #LocalStack对象</span><br><span class="line">current_app:LocalProxy(_find_app)</span><br><span class="line">request:LocalProxy #LocalStack对象</span><br><span class="line">session:LocalProxy #LocalStack对象</span><br><span class="line">g:LocalProxy #LocalStack对象</span><br></pre></td></tr></table></figure><h3 id="请求来了"><a href="#请求来了" class="headerlink" title="请求来了"></a>请求来了</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.__call__()-----&gt;内部执行:self.wsgi_app(environ, start_response)</span><br></pre></td></tr></table></figure><h3 id="wsgi-app"><a href="#wsgi-app" class="headerlink" title="wsgi_app()"></a>wsgi_app()</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>执行:ctx = self.request_context(environ):返回一个RequestContext对象，并且封装了request(当次请求的request对象),session。</span><br><span class="line"><span class="number">2.</span>执行:ctx.push():RequestContext对象的push方法</span><br><span class="line">    <span class="number">2.1</span> push方法中中间位置<span class="number">382</span>行有:_request_ctx_stack.push(self),self指的是ctx对象</span><br><span class="line">    <span class="number">2.2</span> 去_request_ctx_stack对象的类中找push方法(LocalStack中找push方法)</span><br><span class="line">    <span class="number">2.3</span> push源码</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, obj</span>):</span></span><br><span class="line">    <span class="comment"># 通过反射找到self._local,在__init__实例化的时候生成的:self._local = Local()</span></span><br><span class="line">    <span class="comment"># Local() flask封装了支持线程和协程的local对象</span></span><br><span class="line">    <span class="comment"># 一开始取不到stack,返回None</span></span><br><span class="line">    rv = <span class="built_in">getattr</span>(self._local, <span class="string">&quot;stack&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> rv <span class="keyword">is</span> <span class="literal">None</span>:</span><br></pre></td></tr></table></figure><h3 id="如果在视图函数中使用request对象，比如-print-request"><a href="#如果在视图函数中使用request对象，比如-print-request" class="headerlink" title="如果在视图函数中使用request对象，比如:print(request)"></a>如果在视图函数中使用request对象，比如:print(request)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>会调用request对象的`__str__`方法,request类是:LocalProxy</span><br><span class="line"><span class="number">2.</span>LocalProxy中的`__str__`方法:<span class="keyword">lambda</span> x: <span class="built_in">str</span>(x._get_current_object())</span><br><span class="line"><span class="number">1.</span>内部执行_get_current_object()方法的源码如下:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_get_current_object</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(self.__local, <span class="string">&quot;__release_local__&quot;</span>):</span><br><span class="line">        <span class="comment"># self.__local()在__init__的时候，实例化的，在__init__中:object.__setattr__(self, &quot;_LocalProxy__local&quot;, local)</span></span><br><span class="line">        <span class="comment"># 用了隐藏属性</span></span><br><span class="line">        <span class="comment"># self.__loacl</span></span><br><span class="line"><span class="comment"># 实例化该类的时候传入的local(偏函数的内存地址:request = LocalProxy(partial(_lookup_req_object, &quot;request&quot;)))</span></span><br><span class="line">            </span><br><span class="line"><span class="number">3.</span>_lookup_req_object函数源码如下:</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_lookup_req_object</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="comment"># name就是&#x27;request&#x27;字符串</span></span><br><span class="line">    <span class="comment"># top方法是把第二步中放入的ctx取出来，因为都在一个线程内，当前取到的就是当前请求的ctx对象</span></span><br><span class="line">    top = _request_ctx_stack.top</span><br><span class="line">    <span class="keyword">if</span> top <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(_request_ctx_err_msg)</span><br><span class="line">     </span><br><span class="line"><span class="number">4.</span>所以:print(request)实质上是在打印当次请求的request对象的__str__</span><br></pre></td></tr></table></figure><h3 id="如果在视图函数中使用request对象"><a href="#如果在视图函数中使用request对象" class="headerlink" title="如果在视图函数中使用request对象"></a>如果在视图函数中使用request对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">比如：print(request.method):实质上是取到当次请求的request对象的methid属性</span><br></pre></td></tr></table></figure><h3 id="最终，请求结束执行"><a href="#最终，请求结束执行" class="headerlink" title="最终，请求结束执行"></a>最终，请求结束执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.auto_pop(error)# 把ctx移除掉</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask请求流程flask项目一启动，有6个全局变量&quot;&gt;&lt;a href=&quot;#flask请求流程flask项目一启动，有6个全局变量&quot; class=&quot;headerlink&quot; title=&quot;flask请求流程flask项目一启动，有6个全局变量&quot;&gt;&lt;/a&gt;flask</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>python项目模块导出</title>
    <link href="https://a744740454.github.io/2021/03/02/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/python%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA/"/>
    <id>https://a744740454.github.io/2021/03/02/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/python%E9%A1%B9%E7%9B%AE%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%87%BA/</id>
    <published>2021-03-02T10:42:51.902Z</published>
    <updated>2021-03-02T10:44:50.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python项目模块导出"><a href="#python项目模块导出" class="headerlink" title="python项目模块导出"></a>python项目模块导出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 在虚拟环境中直接导出</span><br><span class="line">pip3 freeze &gt;requirements.txt</span><br><span class="line"><span class="number">2</span> 系统环境装了很多模块，只导出当前项目依赖的模块</span><br><span class="line">-pip3 install pipreqs</span><br><span class="line">    -pipreqs ./ --encoding=utf8</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python项目模块导出&quot;&gt;&lt;a href=&quot;#python项目模块导出&quot; class=&quot;headerlink&quot; title=&quot;python项目模块导出&quot;&gt;&lt;/a&gt;python项目模块导出&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;</summary>
      
    
    
    
    <category term="python实用技巧" scheme="https://a744740454.github.io/categories/python%E5%AE%9E%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="python" scheme="https://a744740454.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>flask划分目录(蓝图)</title>
    <link href="https://a744740454.github.io/2021/03/02/flask/flask%E5%88%92%E5%88%86%E7%9B%AE%E5%BD%95(%E8%93%9D%E5%9B%BE)/"/>
    <id>https://a744740454.github.io/2021/03/02/flask/flask%E5%88%92%E5%88%86%E7%9B%AE%E5%BD%95(%E8%93%9D%E5%9B%BE)/</id>
    <published>2021-03-02T08:27:23.226Z</published>
    <updated>2021-03-02T09:13:07.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask划分目录"><a href="#flask划分目录" class="headerlink" title="flask划分目录"></a>flask划分目录</h2><h3 id="flask不使用蓝图划分目录"><a href="#flask不使用蓝图划分目录" class="headerlink" title="flask不使用蓝图划分目录"></a>flask不使用蓝图划分目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">目录结构</span><br><span class="line">flask_study</span><br><span class="line">    static</span><br><span class="line">    templates</span><br><span class="line">    views</span><br><span class="line">        __init__.py</span><br><span class="line">        order.py <span class="comment">#app文件</span></span><br><span class="line">        user.py <span class="comment">#app文件</span></span><br><span class="line">    main.py</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">#main.py 项目的入口</span></span><br><span class="line"><span class="keyword">from</span> views <span class="keyword">import</span> app <span class="comment">#从views导入app对象</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__.py 在这里实例化app对象</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect,views</span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;../templates&#x27;</span>)</span><br><span class="line">app.debug=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> app <span class="comment">#导入app对象</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user_index/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;我是user接口的首页&#x27;</span></span><br><span class="line"></span><br><span class="line">只有上述代码是不能执行的，因为这样子只执行了__init__的代码，但是没有将user.py中的代码执行，因此我们需要在__init__.py中将app导入</span><br><span class="line"></span><br><span class="line"><span class="comment">#__init__.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> order</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user</span><br></pre></td></tr></table></figure><h3 id="flask蓝图"><a href="#flask蓝图" class="headerlink" title="flask蓝图"></a>flask蓝图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">上述代码虽然可以执行，但是容易出现循环导入的问题，因此flask官方提供了一种方法，帮助我们划分目录，这就是蓝图</span><br><span class="line"></span><br><span class="line">使用步骤</span><br><span class="line"><span class="number">1.</span>实例化对象</span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">    user = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__) <span class="comment">#第一个参数是蓝图的名称，任意写</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在app中注册</span><br><span class="line"><span class="comment">#__init__.py</span></span><br><span class="line"><span class="keyword">from</span> views.user <span class="keyword">import</span> user <span class="comment">#将app应用中实例化的对象导入过来</span></span><br><span class="line">app.register_blueprint(user) <span class="comment">#注册</span></span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>写路由</span><br><span class="line"><span class="comment">#user.py</span></span><br><span class="line"><span class="meta">    @user.route(<span class="params"><span class="string">&#x27;/user_index/&#x27;</span></span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">user_index</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;我是user接口的首页&#x27;</span></span><br><span class="line">   </span><br><span class="line"><span class="number">4.</span>其余知识点</span><br><span class="line"><span class="number">1.</span>可以指定路由进来时的前缀，添加一个url_prefix即可</span><br><span class="line">    app.register_blueprint(user, url_prefix=<span class="string">&#x27;/user&#x27;</span>)</span><br><span class="line">    <span class="number">2.</span>若app划分为一个文件夹，我们可以在这个文件夹中有自己的templates和static文件夹</span><br><span class="line">    web = Blueprint(<span class="string">&#x27;web&#x27;</span>,__name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">    <span class="number">3.</span>蓝图对象有自己的请求扩展，你只有访问这个蓝图的路径时才会触发</span><br><span class="line">        web = Blueprint(<span class="string">&#x27;web&#x27;</span>, __name__,template_folder=<span class="string">&#x27;templates&#x27;</span>,static_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line"><span class="meta">        @web.before_request</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">web_request</span>():</span></span><br><span class="line">            print(<span class="string">&#x27;web request&#x27;</span>)</span><br><span class="line"><span class="meta">        @web.after_request</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">web_after</span>(<span class="params">response</span>):</span></span><br><span class="line">            print(response)</span><br><span class="line">            <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask划分目录&quot;&gt;&lt;a href=&quot;#flask划分目录&quot; class=&quot;headerlink&quot; title=&quot;flask划分目录&quot;&gt;&lt;/a&gt;flask划分目录&lt;/h2&gt;&lt;h3 id=&quot;flask不使用蓝图划分目录&quot;&gt;&lt;a href=&quot;#flask不使用蓝图划</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-03-01T00:56:25.149Z</published>
    <updated>2021-03-01T07:33:14.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是布隆过滤器</span><br><span class="line">布隆过滤器是一种数据结构，用来判断某个值是否已经存在某个集合中了</span><br><span class="line">优点：空间效率和时间效率极高</span><br><span class="line">缺点：有一定的误识别率，并且随着数据量的增加这个误差的概率会越来越大</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器的应用场景"><a href="#布隆过滤器的应用场景" class="headerlink" title="布隆过滤器的应用场景"></a>布隆过滤器的应用场景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布隆过滤器广泛应用于网页黑名单系统、垃圾邮件过滤系统、爬虫网址判重系统等。</span><br><span class="line">当你数据库有大量的数据的时候，你每次进行查询都是很消耗服务器资源的一种行为，并且对数据库的压力也会增大。</span><br><span class="line">这种时候就可以考虑使用布隆过滤器</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当有一个集合，并且集合里面有多个元素时，首先将位数组进行初始化，然后将集合中的数据通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，这个编码可能对应位数组上的一个点获多个点，然后将位数组上对应的值更改为<span class="number">1.</span>数据越多，对应的位数组上的值被改为<span class="number">1</span>的越多。</span><br><span class="line"></span><br><span class="line">位数组:一个很长的二进制向量 </span><br><span class="line"></span><br><span class="line">布隆过滤器误判的原因</span><br><span class="line">当你将一个值通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，可能这个值并没有存储过，但是被判断为已经存在过了。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106143141784-1475031003.png" alt="1030776-20170106143141784-1475031003"></p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈希函数是布隆过滤器的基础，布隆过滤器也是根据哈希函数实现的</span><br><span class="line">哈希函数：将任意大小的数据转换成特定大小的数据的函数，转换后的数据称为哈希值或哈希编码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106142012816-1867044021.png" alt="1030776-20170106142012816-1867044021"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/categories/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    <category term="数据结构" scheme="https://a744740454.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Flask请求扩展</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/</id>
    <published>2021-02-24T11:23:50.339Z</published>
    <updated>2021-02-24T11:32:59.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask请求扩展"><a href="#Flask请求扩展" class="headerlink" title="Flask请求扩展"></a>Flask请求扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Flask的请求扩展类似于django的中间件，在请求进入视图函数和离开视图函数之后执行的一些功能，总共有<span class="number">7</span>个</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>before_request：请求来之前执行（可以加多个，从上往下执行，等同于中间件的process_request）</span><br><span class="line"><span class="number">2.</span>after_request:请求走之后（可以加多个，从下往上执行，等同于以中间件的process_response）</span><br><span class="line"><span class="number">3.</span>before_first_request:项目运行后的第一次会执行它（初始化的工工作）</span><br><span class="line"><span class="number">4.</span>teardown_request:出错也会走，记录日志</span><br><span class="line"><span class="number">5.</span>errorhandler(<span class="number">404</span>)：状态码是响应的，就会触发它的执行</span><br><span class="line"><span class="comment">#上面五个使用方法大致相似，与下面2个使用方法不一样</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span>():</span></span><br><span class="line">    <span class="comment">#取出访问者的ip，记录一下</span></span><br><span class="line">    print(request.path)</span><br><span class="line">    print(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;回去&#x27;</span>  <span class="comment"># 直接回去了，等同于django中return Response对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>template_global()  <span class="comment"># 全局函数，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123;sb(<span class="number">1</span>,<span class="number">2</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>template_filter() <span class="comment"># 全局过滤器，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>(<span class="params">a1,a2,a3,a4</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + <span class="number">100</span>+a2+a3+a4</span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123; <span class="number">1</span>|db(<span class="number">2</span>,<span class="number">3</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask请求扩展&quot;&gt;&lt;a href=&quot;#Flask请求扩展&quot; class=&quot;headerlink&quot; title=&quot;Flask请求扩展&quot;&gt;&lt;/a&gt;Flask请求扩展&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask闪现</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/</id>
    <published>2021-02-24T11:20:17.247Z</published>
    <updated>2021-02-24T11:20:17.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask闪现"><a href="#Flask闪现" class="headerlink" title="Flask闪现"></a>Flask闪现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">闪现的本质就是先将一部分数据存储在某个位置，下次请求的时候取出来，取出以后该数据消失</span><br><span class="line">而flask的闪现是存放在session中的</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>存值</span><br><span class="line">flash(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>取值</span><br><span class="line">get_flashed_message()</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>设置闪现分类</span><br><span class="line">flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>从对应的分类中取出数据</span><br><span class="line">data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask闪现&quot;&gt;&lt;a href=&quot;#Flask闪现&quot; class=&quot;headerlink&quot; title=&quot;Flask闪现&quot;&gt;&lt;/a&gt;Flask闪现&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask设置session</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/</id>
    <published>2021-02-24T11:01:52.026Z</published>
    <updated>2021-02-24T11:07:31.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask设置session"><a href="#Flask设置session" class="headerlink" title="Flask设置session"></a>Flask设置session</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>设置密钥</span><br><span class="line">app.secret_key = <span class="string">&#x27;&#x27;</span>随机密钥</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入全局session对象</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>赋值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>] = value</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>取值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ps:session存放的位置是浏览器端的cookie中，类似于荷载</span><br></pre></td></tr></table></figure><h2 id="session的执行流程"><a href="#session的执行流程" class="headerlink" title="session的执行流程"></a>session的执行流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>请求来了在open_session中取出cookie，反解数据，包装成session---》视图函数中使用session</span><br><span class="line"><span class="number">2.</span>只要session修改了，请求走了---》save_session---》把session加密，放到cookie中，返回给前端</span><br><span class="line"><span class="number">3.</span>不同浏览器，cookie不同（你的淘宝，同一个浏览器只能登陆一个用户）</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask设置session&quot;&gt;&lt;a href=&quot;#Flask设置session&quot; class=&quot;headerlink&quot; title=&quot;Flask设置session&quot;&gt;&lt;/a&gt;Flask设置session&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
</feed>
