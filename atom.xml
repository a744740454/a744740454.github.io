<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-02-02T01:02:42.077Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>五险一金相关</title>
    <link href="https://a744740454.github.io/2021/02/02/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91%E7%9B%B8%E5%85%B3/"/>
    <id>https://a744740454.github.io/2021/02/02/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-02T00:28:07.897Z</published>
    <updated>2021-02-02T01:02:42.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="五险一金是指哪些？"><a href="#五险一金是指哪些？" class="headerlink" title="五险一金是指哪些？"></a>五险一金是指哪些？</h2><p>五险:养老，医疗，失业，生育，工伤</p><p>一金:公积金</p><h2 id="个人账户与统筹账户"><a href="#个人账户与统筹账户" class="headerlink" title="个人账户与统筹账户"></a>个人账户与统筹账户</h2><p>五险的账户会分为2部分，一部分为个人账户，一部分为统筹账户</p><p>个人账户:从你工资上扣的</p><p>统筹账户:从公司中扣的,与员工无关</p><h2 id="社保基数是多少？"><a href="#社保基数是多少？" class="headerlink" title="社保基数是多少？"></a>社保基数是多少？</h2><p> 社会保险基数简称社保基数，是指职工在一个社保年度的社会保险缴费基数。它是按照职工上一年度1月至12月的所有工资性收入所得的月平均额来进行确定。社会保险缴费基数是计算用人单位及其职工缴纳社保费和职工社会保险待遇的重要依据，有上限和下限之分，具体数额根据各地区实际情况而定。</p><p>建议:够用即可</p><h2 id="社保可以取得前提"><a href="#社保可以取得前提" class="headerlink" title="社保可以取得前提"></a>社保可以取得前提</h2><pre><code> -死亡</code></pre><p>​    -移民</p><p>​    -转移</p><h2 id="公积金"><a href="#公积金" class="headerlink" title="公积金"></a>公积金</h2><p>​    -这个能多交就多交(5%–12%),你交一半，公司给你交一半，可以随时提取</p><p>​    -租房子，新房装修等都可以提取</p><h2 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h2><p>1.现在全国的社保是没有进行全国联网的，因此若hr问你之前有没有交过社保，可以使用下面这句话</p><p>​    -我之前在上海没有交过社保，你给我办增员</p><p>2.工作经验三年，没有交过社保</p><p>​    -之前是在别的城市工作</p><p>​    -跟之前的同事合伙办了个公司</p><p>​    -去了个创业公司(公司没给交)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;五险一金是指哪些？&quot;&gt;&lt;a href=&quot;#五险一金是指哪些？&quot; class=&quot;headerlink&quot; title=&quot;五险一金是指哪些？&quot;&gt;&lt;/a&gt;五险一金是指哪些？&lt;/h2&gt;&lt;p&gt;五险:养老，医疗，失业，生育，工伤&lt;/p&gt;
&lt;p&gt;一金:公积金&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="五险一金" scheme="https://a744740454.github.io/categories/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/"/>
    
    
    <category term="五险一金" scheme="https://a744740454.github.io/tags/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/"/>
    
  </entry>
  
  <entry>
    <title>gitpython学习</title>
    <link href="https://a744740454.github.io/2021/01/20/python%E6%A8%A1%E5%9D%97/gitpython/gitpython/"/>
    <id>https://a744740454.github.io/2021/01/20/python%E6%A8%A1%E5%9D%97/gitpython/gitpython/</id>
    <published>2021-01-20T11:34:32.932Z</published>
    <updated>2021-01-20T12:57:11.304Z</updated>
    
    
    
    
    <category term="gitpython" scheme="https://a744740454.github.io/categories/gitpython/"/>
    
    
    <category term="自动化" scheme="https://a744740454.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="gitpython" scheme="https://a744740454.github.io/tags/gitpython/"/>
    
    <category term="python模块" scheme="https://a744740454.github.io/tags/python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>celery的高级使用</title>
    <link href="https://a744740454.github.io/2021/01/20/celery/celery%E7%9A%84%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/20/celery/celery%E7%9A%84%E9%AB%98%E7%BA%A7%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-20T09:06:53.858Z</published>
    <updated>2021-01-20T11:01:33.706Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery的高级使用"><a href="#celery的高级使用" class="headerlink" title="celery的高级使用"></a>celery的高级使用</h2><p>前面两篇博客主要讲的是celery的基本使用方式以及常用的目录结构。这一篇主要讲celery定时任务的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">其实celery定时任务非常的简单，我们只需要在celery实例化的那个文件夹中进行一些配置即可</span><br><span class="line">然后使用下述命令启动自动提交任务的服务:</span><br><span class="line">celery beat -A celery_task -l info</span><br><span class="line"></span><br><span class="line">实例:</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 时区</span></span><br><span class="line">app.conf.timezone = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="comment"># 是否使用UTC</span></span><br><span class="line">app.conf.enable_utc = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务的定时配置</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"><span class="keyword">from</span> celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line">app.conf.beat_schedule = &#123;</span><br><span class="line">    <span class="string">&#x27;low-task&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;task&#x27;</span>: <span class="string">&#x27;celery_task.tasks.low&#x27;</span>,               <span class="comment">#任务的位置</span></span><br><span class="line">        <span class="string">&#x27;schedule&#x27;</span>: timedelta(seconds=<span class="number">3</span>),              <span class="comment">#距离执行的时间，放一个时间对象</span></span><br><span class="line">        <span class="comment"># &#x27;schedule&#x27;: crontab(hour=8, day_of_week=1),  # 每周一早八点</span></span><br><span class="line">        <span class="string">&#x27;args&#x27;</span>: (<span class="number">300</span>, <span class="number">150</span>),                            <span class="comment">#任务所需的参数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按上述方式进行配置后，我们便不需要使用delay去提交任务，而是一到执行时间celery便会自动执行</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;celery的高级使用&quot;&gt;&lt;a href=&quot;#celery的高级使用&quot; class=&quot;headerlink&quot; title=&quot;celery的高级使用&quot;&gt;&lt;/a&gt;celery的高级使用&lt;/h2&gt;&lt;p&gt;前面两篇博客主要讲的是celery的基本使用方式以及常用的目录结构。</summary>
      
    
    
    
    <category term="celery学习" scheme="https://a744740454.github.io/categories/celery%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="celery" scheme="https://a744740454.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>celery多任务结构</title>
    <link href="https://a744740454.github.io/2021/01/20/celery/celery%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%BB%93%E6%9E%84/"/>
    <id>https://a744740454.github.io/2021/01/20/celery/celery%E5%A4%9A%E4%BB%BB%E5%8A%A1%E7%BB%93%E6%9E%84/</id>
    <published>2021-01-20T08:51:54.755Z</published>
    <updated>2021-01-21T04:18:22.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery多任务结构"><a href="#celery多任务结构" class="headerlink" title="celery多任务结构"></a>celery多任务结构</h2><p>上一篇博客我们简单的介绍了celery的简单使用，但是为了方便管理，我们一般不采用单文件的形式去使用celery，而是采用包的形式去管理clery任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">celery多任务结构</span><br><span class="line"></span><br><span class="line">project <span class="comment">#项目根目录</span></span><br><span class="line">    ├── celery_task  <span class="comment"># celery包</span></span><br><span class="line">    │   ├── __init__.py <span class="comment"># 包文件</span></span><br><span class="line">    │   ├── celery.py   <span class="comment"># celery连接和配置相关文件，且名字必须叫celery.py</span></span><br><span class="line">    │   └── tasks.py    <span class="comment"># 所有任务函数</span></span><br><span class="line">    ├── add_task.py  <span class="comment"># 添加任务</span></span><br><span class="line">    └── get_result.py   <span class="comment"># 获取结果</span></span><br></pre></td></tr></table></figure><h3 id="celery-py"><a href="#celery-py" class="headerlink" title="celery.py"></a>celery.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该文件一般就用于实例化获得celery对象，以及进行配置</span></span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span></span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span></span><br><span class="line">app = Celery(broker=broker, backend=backend, include=[<span class="string">&#x27;celery_task.tasks&#x27;</span>])</span><br><span class="line"></span><br><span class="line">ps:include参数的内容写的是celery任务的文件位置，可以填写多个</span><br></pre></td></tr></table></figure><h3 id="tasks-py"><a href="#tasks-py" class="headerlink" title="tasks.py"></a>tasks.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该文件用于存放任务</span></span><br><span class="line"><span class="keyword">from</span> .celery <span class="keyword">import</span> app</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    print(m)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    print(<span class="string">&#x27;n+m的结果：%s&#x27;</span> % (n + m))</span><br><span class="line">    <span class="keyword">return</span> n + m</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">low</span>(<span class="params">n, m</span>):</span></span><br><span class="line">    print(n)</span><br><span class="line">    print(m)</span><br><span class="line">    print(<span class="string">&#x27;n-m的结果：%s&#x27;</span> % (n - m))</span><br><span class="line">    <span class="keyword">return</span> n - m</span><br></pre></td></tr></table></figure><h3 id="add-task-py"><a href="#add-task-py" class="headerlink" title="add_task.py"></a>add_task.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该文件用于提交任务</span></span><br><span class="line"><span class="keyword">from</span> celery_task <span class="keyword">import</span> tasks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加立即执行任务</span></span><br><span class="line">t1 = tasks.add.delay(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">t2 = tasks.low.delay(<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">print(t1.<span class="built_in">id</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加延迟任务</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line">eta=datetime.utcnow() + timedelta(seconds=<span class="number">10</span>)</span><br><span class="line">tasks.low.apply_async(args=(<span class="number">200</span>, <span class="number">50</span>), eta=eta)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="get-result-py"><a href="#get-result-py" class="headerlink" title="get_result.py"></a>get_result.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#该文件用于获取特定任务的运行结果</span></span><br><span class="line"><span class="keyword">from</span> celery_task.celery <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> celery.result <span class="keyword">import</span> AsyncResult</span><br><span class="line"></span><br><span class="line"><span class="built_in">id</span> = <span class="string">&#x27;21325a40-9d32-44b5-a701-9a31cc3c74b5&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">async</span> = AsyncResult(<span class="built_in">id</span>=<span class="built_in">id</span>, app=app)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">async</span>.successful():</span><br><span class="line">        result = <span class="keyword">async</span>.get()</span><br><span class="line">        print(result)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.failed():</span><br><span class="line">        print(<span class="string">&#x27;任务失败&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;PENDING&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务等待中被执行&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;RETRY&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务异常后正在重试&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">async</span>.status == <span class="string">&#x27;STARTED&#x27;</span>:</span><br><span class="line">        print(<span class="string">&#x27;任务已经开始被执行&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;celery多任务结构&quot;&gt;&lt;a href=&quot;#celery多任务结构&quot; class=&quot;headerlink&quot; title=&quot;celery多任务结构&quot;&gt;&lt;/a&gt;celery多任务结构&lt;/h2&gt;&lt;p&gt;上一篇博客我们简单的介绍了celery的简单使用，但是为了方便管理，</summary>
      
    
    
    
    <category term="celery学习" scheme="https://a744740454.github.io/categories/celery%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="celery" scheme="https://a744740454.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>celery简单使用</title>
    <link href="https://a744740454.github.io/2021/01/20/celery/celery%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/20/celery/celery%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-20T07:30:51.655Z</published>
    <updated>2021-01-21T04:18:25.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery是什么"><a href="#celery是什么" class="headerlink" title="celery是什么"></a>celery是什么</h2><p>Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统</p><p>专注于实时处理的异步任务队列</p><p>同时也支持任务调度</p><h2 id="celery的工作流程"><a href="#celery的工作流程" class="headerlink" title="celery的工作流程"></a>celery的工作流程</h2><p>1.从消息中间件中取出任务</p><p>2.在任务执行单元中执行任务</p><p>3.将任务执行的结果进行存储</p><p>celery本身不提供消息中间件以及存储任务，但是可以简单的集合第三方提供的服务。我们一般可以选择redis作为执行任务的第三方程序</p><h2 id="celery简单使用"><a href="#celery简单使用" class="headerlink" title="celery简单使用"></a>celery简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装</span><br><span class="line">pip install celery</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入后实例化获得一个对象</span><br><span class="line">cel_obj = celery.Celery() <span class="comment">#这里面有很多参数简单的说几个必要的</span></span><br><span class="line">参数:</span><br><span class="line">    main     <span class="comment">#任务名</span></span><br><span class="line">    backend  <span class="comment">#存放数据结果的位置</span></span><br><span class="line">    broker   <span class="comment">#存放任务的位置</span></span><br><span class="line"></span><br><span class="line">实例:</span><br><span class="line"><span class="keyword">import</span> celery</span><br><span class="line">backend = <span class="string">&#x27;redis://127.0.0.1:6379/1&#x27;</span> <span class="comment">#存放结果的位置</span></span><br><span class="line">broker = <span class="string">&#x27;redis://127.0.0.1:6379/2&#x27;</span> <span class="comment">#存放任务的位置</span></span><br><span class="line">cel_obj = celery.Celery(<span class="string">&#x27;test&#x27;</span>,backend=backend,broker=broker)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用装饰器的方法将下面的任务管理起来</span></span><br><span class="line"><span class="meta">@cel_obj.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a,b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在终端中输入命令启动celery服务</span><br><span class="line">celery -A 你celery实例化的那个文件 worker --loglevel=info</span><br><span class="line">eg:</span><br><span class="line">celery -A celery_study worker --loglevel=info</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>接下来你只要对那些被管理的命令使用delay()方法，这些任务就会被提交到，产生的结果也会放到对应位置</span><br><span class="line"><span class="keyword">from</span> celery_study <span class="keyword">import</span> test</span><br><span class="line">test.delay(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#提交test任务</span></span><br><span class="line"> </span><br><span class="line">ps:windos上若启动celery服务出错可以先安装eventlet,然后在命令后添加一个-p参数使用</span><br><span class="line">pip3 install eventlet</span><br><span class="line">celery worker -A celery_task -l info -P eventlet</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;celery是什么&quot;&gt;&lt;a href=&quot;#celery是什么&quot; class=&quot;headerlink&quot; title=&quot;celery是什么&quot;&gt;&lt;/a&gt;celery是什么&lt;/h2&gt;&lt;p&gt;Celery是一个简单、灵活且可靠的，处理大量消息的分布式系统&lt;/p&gt;
&lt;p&gt;专注于</summary>
      
    
    
    
    <category term="celery学习" scheme="https://a744740454.github.io/categories/celery%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="celery" scheme="https://a744740454.github.io/tags/celery/"/>
    
  </entry>
  
  <entry>
    <title>python后端项目上线</title>
    <link href="https://a744740454.github.io/2021/01/19/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/python%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"/>
    <id>https://a744740454.github.io/2021/01/19/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/python%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/</id>
    <published>2021-01-19T11:03:20.998Z</published>
    <updated>2021-01-19T11:42:37.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="后端项目上线"><a href="#后端项目上线" class="headerlink" title="后端项目上线"></a>后端项目上线</h2><p>python的后端上线由于操作还是比较繁琐的，因此我们把他单独拉出来讲</p><h3 id="更换配置文件"><a href="#更换配置文件" class="headerlink" title="更换配置文件"></a>更换配置文件</h3><p>在此之前我们一直使用的都是测试的配置文件，上线前我们需要改成上线的配置文件，并修改几个文件</p><p><strong>prod.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭测试环境</span></span><br><span class="line">DEBUG = <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改成你的公网ip地址</span></span><br><span class="line">ALLOWED_HOSTS = [</span><br><span class="line">    <span class="string">&#x27;39.99.192.127&#x27;</span>  </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许跨域</span></span><br><span class="line">CORS_ORIGIN_ALLOW_ALL = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#支付宝的回调的前后端接口地址</span></span><br><span class="line">BASE_URL = <span class="string">&#x27;http://39.99.192.127:8000&#x27;</span></span><br><span class="line">LUFFY_URL = <span class="string">&#x27;http://39.99.192.127:80&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>wsgi.py 、manage_prod.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改成上线的配置文件</span></span><br><span class="line">os.environ.setdefault(<span class="string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="string">&#x27;luffyapi.settings.prod&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="项目需要的模块进行导出"><a href="#项目需要的模块进行导出" class="headerlink" title="项目需要的模块进行导出"></a>项目需要的模块进行导出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#命令</span><br><span class="line">pip3 freeze &gt; requirement.txt</span><br><span class="line"></span><br><span class="line">ps:如果使用了xadmin需要进行处理</span><br><span class="line">xadmin&#x3D;&#x3D;2.0.1</span><br><span class="line">替换为</span><br><span class="line">https:&#x2F;&#x2F;codeload.github.com&#x2F;sshwsfc&#x2F;xadmin&#x2F;zip&#x2F;django2</span><br></pre></td></tr></table></figure><p>进行上述操作后将项目上传至git即可，接下来我们处理我们的线上环境即可</p><h3 id="项目使用虚拟环境"><a href="#项目使用虚拟环境" class="headerlink" title="项目使用虚拟环境"></a>项目使用虚拟环境</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">使用虚拟环境之前我们需要将上传到git的项目拉去下来到指定目录</span><br><span class="line">我这边拉取的项目路径是 /home/project</span><br><span class="line">git clone git地址</span><br><span class="line"></span><br><span class="line">项目之前已经安装了虚拟环境，这次我们直接启用即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建虚拟环境并使用</span></span><br><span class="line">mkvirtualenv luffy</span><br><span class="line">workon luff</span><br><span class="line"></span><br><span class="line"><span class="comment">#安装项目所需要的模块</span></span><br><span class="line">cd /home/project/luffyapi</span><br><span class="line">pip install -r requirement.txt</span><br><span class="line"></span><br><span class="line"><span class="comment">#在虚拟环境中安装uwsgi</span></span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure><h3 id="uwsgi配置"><a href="#uwsgi配置" class="headerlink" title="uwsgi配置"></a>uwsgi配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">在项目根目录的luffyapi这个文件夹下我们新建一个luffyapi.xml的配置文件，到时候我们启动uwsgi需要使用这个配置文件</span><br><span class="line">vim luffyapi.xml </span><br><span class="line">输入</span><br><span class="line">&lt;uwsgi&gt;    </span><br><span class="line">   &lt;socket&gt;127.0.0.1:8808&lt;&#x2F;socket&gt; &lt;!-- 内部端口，自定义,后面配置nginx的配置文件时需要用到 --&gt; </span><br><span class="line">   &lt;chdir&gt;&#x2F;home&#x2F;project&#x2F;luffyapi&#x2F;&lt;&#x2F;chdir&gt; &lt;!-- 项目路径 --&gt;            </span><br><span class="line">   &lt;module&gt;luffyapi.wsgi&lt;&#x2F;module&gt;  &lt;!-- luffyapi是项目根路径下的luffyapi,也就是小的luffyapi--&gt; </span><br><span class="line">   &lt;processes&gt;4&lt;&#x2F;processes&gt; &lt;!-- 进程数 --&gt;     </span><br><span class="line">   &lt;daemonize&gt;uwsgi.log&lt;&#x2F;daemonize&gt; &lt;!-- 日志文件 --&gt;</span><br><span class="line">&lt;&#x2F;uwsgi&gt;</span><br></pre></td></tr></table></figure><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">我们需要修改nginx的配置文件</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line">新增一个serve</span><br><span class="line">server &#123;</span><br><span class="line">listen <span class="number">8000</span>;</span><br><span class="line">server_name  <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>; <span class="comment"># 改为自己的域名，没域名修改为127.0.0.1:80</span></span><br><span class="line">charset utf-<span class="number">8</span>;</span><br><span class="line">location / &#123;</span><br><span class="line">include uwsgi_params;</span><br><span class="line">uwsgi_pass <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8808</span>;  <span class="comment"># 端口要和uwsgi里配置的一样</span></span><br><span class="line">uwsgi_param UWSGI_SCRIPT luffyapi.wsgi;  <span class="comment">#wsgi.py所在的目录名+.wsgi</span></span><br><span class="line">uwsgi_param UWSGI_CHDIR /home/project/luffyapi/; <span class="comment"># 项目路径</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#静态文件存储的路径python</span></span><br><span class="line">location /static &#123;</span><br><span class="line">            alias /home/project/luffyapi/luffyapi/static; <span class="comment">#你static文件夹的路径</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据库创建"><a href="#数据库创建" class="headerlink" title="数据库创建"></a>数据库创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">我们进入数据库</span><br><span class="line">mysql -uroot -pxxx</span><br><span class="line"></span><br><span class="line">创建库</span><br><span class="line">create database luffy default charset&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">创建账号，这里的账号要与项目配置文件中的账号密码保持一致</span><br><span class="line">grant all privileges on luffy.* to &#39;luffy&#39;@&#39;%&#39; identified by &#39;Luffy123?&#39;;</span><br><span class="line">grant all privileges on luffy.* to &#39;luffy&#39;@&#39;localhost&#39; identified by &#39;Luffy123?&#39;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="项目数据库表迁移"><a href="#项目数据库表迁移" class="headerlink" title="项目数据库表迁移"></a>项目数据库表迁移</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">我们来到项目的根路径下，即&#x2F;home&#x2F;project&#x2F;luffapi</span><br><span class="line"></span><br><span class="line">执行数据库迁移命令</span><br><span class="line">python manage_prod.py makemigrations</span><br><span class="line">python manage_prod.py migrate</span><br></pre></td></tr></table></figure><h3 id="xadmin-rest-framework等静态文件收集"><a href="#xadmin-rest-framework等静态文件收集" class="headerlink" title="xadmin,rest_framework等静态文件收集"></a>xadmin,rest_framework等静态文件收集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">这时我们若是直接上线，我们的后台管理等页面的样式是没有的，我们需要将他们收集到文件夹下</span><br><span class="line">这个文件夹我们设置在内部的luffapi下，取名为static</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建文件夹</span></span><br><span class="line">cd /home/project/luffapi/luffapi</span><br><span class="line">mkdir static</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line">vim settings/prod.py</span><br><span class="line">添加下述几句</span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATIC_ROOT = <span class="string">&#x27;/home/project/luffyapi/luffyapi/static&#x27;</span>  </span><br><span class="line">STATICFILES_DIRS = (os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用命令迁移静态文件</span></span><br><span class="line">python /home/project/luffyapi/manage_prod.py collectstatic</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx</span></span><br></pre></td></tr></table></figure><h3 id="启动uwsgi-重启nginx"><a href="#启动uwsgi-重启nginx" class="headerlink" title="启动uwsgi,重启nginx"></a>启动uwsgi,重启nginx</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uwsgi -x /home/project/luffyapi/luffyapi.xml <span class="comment">#你uwsgi配置文件的路径</span></span><br><span class="line"></span><br><span class="line">nginx -s reload <span class="comment">#重启nginx服务的命令</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;后端项目上线&quot;&gt;&lt;a href=&quot;#后端项目上线&quot; class=&quot;headerlink&quot; title=&quot;后端项目上线&quot;&gt;&lt;/a&gt;后端项目上线&lt;/h2&gt;&lt;p&gt;python的后端上线由于操作还是比较繁琐的，因此我们把他单独拉出来讲&lt;/p&gt;
&lt;h3 id=&quot;更换配置文件</summary>
      
    
    
    
    <category term="项目上线" scheme="https://a744740454.github.io/categories/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"/>
    
    
    <category term="linux" scheme="https://a744740454.github.io/tags/linux/"/>
    
    <category term="nginx" scheme="https://a744740454.github.io/tags/nginx/"/>
    
    <category term="python" scheme="https://a744740454.github.io/tags/python/"/>
    
    <category term="uwsgi" scheme="https://a744740454.github.io/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>python项目上线</title>
    <link href="https://a744740454.github.io/2021/01/18/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"/>
    <id>https://a744740454.github.io/2021/01/18/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/</id>
    <published>2021-01-18T11:57:08.651Z</published>
    <updated>2021-01-18T12:39:54.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目上线"><a href="#项目上线" class="headerlink" title="项目上线"></a>项目上线</h2><p>我们在上线项目之前我们需要先进行服务器的购买,可以选择阿里云的服务器,有余裕的小伙伴还可以申请一个域名，再此不一一赘述，只讲上线部分。</p><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>我们使用xshell去连接我们的服务器，选择阿里云服务器的直接去阿里的控制台查看自己的服务器ip即可</p><h3 id="更新软件包以及常用工具包"><a href="#更新软件包以及常用工具包" class="headerlink" title="更新软件包以及常用工具包"></a>更新软件包以及常用工具包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum update -y</span><br><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">yum install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel psmisc libffi-devel</span><br></pre></td></tr></table></figure><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">2）下载mysql57</span><br><span class="line">wget http:&#x2F;&#x2F;dev.mysql.com&#x2F;get&#x2F;mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line"></span><br><span class="line">3）安装mysql57</span><br><span class="line">yum -y install mysql57-community-release-el7-10.noarch.rpm</span><br><span class="line">yum -y install mysql-community-server</span><br><span class="line"></span><br><span class="line">4）启动mysql57并查看启动状态</span><br><span class="line">systemctl start mysqld.service</span><br><span class="line">systemctl status mysqld.service</span><br><span class="line"></span><br><span class="line">5）查看默认密码并登录</span><br><span class="line">grep &quot;password&quot; &#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">mysql -uroot -p</span><br><span class="line"></span><br><span class="line">6）修改密码</span><br><span class="line">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;new password&#39;;</span><br></pre></td></tr></table></figure><h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">2）下载redis-5.0.5</span><br><span class="line">wget http:&#x2F;&#x2F;download.redis.io&#x2F;releases&#x2F;redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line">tar -xf redis-5.0.5.tar.gz</span><br><span class="line"></span><br><span class="line">4）进入目标文件</span><br><span class="line">cd redis-5.0.5</span><br><span class="line"></span><br><span class="line">5）编译环境</span><br><span class="line">make&amp;&amp;make install</span><br><span class="line"></span><br><span class="line">6）复制环境到指定路径完成安装</span><br><span class="line">cp -r ~&#x2F;redis-5.0.5 &#x2F;usr&#x2F;local&#x2F;redis</span><br><span class="line"></span><br><span class="line">7）配置redis可以后台启动：修改下方内容</span><br><span class="line">vim &#x2F;usr&#x2F;local&#x2F;redis&#x2F;redis.conf</span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line">8）建立软连接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&#x2F;redis-server &#x2F;usr&#x2F;bin&#x2F;redis-server</span><br><span class="line">&gt;: ln -s &#x2F;usr&#x2F;local&#x2F;redis&#x2F;src&#x2F;redis-cli &#x2F;usr&#x2F;bin&#x2F;redis-cli</span><br><span class="line"></span><br><span class="line">9）后台运行redis</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;redis</span><br><span class="line">redis-server .&#x2F;redis.conf &amp;</span><br><span class="line"></span><br><span class="line">10）测试redis环境</span><br><span class="line">redis-cli</span><br><span class="line"></span><br><span class="line">11）关闭redis服务</span><br><span class="line">pkill -f redis -9</span><br></pre></td></tr></table></figure><h3 id="安装python3-6"><a href="#安装python3-6" class="headerlink" title="安装python3.6"></a>安装python3.6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">2）下载 或 上传 Python3.6.7</span><br><span class="line"># 服务器终端</span><br><span class="line">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.7&#x2F;Python-3.6.7.tar.xz</span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line">tar -xf Python-3.6.7.tar.xz</span><br><span class="line"></span><br><span class="line">4）进入目标文件</span><br><span class="line">cd Python-3.6.7</span><br><span class="line"></span><br><span class="line">5）配置安装路径：&#x2F;usr&#x2F;local&#x2F;python3</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;python3</span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 python3，pip3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3.6 &#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3.6 &#x2F;usr&#x2F;bin&#x2F;pip3</span><br></pre></td></tr></table></figure><h3 id="配置阿里源-阿里云服务器不用配置"><a href="#配置阿里源-阿里云服务器不用配置" class="headerlink" title="配置阿里源(阿里云服务器不用配置)"></a>配置阿里源(阿里云服务器不用配置)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1）创建pip配置路径</span><br><span class="line">mkdir ~&#x2F;.pip</span><br><span class="line"></span><br><span class="line">2）进入目录编辑配置文件：填入下方内容</span><br><span class="line">cd ~&#x2F;.pip &amp;&amp; vim pip.conf</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">index-url &#x3D; http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple</span><br><span class="line">[install]</span><br><span class="line">use-mirrors &#x3D;true</span><br><span class="line">mirrors &#x3D;http:&#x2F;&#x2F;pypi.douban.com&#x2F;simple&#x2F;</span><br><span class="line">trusted-host &#x3D;pypi.douban.com</span><br></pre></td></tr></table></figure><h3 id="安装uwsgi-虚拟环境还需要安装一次"><a href="#安装uwsgi-虚拟环境还需要安装一次" class="headerlink" title="安装uwsgi(虚拟环境还需要安装一次)"></a>安装uwsgi(虚拟环境还需要安装一次)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）在真实环境下安装</span><br><span class="line">pip3 install uwsgi</span><br><span class="line"></span><br><span class="line">2）建立软连接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;uwsgi &#x2F;usr&#x2F;bin&#x2F;uwsgi</span><br></pre></td></tr></table></figure><h3 id="安装虚拟环境"><a href="#安装虚拟环境" class="headerlink" title="安装虚拟环境"></a>安装虚拟环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1）安装依赖</span><br><span class="line">pip3 install virtualenv</span><br><span class="line">pip3 install virtualenvwrapper</span><br><span class="line"></span><br><span class="line">2）建立虚拟环境软连接</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;virtualenv &#x2F;usr&#x2F;bin&#x2F;virtualenv</span><br><span class="line"></span><br><span class="line">3）配置虚拟环境：填入下方内容</span><br><span class="line">vim ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">VIRTUALENVWRAPPER_PYTHON&#x3D;&#x2F;usr&#x2F;bin&#x2F;python3</span><br><span class="line">source &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line">4）更新配置文件内容</span><br><span class="line">source ~&#x2F;.bash_profile</span><br><span class="line"></span><br><span class="line">5）虚拟环境默认根目录：~&#x2F;.virtualenvs</span><br></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1）前往用户根目录</span><br><span class="line">cd ~</span><br><span class="line"></span><br><span class="line">2）下载nginx1.13.7</span><br><span class="line">wget http:&#x2F;&#x2F;nginx.org&#x2F;download&#x2F;nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line">3）解压安装包</span><br><span class="line">tar -xf nginx-1.13.7.tar.gz</span><br><span class="line"></span><br><span class="line">4）进入目标文件</span><br><span class="line">cd nginx-1.13.7</span><br><span class="line"></span><br><span class="line">5）配置安装路径：&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line">.&#x2F;configure --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;nginx</span><br><span class="line"></span><br><span class="line">6）编译并安装</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line">7）建立软连接：终端命令 nginx</span><br><span class="line">ln -s &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx &#x2F;usr&#x2F;bin&#x2F;nginx</span><br><span class="line"></span><br><span class="line">9）测试Nginx环境，服务器运行nginx，本地访问服务器ip</span><br><span class="line">nginx启动命令:nginx即可</span><br></pre></td></tr></table></figure><h3 id="Nginx常用命令"><a href="#Nginx常用命令" class="headerlink" title="Nginx常用命令"></a>Nginx常用命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1）启动</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">2）关闭nginx</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">3）重启nginx</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">4）查看端口，强行关闭</span><br><span class="line">ps -aux|grep nginx</span><br><span class="line">kill &lt;pid:进程编号&gt;</span><br></pre></td></tr></table></figure><h3 id="前端项目上线"><a href="#前端项目上线" class="headerlink" title="前端项目上线"></a>前端项目上线</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.首先我们进入我们的前端vue项目，将settings.js中的base_url修改成服务器的地址</span><br><span class="line">export default &#123;</span><br><span class="line">    base_url: &#39;xx.107.250.120:8000&#39;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2.然后执行命令</span><br><span class="line">npm run build</span><br><span class="line"></span><br><span class="line">3.然后你会发现我们在根目录下生成了一个dist文件夹，我们将这个文件夹压缩上传到服务器，没有安装lrzsz的需要安装否则无法上传</span><br><span class="line">yum install lrzsz</span><br><span class="line"></span><br><span class="line">4.我们解压这个文件夹</span><br><span class="line">unzip dist.zip</span><br><span class="line"></span><br><span class="line">5.去nginx进行配置</span><br><span class="line">cd &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf</span><br><span class="line">mv nginx.conf nginx.conf.bak</span><br><span class="line">vim nginx.conf</span><br><span class="line"></span><br><span class="line">6.填入下述内容</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application&#x2F;octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name  127.0.0.1; # 改为自己的域名，没域名修改为127.0.0.1:80</span><br><span class="line">        charset utf-8;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root &#x2F;home&#x2F;html; # html访问路径</span><br><span class="line">            index index.html; # html文件名称</span><br><span class="line">            try_files $uri $uri&#x2F; &#x2F;index.html; # 解决单页面应用刷新404问题</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">7.重启nginx</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目上线&quot;&gt;&lt;a href=&quot;#项目上线&quot; class=&quot;headerlink&quot; title=&quot;项目上线&quot;&gt;&lt;/a&gt;项目上线&lt;/h2&gt;&lt;p&gt;我们在上线项目之前我们需要先进行服务器的购买,可以选择阿里云的服务器,有余裕的小伙伴还可以申请一个域名，再此不一一赘述，只讲</summary>
      
    
    
    
    <category term="项目上线" scheme="https://a744740454.github.io/categories/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"/>
    
    
    <category term="linux" scheme="https://a744740454.github.io/tags/linux/"/>
    
    <category term="nginx" scheme="https://a744740454.github.io/tags/nginx/"/>
    
    <category term="python" scheme="https://a744740454.github.io/tags/python/"/>
    
    <category term="uwsgi" scheme="https://a744740454.github.io/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>集成支付宝作为第三方收款软件</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%9B%B8%E5%85%B3/%E4%BD%BF%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E4%BD%9C%E4%B8%BA%E7%AC%AC%E4%B8%89%E6%96%B9/</id>
    <published>2021-01-15T09:21:24.517Z</published>
    <updated>2021-01-18T01:16:06.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="支付宝官方文档"><a href="#支付宝官方文档" class="headerlink" title="支付宝官方文档"></a>支付宝官方文档</h2><p>链接:<a href="https://opendocs.alipay.com/open/270/105898/">https://opendocs.alipay.com/open/270/105898/</a></p><h2 id="步骤简介"><a href="#步骤简介" class="headerlink" title="步骤简介"></a>步骤简介</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.进行实名认证</span><br><span class="line"></span><br><span class="line">2.下载开发助手</span><br><span class="line">链接:https:&#x2F;&#x2F;opendocs.alipay.com&#x2F;open&#x2F;291&#x2F;introduce</span><br><span class="line"></span><br><span class="line">3.利用开发助手生成RSA2应用密钥以及应用公钥</span><br><span class="line"></span><br><span class="line">4.支付宝开放平台--&gt;沙箱环境--&gt;沙箱应用--&gt;RSA2密钥设置--&gt;获得支付宝公钥</span><br><span class="line"></span><br><span class="line">5.下载沙箱版支付宝(测试用)</span><br><span class="line">链接:https:&#x2F;&#x2F;openhome.alipay.com&#x2F;platform&#x2F;appDaily.htm?tab&#x3D;tool</span><br><span class="line"></span><br><span class="line">6.在沙箱环境中的沙箱账号中获得买家账号以及卖家账号</span><br><span class="line">链接:https:&#x2F;&#x2F;openhome.alipay.com&#x2F;platform&#x2F;appDaily.htm?tab&#x3D;account</span><br><span class="line"></span><br><span class="line">7.由于支付宝没有提供python对应的sdk，因此我们使用第三方的支付宝开源框架alipay</span><br><span class="line">git地址:https:&#x2F;&#x2F;github.com&#x2F;fzlee&#x2F;alipay</span><br><span class="line">使用:pip install python-alipay-sdk --upgrade</span><br><span class="line"></span><br><span class="line">8.在自己的应用中进行配置即可</span><br></pre></td></tr></table></figure><h2 id="详细使用教程"><a href="#详细使用教程" class="headerlink" title="详细使用教程"></a>详细使用教程</h2><p>支付宝的调用流程图如下</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/%E6%94%AF%E4%BB%98%E5%AE%9D%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.png"></p><h3 id="支付宝调用流程"><a href="#支付宝调用流程" class="headerlink" title="支付宝调用流程"></a>支付宝调用流程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.前台点击支付按钮</span><br><span class="line">2.往后台发送post请求,后台获得商品等信息</span><br><span class="line">3.使用alipay往支付宝的接口发送请求，携带前端的返回地址以及后端的回调接口地址。</span><br><span class="line">4.获得支付宝的付款页面地址返回给前端</span><br><span class="line">5.前端跳转到支付宝的支付页面接口</span><br><span class="line">6.用户输入账号密码后跳转回原先的商户页面,前台往后台发送一个get请求,返回订单号,可以通过该订单号去查询订单情况</span><br><span class="line">7.支付宝往我们后端接口地址发送一个异步的post请求</span><br><span class="line">8.后端进行数据库修改等操作</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">libs                                    <span class="comment"># 第三方模块都放这个包下</span></span><br><span class="line">    ├── iPay  <span class="comment"># aliapy二次封装包</span></span><br><span class="line">    │   ├── __init__.py <span class="comment"># 包文件</span></span><br><span class="line">    │   ├── pem<span class="comment"># 公钥私钥文件夹</span></span><br><span class="line">    │   │   ├── alipay_public_key.pem<span class="comment"># 支付宝公钥文件</span></span><br><span class="line">    │   │   ├── app_private_key.pem<span class="comment"># 应用私钥文件</span></span><br><span class="line">    │   ├── pay.py<span class="comment"># 支付文件</span></span><br><span class="line">    └── └── settings.py </span><br></pre></td></tr></table></figure><h3 id="alipay-public-key-pem"><a href="#alipay-public-key-pem" class="headerlink" title="alipay_public_key.pem"></a>alipay_public_key.pem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">支付宝公钥</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><h3 id="app-private-key-pem"><a href="#app-private-key-pem" class="headerlink" title="app_private_key.pem"></a>app_private_key.pem</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">应用私钥</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h3 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 应用私钥</span></span><br><span class="line">APP_PRIVATE_KEY_STRING = <span class="built_in">open</span>(os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&#x27;pem&#x27;</span>, <span class="string">&#x27;app_private_key.pem&#x27;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付宝公钥</span></span><br><span class="line">ALIPAY_PUBLIC_KEY_STRING = <span class="built_in">open</span>(os.path.join(os.path.dirname(os.path.abspath(__file__)), <span class="string">&#x27;pem&#x27;</span>, <span class="string">&#x27;alipay_public_key.pem&#x27;</span>)).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用ID</span></span><br><span class="line">APP_ID = <span class="string">&#x27;2016093000631831&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密方式</span></span><br><span class="line">SIGN = <span class="string">&#x27;RSA2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否是支付宝测试环境(沙箱环境)，如果采用真是支付宝环境，配置False</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付网关</span></span><br><span class="line">GATEWAY = <span class="string">&#x27;https://openapi.alipaydev.com/gateway.do&#x27;</span> <span class="keyword">if</span> DEBUG <span class="keyword">else</span> <span class="string">&#x27;https://openapi.alipay.com/gateway.do&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="pay-py"><a href="#pay-py" class="headerlink" title="pay.py"></a>pay.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay <span class="keyword">import</span> AliPay</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付对象</span></span><br><span class="line">alipay = AliPay(</span><br><span class="line">    appid=settings.APP_ID,</span><br><span class="line">    app_notify_url=<span class="literal">None</span>,</span><br><span class="line">    app_private_key_string=settings.APP_PRIVATE_KEY_STRING,</span><br><span class="line">    alipay_public_key_string=settings.ALIPAY_PUBLIC_KEY_STRING,</span><br><span class="line">    sign_type=settings.SIGN,</span><br><span class="line">    debug=settings.DEBUG</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 支付网关</span></span><br><span class="line">gateway = settings.GATEWAY</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;支付宝官方文档&quot;&gt;&lt;a href=&quot;#支付宝官方文档&quot; class=&quot;headerlink&quot; title=&quot;支付宝官方文档&quot;&gt;&lt;/a&gt;支付宝官方文档&lt;/h2&gt;&lt;p&gt;链接:&lt;a href=&quot;https://opendocs.alipay.com/open/270/1</summary>
      
    
    
    
    <category term="第三方" scheme="https://a744740454.github.io/categories/%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    
    
    <category term="第三方" scheme="https://a744740454.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    
    <category term="支付宝" scheme="https://a744740454.github.io/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
  </entry>
  
  <entry>
    <title>爬虫识别验证码</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</id>
    <published>2021-01-15T00:47:58.198Z</published>
    <updated>2021-01-15T12:30:49.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图片验证码识别"><a href="#图片验证码识别" class="headerlink" title="图片验证码识别"></a>图片验证码识别</h2><p>先安装pillow模块</p><p>​    pip install pillow</p><p>使用打码云网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> version_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_api</span>(<span class="params">uname, pwd, img</span>):</span></span><br><span class="line">    img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    buffered = BytesIO()</span><br><span class="line">    img.save(buffered, <span class="built_in">format</span>=<span class="string">&quot;JPEG&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> version_info.major &gt;= <span class="number">3</span>:</span><br><span class="line">        b64 = <span class="built_in">str</span>(base64.b64encode(buffered.getvalue()), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b64 = <span class="built_in">str</span>(base64.b64encode(buffered.getvalue()))</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>: uname, <span class="string">&quot;password&quot;</span>: pwd,<span class="string">&#x27;typeid&#x27;</span>:<span class="number">7</span>, <span class="string">&quot;image&quot;</span>: b64&#125;</span><br><span class="line">    result = json.loads(requests.post(<span class="string">&quot;http://api.ttshitu.com/base64&quot;</span>, json=data).text)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;result&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&quot;message&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    img_path = <span class="string">&quot;test.jpg&quot;</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">    result = base64_api(uname=<span class="string">&#x27;a744740454&#x27;</span>, pwd=<span class="string">&#x27;744740454&#x27;</span>, img=img)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图片验证码识别&quot;&gt;&lt;a href=&quot;#图片验证码识别&quot; class=&quot;headerlink&quot; title=&quot;图片验证码识别&quot;&gt;&lt;/a&gt;图片验证码识别&lt;/h2&gt;&lt;p&gt;先安装pillow模块&lt;/p&gt;
&lt;p&gt;​    pip install pillow&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="第三方" scheme="https://a744740454.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>爬虫代理的相关内容</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86/</id>
    <published>2021-01-15T00:47:58.189Z</published>
    <updated>2021-01-15T12:30:40.159Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫代理"><a href="#爬虫代理" class="headerlink" title="爬虫代理"></a>爬虫代理</h2><p>代理简单的说就是应对反扒手段的一种方式</p><h3 id="代理的含义："><a href="#代理的含义：" class="headerlink" title="代理的含义："></a>代理的含义：</h3><p>​    不是本地的服务器</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>​    隐藏自身的真是IP</p><h3 id="代理ip的类型"><a href="#代理ip的类型" class="headerlink" title="代理ip的类型"></a>代理ip的类型</h3><p>​    http: 对应到与http协议对应的url中</p><p>​    https:应用到https对应的url中</p><h3 id="代理ip的匿名度"><a href="#代理ip的匿名度" class="headerlink" title="代理ip的匿名度"></a>代理ip的匿名度</h3><p>​    透明：服务器知道使用了代理，且知道真实的ip</p><p>​    匿名：服务器知道使用了代理，但不知道真实的ip</p><p>​    高匿：服务器不知道使用了代理</p><h3 id="request模块使用代理的方式"><a href="#request模块使用代理的方式" class="headerlink" title="request模块使用代理的方式"></a>request模块使用代理的方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies &#x3D; &#123;</span><br><span class="line">  &#39;http&#39;: &#39;http:&#x2F;&#x2F;172.18.101.221:3182&#39;,</span><br><span class="line">  &#39;https&#39;: &#39;http:&#x2F;&#x2F;172.18.101.221:1080&#39;,</span><br><span class="line">&#125;</span><br><span class="line">proxies &#x3D; proxies</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;爬虫代理&quot;&gt;&lt;a href=&quot;#爬虫代理&quot; class=&quot;headerlink&quot; title=&quot;爬虫代理&quot;&gt;&lt;/a&gt;爬虫代理&lt;/h2&gt;&lt;p&gt;代理简单的说就是应对反扒手段的一种方式&lt;/p&gt;
&lt;h3 id=&quot;代理的含义：&quot;&gt;&lt;a href=&quot;#代理的含义：&quot; clas</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="代理" scheme="https://a744740454.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>xpath模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/xpath%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/xpath%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.181Z</published>
    <updated>2021-01-15T04:06:46.055Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xpath模块"><a href="#xpath模块" class="headerlink" title="xpath模块"></a>xpath模块</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">模块下载</span><br><span class="line">pip install lxml</span><br><span class="line"></span><br><span class="line">模块导入</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="number">1.</span>创建一个etree对象</span><br><span class="line"></span><br><span class="line">    <span class="comment">#1.加载本地的文本,并获得一个对象</span></span><br><span class="line">tree = etree.parse(filepath)  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#2.加载网络上获取的html内容，并获得一个对象</span></span><br><span class="line">    tree = etree.HTML(<span class="string">&#x27;从网络上获取的html内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过xpath方法获得我们需要的内容</span><br><span class="line"></span><br><span class="line">    <span class="comment">#通过xpath获得需要的标签</span></span><br><span class="line">    tree.xpath(<span class="string">&#x27;标签&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#通过xpath获得需要的标签内的属性 ，一个/代表一个层级，开头的//一个代表根目录，一个代表所有内容</span></span><br><span class="line">    tree.xpath(<span class="string">&#x27;//标签[@属性 = &quot;属性的内容&quot;]&#x27;</span>)</span><br><span class="line">    eg：tree.xpath(&#x27;//div[@class=&quot;box1&quot;]&#x27;)返回所有的class = box1的div对象列表</span><br><span class="line">    对标签进行层级查找</span><br><span class="line">    tree.xpath(&#x27;//标签[@属性 = &quot;属性的内容&quot;]/p[3]&#x27;)返回所有的class = box1的div对象内的所有p标签，并找出第三个p标签对象</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回文本 在需要返回文本的标签后加text() 注意返回的是列表</span></span><br><span class="line">    xpath(<span class="string">&#x27;//p/text()&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#取得属性 /@属性名</span></span><br><span class="line">    eg:xpath(<span class="string">&#x27;//div/img/@src&#x27;</span>) 获得div下的img标签的src</span><br></pre></td></tr></table></figure><h4 id="解析本地html报错"><a href="#解析本地html报错" class="headerlink" title="解析本地html报错"></a>解析本地html报错</h4><p>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: link line 45 and head, line 89, column 8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自己创建解析器</span></span><br><span class="line">parser = etree.HTMLParser(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;practice.html&#x27;</span>,parser=parser)</span><br></pre></td></tr></table></figure><h4 id="案例一：58同城二手房源爬取"><a href="#案例一：58同城二手房源爬取" class="headerlink" title="案例一：58同城二手房源爬取"></a>案例一：58同城二手房源爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">page_text = requests.get(<span class="string">&#x27;https://sh.58.com/ershoufang/?utm_source=market&amp;spm=u-2d2yxv86y3v43nkddh1.BDPCPZ_BT&amp;PGTID=0d100000-0000-2756-e0ba-4be2528ff316&amp;ClickID=2&#x27;</span>,headers=headers).text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(page_text)</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul[@class=&quot;house-list-wrap&quot;]/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    text = li.xpath(<span class="string">&#x27;./div[2]/h2/a/text()&#x27;</span>)</span><br><span class="line">    print(text)</span><br><span class="line">print(<span class="string">&#x27;over&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="爬虫爬取数据时中文乱码"><a href="#爬虫爬取数据时中文乱码" class="headerlink" title="爬虫爬取数据时中文乱码"></a>爬虫爬取数据时中文乱码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决方案一:响应的时候对数据进行编码</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://pic.netbian.com/4kdongman/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">解决方案二:对乱码的数据进行解码在进行编码</span><br><span class="line">    title = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = title.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="案例二：爬取网站图片"><a href="#案例二：爬取网站图片" class="headerlink" title="案例二：爬取网站图片"></a>案例二：爬取网站图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://pic.netbian.com/4kdongman/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">page_text = response.text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line"></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line">print(li_list)</span><br><span class="line">url = <span class="string">&#x27;http://pic.netbian.com&#x27;</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    img_src = li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = title.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;动漫&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;动漫&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_src_sure = url + img_src</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;title&#125;</span>爬取完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img = requests.get(img_src_sure,headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;动漫/<span class="subst">&#123;title&#125;</span>.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;xpath模块&quot;&gt;&lt;a href=&quot;#xpath模块&quot; class=&quot;headerlink&quot; title=&quot;xpath模块&quot;&gt;&lt;/a&gt;xpath模块&lt;/h3&gt;&lt;h4 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="xpath" scheme="https://a744740454.github.io/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>selenium模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/selenium%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/selenium%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.172Z</published>
    <updated>2021-01-15T12:32:15.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="selenium模块的使用"><a href="#selenium模块的使用" class="headerlink" title="selenium模块的使用"></a>selenium模块的使用</h2><p>selenium模块的作用是自动化控制浏览器，我们也可以通过控制浏览器的行为去进行数据的爬取</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装selenium模块</span><br><span class="line">pip3 install selenium</span><br><span class="line"><span class="number">2.</span>找到与你浏览器对应的版本的驱动，下载谷歌驱动</span><br><span class="line"><span class="comment">#驱动下载地址</span></span><br><span class="line">https://npm.taobao.org/mirrors/chromedriver/</span><br><span class="line"><span class="number">3.</span>下载好驱动以后放到你的程序中即可</span><br></pre></td></tr></table></figure><h3 id="selenium基本使用"><a href="#selenium基本使用" class="headerlink" title="selenium基本使用"></a>selenium基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment">#导入一个加载驱动的模块</span></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://www.pixiv.net/users/30330894/following&#x27;</span></span><br><span class="line">chrome = webdriver.Chrome(executable_path=<span class="string">&#x27;chromedriver.exe&#x27;</span>) <span class="comment">#加载谷歌驱动</span></span><br><span class="line">chrome.get(url) <span class="comment">#向url发起请求</span></span><br><span class="line"></span><br><span class="line">chrome.page_source <span class="comment">#获得页面数据,可以使用lxml将获得的页面数据解析</span></span><br><span class="line"></span><br><span class="line">  .quit退出浏览器，并且进关闭ChromeDriver进程</span><br><span class="line">      .close若是在只有当前页面的情况下会关闭整个浏览器，但是后台的ChromeDriver依然会运行</span><br></pre></td></tr></table></figure><h3 id="selenium确定标签位置的方式"><a href="#selenium确定标签位置的方式" class="headerlink" title="selenium确定标签位置的方式"></a>selenium确定标签位置的方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过xpath定位</span><br><span class="line">    .find_element_by_xpath(<span class="string">&quot;xpath&quot;</span>) <span class="comment">#使用该方法的话可以通过xpath找到需要的元素，返回单个元素</span></span><br><span class="line">    .find_elements_by_xpath(<span class="string">&quot;xpath&quot;</span>) <span class="comment">#找到某些标签，返回的是一个列表 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过<span class="built_in">id</span>定位</span><br><span class="line">    .find_element_by_id()</span><br><span class="line">    .find_element_by_id()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过name定位</span><br><span class="line">.find_element_by_name()</span><br><span class="line">    .find_elements_by_name()</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>通过<span class="class"><span class="keyword">class</span>定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_class_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_class_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">5.通过标签名称定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_tag_name</span>(<span class="params">self, name</span>) </span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_tag_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6.通过<span class="title">link</span>定位： </span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_link_text</span>(<span class="params">self, link_text</span>)</span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_link_text</span>(<span class="params">self, link_text</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">7.通过<span class="title">css</span>选择器定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_css_selector</span>(<span class="params">self, css_selector）</span></span></span><br><span class="line"><span class="class"><span class="params">    .find_elements_by_css_selector(<span class="params">self, css_selector）</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="params">                                  </span></span></span></span><br></pre></td></tr></table></figure><h3 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h3><p>当你找到标签后可以对其进行一定的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span>确定某个标签在浏览器的某个位置</span><br><span class="line">.location </span><br><span class="line">eg:res = chrome.find_elements_by_xpath(<span class="string">&#x27;/html/body/div/div[2]/div[1]/div/a[1]&#x27;</span>)[<span class="number">0</span>].location </span><br><span class="line">    &gt;&gt;&gt;&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">72</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>click操作</span><br><span class="line">Chrome.click()</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>clear</span><br><span class="line">    chrome.clear()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>send_keys()    </span><br><span class="line">chrome.send_keys(data)<span class="comment">#往某个标签内输入值</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>text</span><br><span class="line">chrome.text <span class="comment">#获得标签内文本的值</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>get_attribute()</span><br><span class="line">element.get_attribute(value)<span class="comment">#获得属性值</span></span><br></pre></td></tr></table></figure><h3 id="selenium无头浏览器操作"><a href="#selenium无头浏览器操作" class="headerlink" title="selenium无头浏览器操作"></a>selenium无头浏览器操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">self.chrome = webdriver.Chrome(chrome_options=chrome_options) <span class="comment">#添加该属性</span></span><br></pre></td></tr></table></figure><h3 id="selenium规避被检测"><a href="#selenium规避被检测" class="headerlink" title="selenium规避被检测"></a>selenium规避被检测</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">self.chrome = webdriver.Chrome(options=option)</span><br></pre></td></tr></table></figure><h3 id="selenium切换iframe"><a href="#selenium切换iframe" class="headerlink" title="selenium切换iframe"></a>selenium切换iframe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">有些网页会使用iframe做到在页面中嵌套页面的情况，遇到这种情况我们是没有办法直接获得子页面的数据的，这种时候我们需要先进行切换，然后在获取数据</span><br><span class="line"><span class="number">1.</span>有<span class="built_in">id</span>，并且唯一，直接写<span class="built_in">id</span></span><br><span class="line">driver.switch_to_frame(<span class="string">&quot;x-URS-iframe&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;x-URS-iframe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有name，并且唯一，直接写name</span><br><span class="line">driver.switch_to_frame(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>无<span class="built_in">id</span>，无name,先定位iframe元素</span><br><span class="line">iframe = driver.find_elements_by_tag_name(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">driver.switch_to_frame(iframe)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>使用索引的方式直接获取iframe</span><br><span class="line">driver.switch_to_frame(<span class="number">0</span>)<span class="comment">#获取第一个iframe对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;selenium模块的使用&quot;&gt;&lt;a href=&quot;#selenium模块的使用&quot; class=&quot;headerlink&quot; title=&quot;selenium模块的使用&quot;&gt;&lt;/a&gt;selenium模块的使用&lt;/h2&gt;&lt;p&gt;selenium模块的作用是自动化控制浏览器，我们也</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://a744740454.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>scrapy的简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/scrapy/scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/scrapy/scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.162Z</published>
    <updated>2021-02-02T03:10:35.178Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h2><h3 id="windos下scrapy框架的安装"><a href="#windos下scrapy框架的安装" class="headerlink" title="windos下scrapy框架的安装"></a>windos下scrapy框架的安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>pip install wheel</span><br><span class="line"><span class="number">2.</span>下载twisted 下载地址:https://www.lfd.uci.edu/~gohlke/pythonlibs/ <span class="comment">#根据自己系统版本下载</span></span><br><span class="line"><span class="number">3.</span>安装twisted cd进入你下载twisted的包中 pip install Twisted-<span class="number">20.3</span><span class="number">.0</span>-cp38-cp38-win32.whl</span><br><span class="line"><span class="number">4.</span>pip install pywin32</span><br><span class="line"><span class="number">5.</span>pip install scrapy</span><br><span class="line"></span><br><span class="line">ps:若提示error: Microsoft Visual C++ <span class="number">14.0</span> <span class="keyword">or</span> greater <span class="keyword">is</span> required. Get it <span class="keyword">with</span> “Microsoft C++ Build Tools“去安装对应的c++ <span class="number">14.0</span>的工具包即可，下面有链接</span><br><span class="line">        </span><br><span class="line">链接：https://pan.baidu.com/s/1T77yLvbnnUjQaT5fBIDCqQ </span><br><span class="line">提取码：1rx9 </span><br></pre></td></tr></table></figure><h3 id="scrapy的简单使用"><a href="#scrapy的简单使用" class="headerlink" title="scrapy的简单使用"></a>scrapy的简单使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个工程 scrapy startproject 项目名称</span><br><span class="line"><span class="number">2.</span>cd进入项目 创建爬虫文件 scrapy genspider 文件名 网址</span><br><span class="line"><span class="number">3.</span>工程执行 scrapy crawl 文件名</span><br><span class="line"><span class="comment">#新建的爬虫文件内的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span> <span class="comment"># 文件名</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>] <span class="comment"># 允许爬取哪个域名，一般注释</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>] <span class="comment"># 运行程序时哪些网址被爬取</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>在settings 中将 ROBOTSTXT_OBEY改为<span class="literal">False</span></span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span> 这样的话只会将错误信息打印</span><br></pre></td></tr></table></figure><h3 id="scrapy框架的基本架构"><a href="#scrapy框架的基本架构" class="headerlink" title="scrapy框架的基本架构"></a>scrapy框架的基本架构</h3><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210202091601772.png" alt="image-20210202091601772"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">五大组件:</span><br><span class="line">    spiders:爬虫程序</span><br><span class="line">    engine:引擎，用于控制各个组件之间的沟通</span><br><span class="line">    pipline:持久化操作，爬取成功后入库</span><br><span class="line">    scheduler:调度器，调度谁先爬，谁后爬，同时达到去重的效果</span><br><span class="line">    downloader:下载器，真正爬取数据的</span><br><span class="line">两大中间件:</span><br><span class="line">爬虫中间件:介于爬虫程序和引擎之间，一般不写</span><br><span class="line">下载中间件:介于下载器和引擎之间</span><br></pre></td></tr></table></figure><h3 id="scrapy目录"><a href="#scrapy目录" class="headerlink" title="scrapy目录"></a>scrapy目录</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">firstscrapy        <span class="comment">#项目名字</span></span><br><span class="line">    firstscrapy    <span class="comment">#文件夹</span></span><br><span class="line">        spiders    <span class="comment">#爬虫文件存放目录</span></span><br><span class="line">            cnblogcrawler.py <span class="comment">#爬虫文件</span></span><br><span class="line">        items.py   <span class="comment">#写一些类，对比django的models</span></span><br><span class="line">        middlewares.py <span class="comment">#中间件</span></span><br><span class="line">        pipelines.py  <span class="comment">#持久化相关操作位置</span></span><br><span class="line">        settings.py   <span class="comment">#配置文件</span></span><br><span class="line">   scrapy.cfg    <span class="comment">#上线相关</span></span><br></pre></td></tr></table></figure><h3 id="使用文件执行运行命令"><a href="#使用文件执行运行命令" class="headerlink" title="使用文件执行运行命令"></a>使用文件执行运行命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">现在我们每次执行爬虫程序都需要使用命令，较为麻烦，我们可以新建一个py文件，然后在文件内写上对应的命令，下次直接执行文件即可。</span><br><span class="line"></span><br><span class="line"><span class="comment">#文件内容</span></span><br><span class="line"><span class="keyword">from</span> scrapy.cmdline <span class="keyword">import</span> execute</span><br><span class="line">execute([<span class="string">&#x27;scrapy&#x27;</span>,<span class="string">&#x27;crawl&#x27;</span>,<span class="string">&#x27;cnblogcrawler&#x27;</span>,<span class="string">&#x27;--nolog&#x27;</span>]) <span class="comment">#里面写命令</span></span><br><span class="line"></span><br><span class="line">ps:同时只能执行一个爬虫程序</span><br></pre></td></tr></table></figure><h3 id="scrapy中response的基本方法"><a href="#scrapy中response的基本方法" class="headerlink" title="scrapy中response的基本方法"></a>scrapy中response的基本方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>text <span class="comment">#获得爬取页面的页面数据</span></span><br><span class="line">eg: text = response.text</span><br></pre></td></tr></table></figure><h3 id="scrapy提供的解析方法"><a href="#scrapy提供的解析方法" class="headerlink" title="scrapy提供的解析方法"></a>scrapy提供的解析方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#xpath    </span></span><br><span class="line">xpath() <span class="comment">#我们调用该方法可以直接使用xpath解析的方式去解析数据</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#css 使用css选择器解析</span></span><br><span class="line">css()</span><br><span class="line"></span><br><span class="line">ps:解析完成后我们获得的是一个对象，我们可以使用下述方法获得其中的数据</span><br><span class="line">extract() <span class="comment">#这个取出来是列表的形式</span></span><br><span class="line">extract_first() <span class="comment">#取列表的第一个     </span></span><br></pre></td></tr></table></figure><h3 id="xpath取数据"><a href="#xpath取数据" class="headerlink" title="xpath取数据"></a>xpath取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取文本</span></span><br><span class="line">/text()</span><br><span class="line"></span><br><span class="line"><span class="comment">#取属性</span></span><br><span class="line">/@href</span><br></pre></td></tr></table></figure><h3 id="css选择器取数据"><a href="#css选择器取数据" class="headerlink" title="css选择器取数据"></a>css选择器取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#取文本</span></span><br><span class="line">::text</span><br><span class="line">eg:</span><br><span class="line">    article.css(<span class="string">&#x27;.post-item-title::text&#x27;</span>).extract_first()</span><br><span class="line"></span><br><span class="line"><span class="comment">#取属性</span></span><br><span class="line">::attr(属性名)</span><br></pre></td></tr></table></figure><h3 id="scrapy解析出新地址后继续爬取"><a href="#scrapy解析出新地址后继续爬取" class="headerlink" title="scrapy解析出新地址后继续爬取"></a>scrapy解析出新地址后继续爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在解析的函数最后添加一个<span class="keyword">yield</span> </span><br><span class="line"><span class="keyword">yield</span> Request(url=url,callback=self.parser_detail) <span class="comment">#callback代表爬取成功后去的函数</span></span><br><span class="line">ps:callback不写,默认返回现在的request</span><br></pre></td></tr></table></figure><h3 id="scrapy参数的配置"><a href="#scrapy参数的配置" class="headerlink" title="scrapy参数的配置"></a>scrapy参数的配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>是否遵循爬虫协议</span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="number">2.</span>浏览器类型（默认写的是scrapy，）</span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36&#x27;</span></span><br><span class="line"><span class="number">3.</span>日志级别</span><br><span class="line">LOG_LEVEL=<span class="string">&#x27;ERROR&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据的持久化存储"><a href="#数据的持久化存储" class="headerlink" title="数据的持久化存储"></a>数据的持久化存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>使用命令</span><br><span class="line">我们只需要在执行文件后添加一个-o 路径即可</span><br><span class="line">eg:scrapy crawl first -o ./qiubai.csv</span><br><span class="line">以该方式存储的只能为<span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;jsonlines&#x27;</span>, <span class="string">&#x27;jl&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;marshal&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>这些格式</span><br><span class="line"><span class="number">2.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scrapy&quot;&gt;&lt;a href=&quot;#scrapy&quot; class=&quot;headerlink&quot; title=&quot;scrapy&quot;&gt;&lt;/a&gt;scrapy&lt;/h2&gt;&lt;h3 id=&quot;windos下scrapy框架的安装&quot;&gt;&lt;a href=&quot;#windos下scrapy框架的安装&quot;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="https://a744740454.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>requests模块简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/request%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/request%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.153Z</published>
    <updated>2021-01-19T12:09:35.514Z</updated>
    
    <content type="html"><![CDATA[<h2 id="request模块"><a href="#request模块" class="headerlink" title="request模块"></a>request模块</h2><p>request模块简单的说就是在模拟浏览器发送请求的过程</p><h3 id="浏览器发送请求的过程"><a href="#浏览器发送请求的过程" class="headerlink" title="浏览器发送请求的过程"></a>浏览器发送请求的过程</h3><p>​    1.指定url</p><p>​    2.发起请求</p><p>​    3.获取响应数据</p><h3 id="request模块发起请求"><a href="#request模块发起请求" class="headerlink" title="request模块发起请求"></a>request模块发起请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#发起请求,获得响应对象</span></span><br><span class="line">response = request.get()</span><br><span class="line">get方法的三个参数</span><br><span class="line"><span class="number">1.</span>url 发送请求的网址</span><br><span class="line">    <span class="number">2.</span>params 文件的路径，可以是一个可迭代的对象，会与上述的url进行拼接</span><br><span class="line">    <span class="number">3.</span>headers 对应请求头</span><br><span class="line">    <span class="number">4.</span>proxies 代理池使用</span><br><span class="line"></span><br><span class="line">response = request.post()</span><br><span class="line">post请求除了get请求的三个参数，还有一些参数</span><br><span class="line"><span class="number">1.</span>data 携带的数据</span><br><span class="line">    <span class="number">2.j</span>son json格式的数据，使用这个参数，若使用data服务端取不到值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="响应对象的方法"><a href="#响应对象的方法" class="headerlink" title="响应对象的方法"></a>响应对象的方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.获取响应对象中的数据，以字符串形式返回</span></span><br><span class="line">response.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.二进制内容</span></span><br><span class="line">response.content</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.获得响应对象中的json格式的数据</span></span><br><span class="line">response.json()</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.二进制内容迭代取值</span></span><br><span class="line">response.iter_content()</span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> response.iter_content()</span><br><span class="line">f.write(content)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#5.网站编码</span></span><br><span class="line">respone.encoding</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.响应头</span></span><br><span class="line">respone.headers</span><br><span class="line"></span><br><span class="line"><span class="comment">#7.cookie对象</span></span><br><span class="line">respone.cookies <span class="comment">#这不是字符串，是对象</span></span><br><span class="line">respone.cookies.get_dict() <span class="comment">#cookie对象转成字典</span></span><br><span class="line">    respone.cookies.items()</span><br><span class="line"> </span><br><span class="line"><span class="comment">#8.请求地址</span></span><br><span class="line">respone.url</span><br><span class="line"></span><br><span class="line"><span class="comment">#9.当你访问一个网站，若有重定向，你可以获得重定向之前的网址</span></span><br><span class="line">respone.history</span><br></pre></td></tr></table></figure><h3 id="session对象"><a href="#session对象" class="headerlink" title="session对象"></a>session对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们可以使用session对象来帮助我们自动处理cookie，这样子就不需要我们手动去获取cookie了</span><br><span class="line">session = request.session() <span class="comment">#实例化获得一个对象</span></span><br><span class="line"></span><br><span class="line">然后使用这个session对象发送请求</span><br><span class="line"></span><br><span class="line"><span class="comment">#发送get与post请求</span></span><br><span class="line">session.get()</span><br><span class="line">session.post() <span class="comment">#我们使用session.post模拟登录后session会自动获取cookies,并且在下次的请求中自带cookies进行发送</span></span><br></pre></td></tr></table></figure><h3 id="反扒措施一：UA检测"><a href="#反扒措施一：UA检测" class="headerlink" title="反扒措施一：UA检测"></a>反扒措施一：UA检测</h3><p>User—Agent:浏览器的对应版本</p><p>通过检查请求头中的User—Agent服务器可以判断是否是一个正常的浏览器来进行访问</p><h4 id="对应措施"><a href="#对应措施" class="headerlink" title="对应措施"></a>对应措施</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#UA伪装：将自己伪装成一款浏览器</span></span><br><span class="line">将User-Agent放到字典中，可以通过抓包的方式获取User-Agent</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例一：百度网页爬取"><a href="#案例一：百度网页爬取" class="headerlink" title="案例一：百度网页爬取"></a>案例一：百度网页爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>) <span class="comment">#输入你要爬取的关键字</span></span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span> <span class="comment">#进行UA伪装</span></span><br><span class="line">&#125;</span><br><span class="line">info =&#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:kw  <span class="comment"># 设置一个字典以保证requests的拼接 比如wd=&#x27;动漫&#x27; 最后会拼接成https://www.baidu.com/s?wd=&#x27;动漫&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com/s?&#x27;</span>,info,headers = headers)</span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;kw&#125;</span>.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#存入文件夹中</span></span><br><span class="line">    f.write(page_text)</span><br></pre></td></tr></table></figure><h3 id="案例二：百度翻译破解-利用request-post"><a href="#案例二：百度翻译破解-利用request-post" class="headerlink" title="案例二：百度翻译破解(利用request.post())"></a>案例二：百度翻译破解(利用request.post())</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">info =&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://fanyi.baidu.com/sug?&#x27;</span>,info,headers = headers)</span><br><span class="line">info_json = response.json()</span><br><span class="line">print(info_json)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;word&#125;</span>.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(info_json,f,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="案例三：豆瓣电影爬取"><a href="#案例三：豆瓣电影爬取" class="headerlink" title="案例三：豆瓣电影爬取"></a>案例三：豆瓣电影爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, params, headers=headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">info_json = response.json()</span><br><span class="line">print(info_json)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣电影动漫.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(info_json, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="案例四：爬取化妆品化妆品生产许可证信息"><a href="#案例四：爬取化妆品化妆品生产许可证信息" class="headerlink" title="案例四：爬取化妆品化妆品生产许可证信息"></a>案例四：爬取化妆品化妆品生产许可证信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">url, params, method, is_json=<span class="literal">True</span></span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 判断是get请求还是post请求</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">        response = requests.get(url, params, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = requests.post(url, params, headers=headers)</span><br><span class="line">    print(response.status_code)</span><br><span class="line">    <span class="comment"># 判断返回的数据是否是json数据</span></span><br><span class="line">    <span class="keyword">if</span> is_json:</span><br><span class="line">        info_json = response.json()</span><br><span class="line">        print(info_json)</span><br><span class="line">        <span class="keyword">return</span> info_json</span><br><span class="line">    info = response.text</span><br><span class="line">    print(info)</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sure_data</span>(<span class="params">page</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;page&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    id_list = []</span><br><span class="line">    json_data = get_data(url, params, <span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> data_dict <span class="keyword">in</span> json_data.get(<span class="string">&#x27;list&#x27;</span>):</span><br><span class="line">        <span class="comment"># 获取到id</span></span><br><span class="line">        id_list.append(data_dict[<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line">    url2 = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        params2 = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        json_data = get_data(url2, params2, <span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_data,f,ensure_ascii=<span class="literal">False</span>,indent=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;over&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = ThreadPoolExecutor(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">355</span>):</span><br><span class="line">        t.submit(get_sure_data(i))</span><br><span class="line">    t.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;request模块&quot;&gt;&lt;a href=&quot;#request模块&quot; class=&quot;headerlink&quot; title=&quot;request模块&quot;&gt;&lt;/a&gt;request模块&lt;/h2&gt;&lt;p&gt;request模块简单的说就是在模拟浏览器发送请求的过程&lt;/p&gt;
&lt;h3 id=&quot;浏</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="requests模块" scheme="https://a744740454.github.io/tags/requests%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl的简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/openpyxl%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/openpyxl%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.144Z</published>
    <updated>2021-01-15T12:30:17.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="openpyxl的简单使用"><a href="#openpyxl的简单使用" class="headerlink" title="openpyxl的简单使用"></a>openpyxl的简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>实例化获得一个对象</span><br><span class="line">mywb = openpyxl.Workbook()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>获得一个sheet对象</span><br><span class="line">sheet = mywb.active</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>为某一个单元格赋值</span><br><span class="line">sheet[col +row] = 数据</span><br><span class="line">eg:</span><br><span class="line">sheet[A1]=test <span class="comment">#为第一个单元格赋值test</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>存储成excel表</span><br><span class="line">mywb.save(<span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;openpyxl的简单使用&quot;&gt;&lt;a href=&quot;#openpyxl的简单使用&quot; class=&quot;headerlink&quot; title=&quot;openpyxl的简单使用&quot;&gt;&lt;/a&gt;openpyxl的简单使用&lt;/h2&gt;&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="openpyxl" scheme="https://a744740454.github.io/tags/openpyxl/"/>
    
    <category term="excel" scheme="https://a744740454.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>bs4模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/bs4%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/bs4%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.128Z</published>
    <updated>2021-01-15T12:29:23.163Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bs4模块"><a href="#bs4模块" class="headerlink" title="bs4模块"></a>bs4模块</h2><p>bs4模块我们主要使用的就是他其中的BeautilSoup类去用来帮助我们做到解析页面</p><h3 id="bs4模块的导入"><a href="#bs4模块的导入" class="headerlink" title="bs4模块的导入"></a>bs4模块的导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><h3 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得一个bs对象</span></span><br><span class="line">bs = BeautifulSoup(<span class="string">&#x27;爬取到的页面信息&#x27;</span>,<span class="string">&#x27;使用什么解释器去解析&#x27;</span>)</span><br><span class="line"><span class="comment">#eg：BeautifulSoup(response.text,&#x27;lxml&#x27;) lxml是一种解释器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bs方法</span></span><br><span class="line">bs.标签名称 返回文档中第一次出现的与标签名称对应的标签</span><br><span class="line">bs.find(标签名称) 返回第一次与标签名称对应的标签</span><br><span class="line">bs.find_all(标签名称，属性名称) 返回与标签名称对应的所有标签列表</span><br><span class="line"><span class="comment">#eg:bs.find(&#x27;div&#x27;,class_/id/attr=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">select</span><br><span class="line">bs.select(<span class="string">&#x27;选择器&#x27;</span>)，返回的是一个列表</span><br><span class="line">标签.get_text() 获得标签对应的文本</span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;) 获得class=.tang的标签列表</span></span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;)[0].get_text() 获得对应标签的文本</span></span><br><span class="line">标签[属性] <span class="comment">#可以获得对应标签的属性</span></span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;)[0][&#x27;href&#x27;] 获得对应标签的href</span></span><br></pre></td></tr></table></figure><h3 id="案例：三国演义爬取"><a href="#案例：三国演义爬取" class="headerlink" title="案例：三国演义爬取"></a>案例：三国演义爬取</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">bs = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">sg_dict=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> bs.select(<span class="string">&#x27;.book-mulu a&#x27;</span>):</span><br><span class="line">    sg_dict[a.text] = a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(sg_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,url <span class="keyword">in</span> sg_dict.items():</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;sg&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;sg&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.shicimingju.com&#x27;</span></span><br><span class="line">        sure_url = base_url + url</span><br><span class="line">        bs2 = BeautifulSoup(requests.get(sure_url,headers=headers).text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        print(bs2.title)</span><br><span class="line">        print(<span class="string">&#x27;.bookmark-list&#x27;</span>)</span><br><span class="line">        <span class="comment"># with open(f&#x27;sg//&#123;name&#125;.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line">        <span class="comment">#     f.write(bs2.title)</span></span><br><span class="line">        <span class="comment">#     f.write(bs2.select(&#x27;.bookmark-list&#x27;)[0].text)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;bs4模块&quot;&gt;&lt;a href=&quot;#bs4模块&quot; class=&quot;headerlink&quot; title=&quot;bs4模块&quot;&gt;&lt;/a&gt;bs4模块&lt;/h2&gt;&lt;p&gt;bs4模块我们主要使用的就是他其中的BeautilSoup类去用来帮助我们做到解析页面&lt;/p&gt;
&lt;h3 id=&quot;bs</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="bs4" scheme="https://a744740454.github.io/tags/bs4/"/>
    
    <category term="BeautifulSoup" scheme="https://a744740454.github.io/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/01/15/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95/"/>
    <id>https://a744740454.github.io/2021/01/15/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95/</id>
    <published>2021-01-15T00:42:42.041Z</published>
    <updated>2021-01-15T00:42:42.041Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>butterfly配置介绍</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-14T09:07:34.953Z</published>
    <updated>2021-01-15T12:09:37.734Z</updated>
    
    <content type="html"><![CDATA[<p> 我们简单使用butterfly主题之后，很明显当前主题的样式并不符合我们的要求，我们需要进行一定的配置。接下来我会介绍一些常用的配置</p><h2 id="hexo配置文件修改"><a href="#hexo配置文件修改" class="headerlink" title="hexo配置文件修改"></a>hexo配置文件修改</h2><h3 id="站点相关修改"><a href="#站点相关修改" class="headerlink" title="站点相关修改"></a>站点相关修改</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">我们打开_config.yml配置文件，找到其中的site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>                <span class="comment">#站点的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;&#x27;</span>            </span><br><span class="line"><span class="attr">keywords:</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Sadness</span> <span class="string">Pineapple</span>  <span class="comment">#作者,与导航栏中的作者相关</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span>          <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span>    <span class="comment">#时区</span></span><br></pre></td></tr></table></figure><h3 id="上传相关"><a href="#上传相关" class="headerlink" title="上传相关"></a>上传相关</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span>  <span class="comment">#使用什么上传</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:a744740454/a744740454.github.io.git</span>  <span class="comment">#你github的仓库，当你使用hexo d的时候上传的地址</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#分支</span></span><br></pre></td></tr></table></figure><h2 id="主题相关配置修改"><a href="#主题相关配置修改" class="headerlink" title="主题相关配置修改"></a>主题相关配置修改</h2><h3 id="菜单相关"><a href="#菜单相关" class="headerlink" title="菜单相关"></a>菜单相关</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span>                                              <span class="comment">#这个主要影响顶部的菜单样式</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span>                           <span class="comment">#主页</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span>           <span class="comment">#日期归档页</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span>                      <span class="comment">#标签页</span></span><br><span class="line">  <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span>   <span class="comment">#分类</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:                             #爱好相关</span></span><br><span class="line">  <span class="comment">#   - Music || /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   - Movie || /movies/ || fas fa-video</span></span><br><span class="line">  <span class="comment"># Link: /link/ || fas fa-link                    #友情链接</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span>                   <span class="comment">#说说</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210115200001654.png" alt="image-20210115200001654"></p><h3 id="网站图标相关"><a href="#网站图标相关" class="headerlink" title="网站图标相关"></a>网站图标相关</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span>  </span><br></pre></td></tr></table></figure><h3 id="头像相关"><a href="#头像相关" class="headerlink" title="头像相关"></a>头像相关</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">https://i.loli.net/2021/01/15/UCfNhvRid3xIVzS.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="string">disabled</span> <span class="comment">#选true头像会一直转</span></span><br></pre></td></tr></table></figure><h3 id="顶部背景图"><a href="#顶部背景图" class="headerlink" title="顶部背景图"></a>顶部背景图</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_img:</span> <span class="string">https://i.loli.net/2021/01/14/KU2VYXI9zrLEqJn.jpg</span> <span class="comment">#首页的背景图</span></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="comment">#默认的顶部图片</span></span><br><span class="line"><span class="string">...</span> <span class="comment">#后续还有对应的不同页面的背景图</span></span><br></pre></td></tr></table></figure><h3 id="文章背景图相关"><a href="#文章背景图相关" class="headerlink" title="文章背景图相关"></a>文章背景图相关</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># the position of cover in home page (封面顯示的位置)</span></span><br><span class="line">  <span class="comment"># left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># When cover is not set, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  <span class="attr">default_cover:</span>  <span class="comment">#这下面写多个链接文章背景图会在下面随机选择一个显示</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://i.loli.net/2021/01/15/lNVkumjp6IiHGAr.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://i.loli.net/2021/01/15/4pcGJhqNREwe6Ub.jpg</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">https://i.loli.net/2021/01/15/l2huGSOCq6IY985.jpg</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 我们简单使用butterfly主题之后，很明显当前主题的样式并不符合我们的要求，我们需要进行一定的配置。接下来我会介绍一些常用的配置&lt;/p&gt;
&lt;h2 id=&quot;hexo配置文件修改&quot;&gt;&lt;a href=&quot;#hexo配置文件修改&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://a744740454.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>butterfly主题简单使用</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-14T08:41:21.445Z</published>
    <updated>2021-01-15T11:39:12.906Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h4><p>我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#在你的根目录里使用git下载主题</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h4><p>当主题下载好之后我们在根目录下打开<strong>_config.yml</strong>配置文件进行配置</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114165701170.png" alt="image-20210114165701170"></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初次安装需要安装下述插件</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="移动配置文件（可以不做）"><a href="#移动配置文件（可以不做）" class="headerlink" title="移动配置文件（可以不做）"></a>移动配置文件（可以不做）</h4><p>移动配置文件可以减少升级主题带来的不便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将主题中的_config.yml移动到根目录并重命名为_config.butterfly.yml</span><br><span class="line">hexo5.0以上才支持这个方法</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114170433927.png" alt="image-20210114170433927"></p><h4 id="启动博客网站"><a href="#启动博客网站" class="headerlink" title="启动博客网站"></a>启动博客网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最后使用下述命令即可使用新的主题</span><br><span class="line">hexo clean <span class="comment">#清楚缓存</span></span><br><span class="line">hexo g <span class="comment">#构建页面</span></span><br><span class="line">hexo d <span class="comment">#推送到远端</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用主题&quot;&gt;&lt;a href=&quot;#使用主题&quot; class=&quot;headerlink&quot; title=&quot;使用主题&quot;&gt;&lt;/a&gt;使用主题&lt;/h4&gt;&lt;p&gt;我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题&lt;/p&gt;
</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
    <category term="butterfly" scheme="https://a744740454.github.io/tags/butterfly/"/>
    
  </entry>
  
  <entry>
    <title>gitee图床搭建</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-14T08:21:05.153Z</published>
    <updated>2021-01-15T04:35:58.076Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitee图床搭建"><a href="#gitee图床搭建" class="headerlink" title="gitee图床搭建"></a><strong>gitee图床搭建</strong></h3><p><strong>1.新建一个仓库</strong><br>    1.选择公开仓库，不然外界无法访问仓库内的图片<br>    2.选择使用readme文件初始化这个仓库<br>    3.填写仓库名称以及路径<br>    4.点击创建即可</p><p><strong>2.点击头像，找到私人令牌并点击</strong><br>    1.创建一个新令牌<br>    2.选择你私人令牌所拥有的权限 #私人令牌的作用是用于替代用户名与密码的，你可以利用这个私人令牌对仓库进行对应的权限管理<br>    3.获得一串token，这个token需要我们自行保存，丢失之后就没有了。</p><p><strong>3.下载PicGo</strong><br>    这是一款开源的用于上传图片的软件,是当前市面上比较好用的软件<br>    下载链接:<br>        <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><strong>4.配置PicGo</strong><br>    1.下载好之后,我们先在picgo左侧最下边安装一个插件<br>        在搜索框输入<strong>gitee</strong>,下载<strong>gitee-upload</strong></p><p>2.进行图床设置<br>    我们在图床设置里面选择gitee<br>    里面有下述几个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repo：(用户名&#x2F;仓库名) #a744740454&#x2F;img</span><br><span class="line">branch: 分支 #一般写master</span><br><span class="line">token: 刚刚的私人令牌的token</span><br><span class="line">path: 存放的具体路径 #eg:img  填写这个的话若没有这个目录会新建，然后上传图片到这个目录下</span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line">customUrl：  默认即可，不用填写    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitee图床搭建&quot;&gt;&lt;a href=&quot;#gitee图床搭建&quot; class=&quot;headerlink&quot; title=&quot;gitee图床搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;gitee图床搭建&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.新建一个仓库&lt;/strong&gt;</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
