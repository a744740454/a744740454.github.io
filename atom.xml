<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-01-14T03:25:20.627Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django基础</title>
    <link href="https://a744740454.github.io/2021/01/14/1.django/"/>
    <id>https://a744740454.github.io/2021/01/14/1.django/</id>
    <published>2021-01-14T02:08:17.839Z</published>
    <updated>2021-01-14T03:25:20.627Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h4 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h4><p>web应用是一种可以通过web访问的应用程序，用户只需要有浏览器即可，不需要安装其他软件</p><h4 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h4><p>web框架是一种开发框架，用于支持网络应用和网络服务的开发</p><h4 id="动静态网页的区别"><a href="#动静态网页的区别" class="headerlink" title="动静态网页的区别"></a>动静态网页的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态网页：动态网页简单的说就是会随着用户的请求不同而改变内容的网页，一般会有一些后端的代码与前端代码进行交互</span><br><span class="line"></span><br><span class="line">静态网页：简单的说静态网页就是用户无论何时打开网页都是没有变化的，内容是固定的</span><br></pre></td></tr></table></figure><h4 id="python常用的三个web框架"><a href="#python常用的三个web框架" class="headerlink" title="python常用的三个web框架"></a>python常用的三个web框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三个框架各自的特点</span></span><br><span class="line">Django:</span><br><span class="line">    大而全，集成了很多组件，有些笨重</span><br><span class="line">Flask:</span><br><span class="line">    小而轻，原生组件几乎为<span class="number">0</span>，但是第三方库极多</span><br><span class="line">Tornado:</span><br><span class="line">    原生的异步非阻塞框架，在处理并发的任务上十分的优秀</span><br></pre></td></tr></table></figure><h4 id="django安装"><a href="#django安装" class="headerlink" title="django安装"></a>django安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.通过命令行安装</span></span><br><span class="line">pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line"><span class="comment">#2.打开settings 在搜索框中输入python interpreter找到django选择历史版本下载</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part1.png"></p><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part2.png"></p><h4 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.使用命令行创建，这个项目所在位置为当前你命令行的位置</span></span><br><span class="line">django-admin startproject 项目名称</span><br><span class="line"><span class="comment">#2.使用pycharm创建直接创建项目时选择Django即可</span></span><br></pre></td></tr></table></figure><h4 id="Django项目运行"><a href="#Django项目运行" class="headerlink" title="Django项目运行"></a>Django项目运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用命令行</span></span><br><span class="line">python manage.py runserver</span><br><span class="line">运行时若报错，找到你widgets.py中</span><br><span class="line">路径：E:\python38\Lib\site-packages\django\contrib\admin\widgets.py</span><br><span class="line">    删除一个逗号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\报错信息\django报错修改.png"></p><h4 id="创建一个app项目"><a href="#创建一个app项目" class="headerlink" title="创建一个app项目"></a>创建一个app项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.在命令行中输入</span></span><br><span class="line">python manage.py startapp app名称</span><br><span class="line"><span class="comment">#2.在pycharm中的tool选项中找到run manage.py Task点击在下方输入</span></span><br><span class="line">startapp app名称</span><br></pre></td></tr></table></figure><h4 id="django项目文件详解"><a href="#django项目文件详解" class="headerlink" title="django项目文件详解"></a>django项目文件详解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app01 <span class="comment">#我们创建的app项目，一个app文件夹代表一个功能</span></span><br><span class="line">migrations <span class="comment">#数据库迁移的记录会保存在这里面</span></span><br><span class="line">    admin.py <span class="comment">#django后台管理</span></span><br><span class="line">    apps.py <span class="comment">#注册使用</span></span><br><span class="line">    models.py <span class="comment">#数据库相关的</span></span><br><span class="line">    tests.py <span class="comment">#一个测试文件</span></span><br><span class="line">    views.py <span class="comment">#视图函数，视图层</span></span><br><span class="line">    </span><br><span class="line">mysite</span><br><span class="line">settings.py <span class="comment">#django的配置文件</span></span><br><span class="line">    urls.py <span class="comment">#路由与视图函数的对应关系</span></span><br><span class="line">    wsgi.py <span class="comment">#wsgiref模块</span></span><br><span class="line">db.sqllite3 <span class="comment">#django自带的数据库</span></span><br><span class="line">manage.py <span class="comment">#django的入口文件</span></span><br></pre></td></tr></table></figure><h4 id="使用命令行创建Django项目与pycharm创建Django项目的区别"><a href="#使用命令行创建Django项目与pycharm创建Django项目的区别" class="headerlink" title="使用命令行创建Django项目与pycharm创建Django项目的区别"></a>使用命令行创建Django项目与pycharm创建Django项目的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pycharm创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)] <span class="comment">#template文件夹的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#命令行创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pycharm会在创建Django项目时为你自动添加一个template文件夹以及在配置文件中添加路径，所以若是使用命令行创建需要添加DIRS</span><br></pre></td></tr></table></figure><h4 id="静态文件的配置"><a href="#静态文件的配置" class="headerlink" title="静态文件的配置"></a>静态文件的配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 起到令牌的效果，若是对上令牌则会去下面的路径中查找文件</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),  <span class="comment"># 静态文件存放位置</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="MVC与MTV"><a href="#MVC与MTV" class="headerlink" title="MVC与MTV"></a>MVC与MTV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MVC:一般市面上的web框架就是MVC框架的，他们将一个web应用分解成三部分，已达到解耦合的目的</span><br><span class="line">M:Models(模板层)用于和数据库打交道</span><br><span class="line">    V:View(视图层)负责与用户进行交互</span><br><span class="line">    C:Controller(控制层)进行逻辑处理的一层</span><br><span class="line">MTV:Django的web模式，本质还是MVC模式</span><br><span class="line">M:models(模型层)  与数据库交互</span><br><span class="line">    T:template(模板层)与用户交互</span><br><span class="line">    V:view(视图函数)  进行逻辑处理</span><br><span class="line">ps：MVC与MTV最大的区别就是MTV将MVC的C又进行了一层拆分，分出了一个urls专门用于处理路由匹配的问题，MVC的路由匹配则是直接在Controller中处理的</span><br></pre></td></tr></table></figure><h4 id="Django三件套"><a href="#Django三件套" class="headerlink" title="Django三件套"></a>Django三件套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模块的导入</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse, render, redirect</span><br></pre></td></tr></table></figure><h5 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在settings文件中的INSTALLED_APPS中将自己新建的app项目名称放入</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app02&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在urls.py中设置视图与函数的对应关系</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment">#导入对应的视图函数</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^first/&#x27;</span>,views.first) <span class="comment">#当用户请求一个first页面时调用first函数</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">#返回hello world 给页面</span></span><br></pre></td></tr></table></figure><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;first.html&#x27;</span>) <span class="comment">#返回一个html页面</span></span><br><span class="line"></span><br><span class="line">render参数：</span><br><span class="line">    request:　用于生成响应的请求对象</span><br><span class="line">    template_name:　要使用的模板的完整名称, 可选的参数</span><br><span class="line">    context:　添加到模板上下文的一个字典. 默认是一个空字典. 如果字典中的某个值是可调用的, 视图将在渲染模板之前调用它.</span><br><span class="line">    content_type:　 生成的文档要使用的MIME类型. 默认为DEFAULT_CONTENT_TYPE设置的值. 默认为<span class="string">&quot;text/html&quot;</span></span><br><span class="line">    status:　响应的状态码. 默认为<span class="number">200</span></span><br><span class="line">    useing:　用于加载模板的模板引擎的名称</span><br></pre></td></tr></table></figure><h5 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.baidu.com&#x27;</span>) <span class="comment">#跳转到百度</span></span><br></pre></td></tr></table></figure><h5 id="补充：JsonResponse"><a href="#补充：JsonResponse" class="headerlink" title="补充：JsonResponse"></a>补充：JsonResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse <span class="comment">#这个模块允许你直接将字典转化为一个json对象返回，若是其余的数据类型也想返回需要将safe参数设置为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;egon&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;tank&#x27;</span>:<span class="number">19</span>,<span class="string">&#x27;sadnesspineapple&#x27;</span>:<span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="通过form表单往后端传输数据"><a href="#通过form表单往后端传输数据" class="headerlink" title="通过form表单往后端传输数据"></a>通过form表单往后端传输数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端往后端提交代码的方式有两种</span></span><br><span class="line"><span class="number">1.</span>post</span><br><span class="line">    post请求可能会报错显示</span><br><span class="line">        Forbidden (<span class="number">403</span>)CSRF verification failed. Request aborted.</span><br><span class="line">        这时需要去settings修改配置<span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,将这一行注释</span><br><span class="line"><span class="number">2.</span>get</span><br><span class="line"><span class="comment">#并且表单中的action=&quot;&quot;若是不填的话，表单会默认会对当前的网址再发送一次请求</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">djongo中的request对象，简单的说就是一个通过wigiref返回的一个对象，可以用于获取请求的各种数据</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>request.method <span class="comment">#获得返回请求的方式(GET/POST) 并且是全大写的字符串形式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>request.POST <span class="comment">#获得POST请求的数据 可以将获得的数据看做一个字典，使用字典的方式取值</span></span><br><span class="line">&gt;&gt;&gt;&lt;QueryDict: &#123;<span class="string">&#x27;username&#x27;</span>: [<span class="string">&#x27;dsb&#x27;</span>], <span class="string">&#x27;possword&#x27;</span>: [<span class="string">&#x27;123&#x27;</span>]&#125;&gt;</span><br><span class="line">    request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    值得一提的是get取得是列表中的最后一个值，若想获得列表需要使用</span><br><span class="line">    request.POST.getlist(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>request.GET <span class="comment">#获得GET请求的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>request.path系列</span><br><span class="line"><span class="number">1.</span>request.path</span><br><span class="line">    <span class="number">2.</span>request.path_info</span><br><span class="line">    <span class="number">3.</span>request.get_full_path() <span class="comment">#获得路径中的全部数据，包括？后的参数</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>request.body <span class="comment">#获得请求体内的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>request.FILES</span><br><span class="line">获得一个类似字典的对象 &lt;MultiValueDict: &#123;<span class="string">&#x27;file&#x27;</span>: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span><br><span class="line">    获得上传的文件</span><br><span class="line">    eg:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request,password</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method ==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            file = request.FILES</span><br><span class="line">            print(file) </span><br><span class="line">            <span class="comment">#&gt;&gt;&gt;&lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">            print(file.get(<span class="string">&#x27;file&#x27;</span>)) <span class="comment">#获得一个文件对象</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file.get(<span class="string">&#x27;file&#x27;</span>).name,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> file.get(<span class="string">&#x27;file&#x27;</span>).chunks():<span class="comment">#不加chunks()也行，但是官方建议加上</span></span><br><span class="line">                    f.write(line)</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">ps：上传文件form表单后面的enctype需要改成enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>request.META</span><br><span class="line">包含了所有本次HTTP请求的Header信息，比如用户IP地址和用户Agent</span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME 类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送的HTTP Host 头部。</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端的user-agent 字符串。 </span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP 地址。 </span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，</span><br><span class="line">    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="djongo连接mysql"><a href="#djongo连接mysql" class="headerlink" title="djongo连接mysql"></a>djongo连接mysql</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中修改</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mysite&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是这样子会报错，因为djongo内部默认是以MySQLdb模块连接的，但是MySQLdb模块兼容性较差容易报错，因此我们需要换成pymysql模块</span></span><br><span class="line"><span class="comment">#我们可以在任意的一个init文件中添加两句话就可以解决问题</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;-&lt;/p&gt;</summary>
    
    
    
    <category term="djangozh" scheme="https://a744740454.github.io/categories/djangozh/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
  </entry>
  
</feed>
