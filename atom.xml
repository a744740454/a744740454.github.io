<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-01-14T09:09:04.299Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>butterfly配置介绍</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-14T09:07:34.953Z</published>
    <updated>2021-01-14T09:09:04.299Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>butterfly主题简单使用</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-14T08:41:21.445Z</published>
    <updated>2021-01-14T09:08:42.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h4><p>我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#在你的根目录里使用git下载主题</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h4><p>当主题下载好之后我们在根目录下打开<strong>_config.yml</strong>配置文件进行配置</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114165701170.png" alt="image-20210114165701170"></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初次安装需要安装下述插件</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="移动配置文件（可以不做）"><a href="#移动配置文件（可以不做）" class="headerlink" title="移动配置文件（可以不做）"></a>移动配置文件（可以不做）</h4><p>移动配置文件可以减少升级主题带来的不便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将主题中的_config.yml移动到根目录并重命名为_config.butterfly.yml</span><br><span class="line">hexo5.0以上才支持这个方法</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114170433927.png" alt="image-20210114170433927"></p><h4 id="启动博客网站"><a href="#启动博客网站" class="headerlink" title="启动博客网站"></a>启动博客网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最后使用下述命令即可使用新的主题</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d <span class="comment">#推送到远端</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用主题&quot;&gt;&lt;a href=&quot;#使用主题&quot; class=&quot;headerlink&quot; title=&quot;使用主题&quot;&gt;&lt;/a&gt;使用主题&lt;/h4&gt;&lt;p&gt;我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题&lt;/p&gt;
</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="butterfly" scheme="https://a744740454.github.io/tags/butterfly/"/>
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>gitee图床搭建</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-14T08:21:05.153Z</published>
    <updated>2021-01-14T08:40:47.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitee图床搭建"><a href="#gitee图床搭建" class="headerlink" title="gitee图床搭建"></a><strong>gitee图床搭建</strong></h3><p><strong>1.新建一个仓库</strong><br>    1.选择公开仓库，不然外界无法访问仓库内的图片<br>    2.选择使用readme文件初始化这个仓库<br>    3.填写仓库名称以及路径<br>    4.点击创建即可</p><p><strong>2.点击头像，找到私人令牌并点击</strong><br>    1.创建一个新令牌<br>    2.选择你私人令牌所拥有的权限 #私人令牌的作用是用于替代用户名与密码的，你可以利用这个私人令牌对仓库进行对应的权限管理<br>    3.获得一串token，这个token需要我们自行保存，丢失之后就没有了。</p><p><strong>3.下载PicGo</strong><br>    这是一款开源的用于上传图片的软件,是当前市面上比较好用的软件<br>    下载链接:<br>        <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><strong>4.配置PicGo</strong><br>    1.下载好之后,我们先在picgo左侧最下边安装一个插件<br>        在搜索框输入<strong>gitee</strong>,下载<strong>gitee-upload</strong></p><p>2.进行图床设置<br>    我们在图床设置里面选择gitee<br>    里面有下述几个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repo：(用户名&#x2F;仓库名) #a744740454&#x2F;img</span><br><span class="line">branch: 分支 #一般写master</span><br><span class="line">token: 刚刚的私人令牌的token</span><br><span class="line">path: 存放的具体路径 #eg:img  填写这个的话若没有这个目录会新建，然后上传图片到这个目录下</span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line">customUrl：  默认即可，不用填写    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitee图床搭建&quot;&gt;&lt;a href=&quot;#gitee图床搭建&quot; class=&quot;headerlink&quot; title=&quot;gitee图床搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;gitee图床搭建&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.新建一个仓库&lt;/strong&gt;</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>django基础</title>
    <link href="https://a744740454.github.io/2021/01/14/django/django/"/>
    <id>https://a744740454.github.io/2021/01/14/django/django/</id>
    <published>2021-01-14T02:08:17.839Z</published>
    <updated>2021-01-14T08:47:14.802Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h4 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h4><p>web应用是一种可以通过web访问的应用程序，用户只需要有浏览器即可，不需要安装其他软件</p><h4 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h4><p>web框架是一种开发框架，用于支持网络应用和网络服务的开发</p><h4 id="动静态网页的区别"><a href="#动静态网页的区别" class="headerlink" title="动静态网页的区别"></a>动静态网页的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态网页：动态网页简单的说就是会随着用户的请求不同而改变内容的网页，一般会有一些后端的代码与前端代码进行交互</span><br><span class="line"></span><br><span class="line">静态网页：简单的说静态网页就是用户无论何时打开网页都是没有变化的，内容是固定的</span><br></pre></td></tr></table></figure><h4 id="python常用的三个web框架"><a href="#python常用的三个web框架" class="headerlink" title="python常用的三个web框架"></a>python常用的三个web框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三个框架各自的特点</span></span><br><span class="line">Django:</span><br><span class="line">    大而全，集成了很多组件，有些笨重</span><br><span class="line">Flask:</span><br><span class="line">    小而轻，原生组件几乎为<span class="number">0</span>，但是第三方库极多</span><br><span class="line">Tornado:</span><br><span class="line">    原生的异步非阻塞框架，在处理并发的任务上十分的优秀</span><br></pre></td></tr></table></figure><h4 id="django安装"><a href="#django安装" class="headerlink" title="django安装"></a>django安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.通过命令行安装</span></span><br><span class="line">pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line"><span class="comment">#2.打开settings 在搜索框中输入python interpreter找到django选择历史版本下载</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part1.png"></p><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part2.png"></p><h4 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.使用命令行创建，这个项目所在位置为当前你命令行的位置</span></span><br><span class="line">django-admin startproject 项目名称</span><br><span class="line"><span class="comment">#2.使用pycharm创建直接创建项目时选择Django即可</span></span><br></pre></td></tr></table></figure><h4 id="Django项目运行"><a href="#Django项目运行" class="headerlink" title="Django项目运行"></a>Django项目运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用命令行</span></span><br><span class="line">python manage.py runserver</span><br><span class="line">运行时若报错，找到你widgets.py中</span><br><span class="line">路径：E:\python38\Lib\site-packages\django\contrib\admin\widgets.py</span><br><span class="line">    删除一个逗号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\报错信息\django报错修改.png"></p><h4 id="创建一个app项目"><a href="#创建一个app项目" class="headerlink" title="创建一个app项目"></a>创建一个app项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.在命令行中输入</span></span><br><span class="line">python manage.py startapp app名称</span><br><span class="line"><span class="comment">#2.在pycharm中的tool选项中找到run manage.py Task点击在下方输入</span></span><br><span class="line">startapp app名称</span><br></pre></td></tr></table></figure><h4 id="django项目文件详解"><a href="#django项目文件详解" class="headerlink" title="django项目文件详解"></a>django项目文件详解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app01 <span class="comment">#我们创建的app项目，一个app文件夹代表一个功能</span></span><br><span class="line">migrations <span class="comment">#数据库迁移的记录会保存在这里面</span></span><br><span class="line">    admin.py <span class="comment">#django后台管理</span></span><br><span class="line">    apps.py <span class="comment">#注册使用</span></span><br><span class="line">    models.py <span class="comment">#数据库相关的</span></span><br><span class="line">    tests.py <span class="comment">#一个测试文件</span></span><br><span class="line">    views.py <span class="comment">#视图函数，视图层</span></span><br><span class="line">    </span><br><span class="line">mysite</span><br><span class="line">settings.py <span class="comment">#django的配置文件</span></span><br><span class="line">    urls.py <span class="comment">#路由与视图函数的对应关系</span></span><br><span class="line">    wsgi.py <span class="comment">#wsgiref模块</span></span><br><span class="line">db.sqllite3 <span class="comment">#django自带的数据库</span></span><br><span class="line">manage.py <span class="comment">#django的入口文件</span></span><br></pre></td></tr></table></figure><h4 id="使用命令行创建Django项目与pycharm创建Django项目的区别"><a href="#使用命令行创建Django项目与pycharm创建Django项目的区别" class="headerlink" title="使用命令行创建Django项目与pycharm创建Django项目的区别"></a>使用命令行创建Django项目与pycharm创建Django项目的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pycharm创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)] <span class="comment">#template文件夹的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#命令行创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pycharm会在创建Django项目时为你自动添加一个template文件夹以及在配置文件中添加路径，所以若是使用命令行创建需要添加DIRS</span><br></pre></td></tr></table></figure><h4 id="静态文件的配置"><a href="#静态文件的配置" class="headerlink" title="静态文件的配置"></a>静态文件的配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 起到令牌的效果，若是对上令牌则会去下面的路径中查找文件</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),  <span class="comment"># 静态文件存放位置</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="MVC与MTV"><a href="#MVC与MTV" class="headerlink" title="MVC与MTV"></a>MVC与MTV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MVC:一般市面上的web框架就是MVC框架的，他们将一个web应用分解成三部分，已达到解耦合的目的</span><br><span class="line">M:Models(模板层)用于和数据库打交道</span><br><span class="line">    V:View(视图层)负责与用户进行交互</span><br><span class="line">    C:Controller(控制层)进行逻辑处理的一层</span><br><span class="line">MTV:Django的web模式，本质还是MVC模式</span><br><span class="line">M:models(模型层)  与数据库交互</span><br><span class="line">    T:template(模板层)与用户交互</span><br><span class="line">    V:view(视图函数)  进行逻辑处理</span><br><span class="line">ps：MVC与MTV最大的区别就是MTV将MVC的C又进行了一层拆分，分出了一个urls专门用于处理路由匹配的问题，MVC的路由匹配则是直接在Controller中处理的</span><br></pre></td></tr></table></figure><h4 id="Django三件套"><a href="#Django三件套" class="headerlink" title="Django三件套"></a>Django三件套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模块的导入</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse, render, redirect</span><br></pre></td></tr></table></figure><h5 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在settings文件中的INSTALLED_APPS中将自己新建的app项目名称放入</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app02&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在urls.py中设置视图与函数的对应关系</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment">#导入对应的视图函数</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^first/&#x27;</span>,views.first) <span class="comment">#当用户请求一个first页面时调用first函数</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">#返回hello world 给页面</span></span><br></pre></td></tr></table></figure><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;first.html&#x27;</span>) <span class="comment">#返回一个html页面</span></span><br><span class="line"></span><br><span class="line">render参数：</span><br><span class="line">    request:　用于生成响应的请求对象</span><br><span class="line">    template_name:　要使用的模板的完整名称, 可选的参数</span><br><span class="line">    context:　添加到模板上下文的一个字典. 默认是一个空字典. 如果字典中的某个值是可调用的, 视图将在渲染模板之前调用它.</span><br><span class="line">    content_type:　 生成的文档要使用的MIME类型. 默认为DEFAULT_CONTENT_TYPE设置的值. 默认为<span class="string">&quot;text/html&quot;</span></span><br><span class="line">    status:　响应的状态码. 默认为<span class="number">200</span></span><br><span class="line">    useing:　用于加载模板的模板引擎的名称</span><br></pre></td></tr></table></figure><h5 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.baidu.com&#x27;</span>) <span class="comment">#跳转到百度</span></span><br></pre></td></tr></table></figure><h5 id="补充：JsonResponse"><a href="#补充：JsonResponse" class="headerlink" title="补充：JsonResponse"></a>补充：JsonResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse <span class="comment">#这个模块允许你直接将字典转化为一个json对象返回，若是其余的数据类型也想返回需要将safe参数设置为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;egon&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;tank&#x27;</span>:<span class="number">19</span>,<span class="string">&#x27;sadnesspineapple&#x27;</span>:<span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="通过form表单往后端传输数据"><a href="#通过form表单往后端传输数据" class="headerlink" title="通过form表单往后端传输数据"></a>通过form表单往后端传输数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端往后端提交代码的方式有两种</span></span><br><span class="line"><span class="number">1.</span>post</span><br><span class="line">    post请求可能会报错显示</span><br><span class="line">        Forbidden (<span class="number">403</span>)CSRF verification failed. Request aborted.</span><br><span class="line">        这时需要去settings修改配置<span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,将这一行注释</span><br><span class="line"><span class="number">2.</span>get</span><br><span class="line"><span class="comment">#并且表单中的action=&quot;&quot;若是不填的话，表单会默认会对当前的网址再发送一次请求</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">djongo中的request对象，简单的说就是一个通过wigiref返回的一个对象，可以用于获取请求的各种数据</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>request.method <span class="comment">#获得返回请求的方式(GET/POST) 并且是全大写的字符串形式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>request.POST <span class="comment">#获得POST请求的数据 可以将获得的数据看做一个字典，使用字典的方式取值</span></span><br><span class="line">&gt;&gt;&gt;&lt;QueryDict: &#123;<span class="string">&#x27;username&#x27;</span>: [<span class="string">&#x27;dsb&#x27;</span>], <span class="string">&#x27;possword&#x27;</span>: [<span class="string">&#x27;123&#x27;</span>]&#125;&gt;</span><br><span class="line">    request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    值得一提的是get取得是列表中的最后一个值，若想获得列表需要使用</span><br><span class="line">    request.POST.getlist(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>request.GET <span class="comment">#获得GET请求的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>request.path系列</span><br><span class="line"><span class="number">1.</span>request.path</span><br><span class="line">    <span class="number">2.</span>request.path_info</span><br><span class="line">    <span class="number">3.</span>request.get_full_path() <span class="comment">#获得路径中的全部数据，包括？后的参数</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>request.body <span class="comment">#获得请求体内的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>request.FILES</span><br><span class="line">获得一个类似字典的对象 &lt;MultiValueDict: &#123;<span class="string">&#x27;file&#x27;</span>: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span><br><span class="line">    获得上传的文件</span><br><span class="line">    eg:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request,password</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method ==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            file = request.FILES</span><br><span class="line">            print(file) </span><br><span class="line">            <span class="comment">#&gt;&gt;&gt;&lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">            print(file.get(<span class="string">&#x27;file&#x27;</span>)) <span class="comment">#获得一个文件对象</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file.get(<span class="string">&#x27;file&#x27;</span>).name,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> file.get(<span class="string">&#x27;file&#x27;</span>).chunks():<span class="comment">#不加chunks()也行，但是官方建议加上</span></span><br><span class="line">                    f.write(line)</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">ps：上传文件form表单后面的enctype需要改成enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>request.META</span><br><span class="line">包含了所有本次HTTP请求的Header信息，比如用户IP地址和用户Agent</span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME 类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送的HTTP Host 头部。</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端的user-agent 字符串。 </span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP 地址。 </span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，</span><br><span class="line">    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="djongo连接mysql"><a href="#djongo连接mysql" class="headerlink" title="djongo连接mysql"></a>djongo连接mysql</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中修改</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mysite&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是这样子会报错，因为djongo内部默认是以MySQLdb模块连接的，但是MySQLdb模块兼容性较差容易报错，因此我们需要换成pymysql模块</span></span><br><span class="line"><span class="comment">#我们可以在任意的一个init文件中添加两句话就可以解决问题</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;-&lt;/p&gt;</summary>
    
    
    
    <category term="django" scheme="https://a744740454.github.io/categories/django/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>个人博客新建教程</title>
    <link href="https://a744740454.github.io/2021/01/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://a744740454.github.io/2021/01/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2021-01-12T11:50:43.632Z</published>
    <updated>2021-01-14T08:40:35.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h4><p>这是nodejs的中文官网<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/nodejs%E5%AE%89%E8%A3%85.png"></p><p>然后一路点next即可</p><p>可以通过命令行 node -v npm-v来看是否安装成功</p><p>然后再命令行通过输入 npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org安装cnpm/">https://registry.npm.taobao.org安装cnpm</a></p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/cnpm%E5%AE%89%E8%A3%85.png"></p><p>接下来通过cnpm安装hexo  再命令行输入cnpm install -g hexo-cli</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/hexo%E5%AE%89%E8%A3%85.png"></p><p>再你想新建的地方建一个blog文件夹，然后命令行输入 hexo init 博客初始化</p><p>若没有安装git会报错</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/git%E5%AE%89%E8%A3%85.png"></p><h4 id="git安装地址"><a href="#git安装地址" class="headerlink" title="git安装地址"></a>git安装地址</h4><p>这是阿里的镜像文件的所在地，下的会快点<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p><p>当你安装好以后可以在cmd中hexo s开启本地服务</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/hexo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF.png"></p><p>最后使用hexo new “名称”即可创建新的博客</p><p>在github 新建一个仓库</p><p>在刚刚那个blog文件下用命令行安装一个插件 cnpm install –save hexo-deployer-git</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png"></p><p>在部署到远端之前要对blog文件下的__config文件进行修改。打开该文件移动至最后</p><p>如此修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: git </span><br><span class="line">repo: https://gitee.com/a744740454/a744740454.gitee.io</span><br><span class="line">branch: master </span><br></pre></td></tr></table></figure><p>最后再终端输入</p><p>ssh-keygen -t rsa -C “username” (注：username为你git上的用户名)</p><p>去生成ssh</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/ssh%E7%94%9F%E6%88%901.png"></p><p>然后按两次回车</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/username/.ssh/id_rsa.</span><br><span class="line"></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/username/.ssh/id_rsa.pub.</span><br><span class="line"></span><br><span class="line">The key fingerprint <span class="keyword">is</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">58</span>:<span class="number">42</span>:8b:<span class="number">58</span>:ad:4b:b5:b9:6d:<span class="number">79</span>:bf:8c:f9:e2:2b:ed username</span><br><span class="line"></span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br></pre></td></tr></table></figure><p>代表ssh key生成完成</p><p>文件目录就是：/Users/username/.ssh/id_rsa</p><p>最后我们cd进入/Users/username/.ssh/</p><p>在命令行中输入type id_rsa.pub</p><p>就会出现密钥，然后全部复制</p><p>之后在github添加SSH Key,在任意界面右上角，点击你的头像，选择Settings-&gt; SSH keys-&gt;New SSH key 添加</p><p>最后回到blog文件夹下面，<strong>hexo d</strong> 即可推到远端的github上面</p><p>最后我们使用<strong>username.github.io</strong>即可以访问你的个人博客了</p><p>git clone+’主题地址’+themes/文件名可以将你喜欢的主题下载放入里面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;node-js安装&quot;&gt;&lt;a href=&quot;#node-js安装&quot; class=&quot;headerlink&quot; title=&quot;node.js安装&quot;&gt;&lt;/a&gt;node.js安装&lt;/h4&gt;&lt;p&gt;这是nodejs的中文官网&lt;a href=&quot;http://nodejs.cn/&quot;&gt;h</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
