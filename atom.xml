<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-01-15T00:58:36.481Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>爬虫识别验证码</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E8%AF%86%E5%88%AB/</id>
    <published>2021-01-15T00:47:58.198Z</published>
    <updated>2021-01-15T00:58:36.481Z</updated>
    
    <content type="html"><![CDATA[<h3 id="图片验证码识别"><a href="#图片验证码识别" class="headerlink" title="图片验证码识别"></a>图片验证码识别</h3><p>先安装pillow模块</p><p>​    pip install pillow</p><p>使用打码云网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用方式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> version_info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64_api</span>(<span class="params">uname, pwd, img</span>):</span></span><br><span class="line">    img = img.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    buffered = BytesIO()</span><br><span class="line">    img.save(buffered, <span class="built_in">format</span>=<span class="string">&quot;JPEG&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> version_info.major &gt;= <span class="number">3</span>:</span><br><span class="line">        b64 = <span class="built_in">str</span>(base64.b64encode(buffered.getvalue()), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        b64 = <span class="built_in">str</span>(base64.b64encode(buffered.getvalue()))</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>: uname, <span class="string">&quot;password&quot;</span>: pwd,<span class="string">&#x27;typeid&#x27;</span>:<span class="number">7</span>, <span class="string">&quot;image&quot;</span>: b64&#125;</span><br><span class="line">    result = json.loads(requests.post(<span class="string">&quot;http://api.ttshitu.com/base64&quot;</span>, json=data).text)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&quot;data&quot;</span>][<span class="string">&quot;result&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&quot;message&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    img_path = <span class="string">&quot;test.jpg&quot;</span></span><br><span class="line">    img = Image.<span class="built_in">open</span>(img_path)</span><br><span class="line">    result = base64_api(uname=<span class="string">&#x27;a744740454&#x27;</span>, pwd=<span class="string">&#x27;744740454&#x27;</span>, img=img)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;图片验证码识别&quot;&gt;&lt;a href=&quot;#图片验证码识别&quot; class=&quot;headerlink&quot; title=&quot;图片验证码识别&quot;&gt;&lt;/a&gt;图片验证码识别&lt;/h3&gt;&lt;p&gt;先安装pillow模块&lt;/p&gt;
&lt;p&gt;​    pip install pillow&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="第三方" scheme="https://a744740454.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9/"/>
    
  </entry>
  
  <entry>
    <title>爬虫代理的相关内容</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/%E7%88%AC%E8%99%AB%E4%BB%A3%E7%90%86/</id>
    <published>2021-01-15T00:47:58.189Z</published>
    <updated>2021-01-15T00:57:03.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="爬虫代理"><a href="#爬虫代理" class="headerlink" title="爬虫代理"></a>爬虫代理</h3><p>代理简单的说就是应对反扒手段的一种方式</p><h4 id="代理的含义："><a href="#代理的含义：" class="headerlink" title="代理的含义："></a>代理的含义：</h4><p>​    不是本地的服务器</p><h4 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h4><p>​    隐藏自身的真是IP</p><h4 id="代理ip的类型"><a href="#代理ip的类型" class="headerlink" title="代理ip的类型"></a>代理ip的类型</h4><p>​    http: 对应到与http协议对应的url中</p><p>​    https:应用到https对应的url中</p><h4 id="代理ip的匿名度"><a href="#代理ip的匿名度" class="headerlink" title="代理ip的匿名度"></a>代理ip的匿名度</h4><p>​    透明：服务器知道使用了代理，且知道真实的ip</p><p>​    匿名：服务器知道使用了代理，但不知道真实的ip</p><p>​    高匿：服务器不知道使用了代理</p><h4 id="request模块使用代理的方式"><a href="#request模块使用代理的方式" class="headerlink" title="request模块使用代理的方式"></a>request模块使用代理的方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxies &#x3D; &#123;</span><br><span class="line">  &#39;http&#39;: &#39;http:&#x2F;&#x2F;172.18.101.221:3182&#39;,</span><br><span class="line">  &#39;https&#39;: &#39;http:&#x2F;&#x2F;172.18.101.221:1080&#39;,</span><br><span class="line">&#125;</span><br><span class="line">proxies &#x3D; proxies</span><br></pre></td></tr></table></figure><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;爬虫代理&quot;&gt;&lt;a href=&quot;#爬虫代理&quot; class=&quot;headerlink&quot; title=&quot;爬虫代理&quot;&gt;&lt;/a&gt;爬虫代理&lt;/h3&gt;&lt;p&gt;代理简单的说就是应对反扒手段的一种方式&lt;/p&gt;
&lt;h4 id=&quot;代理的含义：&quot;&gt;&lt;a href=&quot;#代理的含义：&quot; clas</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="代理" scheme="https://a744740454.github.io/tags/%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>xpath模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/xpath%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/xpath%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.181Z</published>
    <updated>2021-01-15T00:55:52.185Z</updated>
    
    <content type="html"><![CDATA[<h3 id="xpath模块"><a href="#xpath模块" class="headerlink" title="xpath模块"></a>xpath模块</h3><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">模块下载</span><br><span class="line">pip install lxml</span><br><span class="line"></span><br><span class="line">模块导入</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="number">1.</span>创建一个etree对象</span><br><span class="line"></span><br><span class="line">    <span class="comment">#1.加载本地的文本,并获得一个对象</span></span><br><span class="line">tree = etree.parse(filepath)  </span><br><span class="line"></span><br><span class="line">    <span class="comment">#2.加载网络上获取的html内容，并获得一个对象</span></span><br><span class="line">    tree = etree.HTML(<span class="string">&#x27;从网络上获取的html内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过xpath方法获得我们需要的内容</span><br><span class="line"></span><br><span class="line">    <span class="comment">#通过xpath获得需要的标签</span></span><br><span class="line">    tree.xpath(<span class="string">&#x27;标签&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#通过xpath获得需要的标签内的属性 ，一个/代表一个层级，开头的//一个代表根目录，一个代表所有内容</span></span><br><span class="line">    tree.xpath(<span class="string">&#x27;//标签[@属性 = &quot;属性的内容&quot;]&#x27;</span>)</span><br><span class="line">    eg：tree.xpath(&#x27;//div[@class=&quot;box1&quot;]&#x27;)返回所有的class = box1的div对象列表</span><br><span class="line">    对标签进行层级查找</span><br><span class="line">    tree.xpath(&#x27;//标签[@属性 = &quot;属性的内容&quot;]/p[3]&#x27;)返回所有的class = box1的div对象内的所有p标签，并找出第三个p标签对象</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#返回文本 在需要返回文本的标签后加text() 注意返回的是列表</span></span><br><span class="line">    xpath(<span class="string">&#x27;//p/text()&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#取得属性 /@属性名</span></span><br><span class="line">    eg:xpath(<span class="string">&#x27;//div/img/@src&#x27;</span>) 获得div下的img标签的src</span><br></pre></td></tr></table></figure><h4 id="解析本地html报错"><a href="#解析本地html报错" class="headerlink" title="解析本地html报错"></a>解析本地html报错</h4><p>lxml.etree.XMLSyntaxError: Opening and ending tag mismatch: link line 45 and head, line 89, column 8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#自己创建解析器</span></span><br><span class="line">parser = etree.HTMLParser(encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&#x27;practice.html&#x27;</span>,parser=parser)</span><br></pre></td></tr></table></figure><h4 id="案例一：58同城二手房源爬取"><a href="#案例一：58同城二手房源爬取" class="headerlink" title="案例一：58同城二手房源爬取"></a>案例一：58同城二手房源爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">page_text = requests.get(<span class="string">&#x27;https://sh.58.com/ershoufang/?utm_source=market&amp;spm=u-2d2yxv86y3v43nkddh1.BDPCPZ_BT&amp;PGTID=0d100000-0000-2756-e0ba-4be2528ff316&amp;ClickID=2&#x27;</span>,headers=headers).text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(page_text)</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//ul[@class=&quot;house-list-wrap&quot;]/li&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    text = li.xpath(<span class="string">&#x27;./div[2]/h2/a/text()&#x27;</span>)</span><br><span class="line">    print(text)</span><br><span class="line">print(<span class="string">&#x27;over&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="爬虫爬取数据时中文乱码"><a href="#爬虫爬取数据时中文乱码" class="headerlink" title="爬虫爬取数据时中文乱码"></a>爬虫爬取数据时中文乱码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">解决方案一:响应的时候对数据进行编码</span><br><span class="line">    response = requests.get(<span class="string">&#x27;http://pic.netbian.com/4kdongman/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">解决方案二:对乱码的数据进行解码在进行编码</span><br><span class="line">    title = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = title.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="案例二：爬取网站图片"><a href="#案例二：爬取网站图片" class="headerlink" title="案例二：爬取网站图片"></a>案例二：爬取网站图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://pic.netbian.com/4kdongman/&#x27;</span>,headers=headers)</span><br><span class="line"><span class="comment"># response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">page_text = response.text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line"></span><br><span class="line">li_list = tree.xpath(<span class="string">&#x27;//div[@class=&quot;slist&quot;]/ul/li&#x27;</span>)</span><br><span class="line">print(li_list)</span><br><span class="line">url = <span class="string">&#x27;http://pic.netbian.com&#x27;</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    img_src = li.xpath(<span class="string">&#x27;./a/img/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = li.xpath(<span class="string">&#x27;./a/img/@alt&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    title = title.encode(<span class="string">&#x27;iso-8859-1&#x27;</span>).decode(<span class="string">&#x27;gbk&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;动漫&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;动漫&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img_src_sure = url + img_src</span><br><span class="line">    print(<span class="string">f&#x27;<span class="subst">&#123;title&#125;</span>爬取完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    img = requests.get(img_src_sure,headers=headers).content</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;动漫/<span class="subst">&#123;title&#125;</span>.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;xpath模块&quot;&gt;&lt;a href=&quot;#xpath模块&quot; class=&quot;headerlink&quot; title=&quot;xpath模块&quot;&gt;&lt;/a&gt;xpath模块&lt;/h3&gt;&lt;h4 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="xpath" scheme="https://a744740454.github.io/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>selenium模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/selenium%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/selenium%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.172Z</published>
    <updated>2021-01-15T00:55:13.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="selenium模块的使用"><a href="#selenium模块的使用" class="headerlink" title="selenium模块的使用"></a>selenium模块的使用</h3><p>selenium模块能帮助我们实现浏览器自动化</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装selenium模块</span><br><span class="line">pip3 install selenium</span><br><span class="line"><span class="number">2.</span>找到与你浏览器对应的版本的驱动，下载谷歌驱动</span><br><span class="line"><span class="comment">#驱动下载地址</span></span><br><span class="line">https://npm.taobao.org/mirrors/chromedriver/</span><br><span class="line"><span class="number">3.</span>下载好驱动以后放到你的程序中即可</span><br></pre></td></tr></table></figure><h4 id="selenium基本使用"><a href="#selenium基本使用" class="headerlink" title="selenium基本使用"></a>selenium基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver <span class="comment">#导入一个加载驱动的模块</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;https://www.pixiv.net/users/30330894/following&#x27;</span></span><br><span class="line">chrome = webdriver.Chrome(executable_path=<span class="string">&#x27;chromedriver.exe&#x27;</span>) <span class="comment">#加载谷歌驱动</span></span><br><span class="line">chrome.get(url) <span class="comment">#向url发起请求</span></span><br><span class="line"></span><br><span class="line">chrome.page_source <span class="comment">#获得页面数据,可以使用lxml将获得的页面数据解析</span></span><br><span class="line"></span><br><span class="line">  .quit退出浏览器，并且进关闭ChromeDriver进程</span><br><span class="line">      .close若是在只有当前页面的情况下会关闭整个浏览器，但是后台的ChromeDriver依然会运行</span><br></pre></td></tr></table></figure><h4 id="selenium确定标签位置的方式"><a href="#selenium确定标签位置的方式" class="headerlink" title="selenium确定标签位置的方式"></a>selenium确定标签位置的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过xpath定位</span><br><span class="line">    .find_element_by_xpath(<span class="string">&quot;xpath&quot;</span>) <span class="comment">#使用该方法的话可以通过xpath找到需要的元素，返回单个元素</span></span><br><span class="line">    .find_elements_by_xpath(<span class="string">&quot;xpath&quot;</span>) <span class="comment">#找到某些标签，返回的是一个列表 </span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>通过<span class="built_in">id</span>定位</span><br><span class="line">    .find_element_by_id()</span><br><span class="line">    .find_element_by_id()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过name定位</span><br><span class="line">.find_element_by_name()</span><br><span class="line">    .find_elements_by_name()</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>通过<span class="class"><span class="keyword">class</span>定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_class_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_class_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">5.通过标签名称定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_tag_name</span>(<span class="params">self, name</span>) </span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_tag_name</span>(<span class="params">self, name</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">6.通过<span class="title">link</span>定位： </span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_link_text</span>(<span class="params">self, link_text</span>)</span></span><br><span class="line"><span class="class">    .<span class="title">find_elements_by_link_text</span>(<span class="params">self, link_text</span>)</span></span><br><span class="line"><span class="class">    </span></span><br><span class="line"><span class="class">7.通过<span class="title">css</span>选择器定位</span></span><br><span class="line"><span class="class">.<span class="title">find_element_by_css_selector</span>(<span class="params">self, css_selector）</span></span></span><br><span class="line"><span class="class"><span class="params">    .find_elements_by_css_selector(<span class="params">self, css_selector）</span></span></span></span><br><span class="line"><span class="class"><span class="params"><span class="params">                                  </span></span></span></span><br></pre></td></tr></table></figure><h4 id="元素操作"><a href="#元素操作" class="headerlink" title="元素操作"></a>元素操作</h4><p>当你找到标签后可以对其进行一定的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span>确定某个标签在浏览器的某个位置</span><br><span class="line">.location </span><br><span class="line">eg:res = chrome.find_elements_by_xpath(<span class="string">&#x27;/html/body/div/div[2]/div[1]/div/a[1]&#x27;</span>)[<span class="number">0</span>].location </span><br><span class="line">    &gt;&gt;&gt;&#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">15</span>, <span class="string">&#x27;y&#x27;</span>: <span class="number">72</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>click操作</span><br><span class="line">Chrome.click()</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>clear</span><br><span class="line">    chrome.clear()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>send_keys()    </span><br><span class="line">chrome.send_keys(data)<span class="comment">#往某个标签内输入值</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>text</span><br><span class="line">chrome.text <span class="comment">#获得标签内文本的值</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>get_attribute()</span><br><span class="line">element.get_attribute(value)<span class="comment">#获得属性值</span></span><br></pre></td></tr></table></figure><h4 id="selenium无头浏览器操作"><a href="#selenium无头浏览器操作" class="headerlink" title="selenium无头浏览器操作"></a>selenium无头浏览器操作</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line">chrome_options = Options()</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">self.chrome = webdriver.Chrome(chrome_options=chrome_options) <span class="comment">#添加该属性</span></span><br></pre></td></tr></table></figure><h4 id="selenium规避被检测"><a href="#selenium规避被检测" class="headerlink" title="selenium规避被检测"></a>selenium规避被检测</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_experimental_option(<span class="string">&#x27;excludeSwitches&#x27;</span>,[<span class="string">&#x27;enable-automation&#x27;</span>])</span><br><span class="line">self.chrome = webdriver.Chrome(options=option)</span><br></pre></td></tr></table></figure><h4 id="selenium切换iframe"><a href="#selenium切换iframe" class="headerlink" title="selenium切换iframe"></a>selenium切换iframe</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">有些网页会使用iframe做到在页面中嵌套页面的情况，遇到这种情况我们是没有办法直接获得子页面的数据的，这种时候我们需要先进行切换，然后在获取数据</span><br><span class="line"><span class="number">1.</span>有<span class="built_in">id</span>，并且唯一，直接写<span class="built_in">id</span></span><br><span class="line">driver.switch_to_frame(<span class="string">&quot;x-URS-iframe&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;x-URS-iframe&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>有name，并且唯一，直接写name</span><br><span class="line">driver.switch_to_frame(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line">driver.switch_to.frame(<span class="string">&quot;xxxx&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>无<span class="built_in">id</span>，无name,先定位iframe元素</span><br><span class="line">iframe = driver.find_elements_by_tag_name(<span class="string">&quot;iframe&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">driver.switch_to_frame(iframe)</span><br><span class="line">driver.switch_to.frame(iframe)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>使用索引的方式直接获取iframe</span><br><span class="line">driver.switch_to_frame(<span class="number">0</span>)<span class="comment">#获取第一个iframe对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;selenium模块的使用&quot;&gt;&lt;a href=&quot;#selenium模块的使用&quot; class=&quot;headerlink&quot; title=&quot;selenium模块的使用&quot;&gt;&lt;/a&gt;selenium模块的使用&lt;/h3&gt;&lt;p&gt;selenium模块能帮助我们实现浏览器自动化&lt;/p</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="selenium" scheme="https://a744740454.github.io/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>scrapy的简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/scrapy%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.162Z</published>
    <updated>2021-01-15T00:53:58.163Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h3><h4 id="scrapy框架的安装"><a href="#scrapy框架的安装" class="headerlink" title="scrapy框架的安装"></a>scrapy框架的安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>pip install wheel</span><br><span class="line"><span class="number">2.</span>下载twisted 下载地址:https://www.lfd.uci.edu/~gohlke/pythonlibs/ <span class="comment">#根据自己系统版本下载</span></span><br><span class="line"><span class="number">3.</span>安装twisted cd进入你下载twisted的包中 pip install Twisted-<span class="number">20.3</span><span class="number">.0</span>-cp38-cp38-win32.whl</span><br><span class="line"><span class="number">4.</span>pip install pywin32</span><br><span class="line"><span class="number">5.</span>pip install scrapy</span><br></pre></td></tr></table></figure><h4 id="scrapy的基本使用"><a href="#scrapy的基本使用" class="headerlink" title="scrapy的基本使用"></a>scrapy的基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个工程 scrapy startproject 项目名称</span><br><span class="line"><span class="number">2.</span>cd进入项目 创建爬虫文件 scrapy genspider 文件名 网址</span><br><span class="line"><span class="number">3.</span>工程执行 scrapy crawl 文件名</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#新建的爬虫文件内的代码</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;first&#x27;</span> <span class="comment"># 文件名</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;www.baidu.com&#x27;</span>] <span class="comment"># 允许爬取哪个域名，一般注释</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://www.baidu.com/&#x27;</span>] <span class="comment"># 运行程序时哪些网址被爬取</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="number">4.</span>在settings 中将 ROBOTSTXT_OBEY改为<span class="literal">False</span>表示不遵守君子协定</span><br><span class="line">LOG_LEVEL = <span class="string">&#x27;ERROR&#x27;</span> 这样的话只会将错误信息打印</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="scrapy中response的基本方法"><a href="#scrapy中response的基本方法" class="headerlink" title="scrapy中response的基本方法"></a>scrapy中response的基本方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xpath() <span class="comment">#我们调用该方法可以直接使用xpath解析的方式去解析数据</span></span><br><span class="line">eg:div_list = response.xpath(<span class="string">&#x27;//*[@id=&quot;content&quot;]/div/div[2]/div&#x27;</span>) 返回一个列表，其中有Selector对象</span><br><span class="line"></span><br><span class="line">extract()<span class="comment">#使用该方法可以提炼出其中的文本，并组成一个字典</span></span><br></pre></td></tr></table></figure><h4 id="数据的持久化存储"><a href="#数据的持久化存储" class="headerlink" title="数据的持久化存储"></a>数据的持久化存储</h4><p>1.基于终端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们只需要在执行文件后添加一个-o 路径即可</span><br><span class="line">eg:scrapy crawl first -o ./qiubai.csv</span><br><span class="line">以该方式存储的只能为<span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;jsonlines&#x27;</span>, <span class="string">&#x27;jl&#x27;</span>, <span class="string">&#x27;csv&#x27;</span>, <span class="string">&#x27;xml&#x27;</span>, <span class="string">&#x27;marshal&#x27;</span>, <span class="string">&#x27;pickle&#x27;</span>这些格式</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;scrapy&quot;&gt;&lt;a href=&quot;#scrapy&quot; class=&quot;headerlink&quot; title=&quot;scrapy&quot;&gt;&lt;/a&gt;scrapy&lt;/h3&gt;&lt;h4 id=&quot;scrapy框架的安装&quot;&gt;&lt;a href=&quot;#scrapy框架的安装&quot; class=&quot;header</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="https://a744740454.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>requests模块简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/request%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/request%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.153Z</published>
    <updated>2021-01-15T00:54:07.621Z</updated>
    
    <content type="html"><![CDATA[<h3 id="request模块"><a href="#request模块" class="headerlink" title="request模块"></a>request模块</h3><p>request模块简单的说就是在模拟浏览器发送请求的过程</p><h4 id="浏览器发送请求的过程"><a href="#浏览器发送请求的过程" class="headerlink" title="浏览器发送请求的过程"></a>浏览器发送请求的过程</h4><p>​    1.指定url</p><p>​    2.发起请求</p><p>​    3.获取响应数据</p><h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.发起请求,获得响应对象</span></span><br><span class="line">response = request.get()</span><br><span class="line">get方法的三个参数</span><br><span class="line"><span class="number">1.</span>url 发送请求的网址</span><br><span class="line">    <span class="number">2.</span>params 文件的路径，可以是一个可迭代的对象，会与上述的url进行拼接</span><br><span class="line">    <span class="number">3.</span>headers 对应请求头</span><br><span class="line"></span><br><span class="line">response = request.post()</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.获取响应对象中的数据，以字符串形式返回</span></span><br><span class="line">page_text = response.text</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.爬取视频与图片时使用</span></span><br><span class="line">response.content</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.爬取json格式时使用</span></span><br><span class="line">response.json()</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.爬取视频时最好一点点存取</span></span><br><span class="line"><span class="keyword">for</span> content <span class="keyword">in</span> response.iter_content()</span><br><span class="line">f.write(content)</span><br></pre></td></tr></table></figure><h4 id="反扒措施一：UA检测"><a href="#反扒措施一：UA检测" class="headerlink" title="反扒措施一：UA检测"></a>反扒措施一：UA检测</h4><p>User—Agent:浏览器的对应版本</p><p>通过检查请求头中的User—Agent服务器可以判断是否是一个正常的浏览器来进行访问</p><h5 id="对应措施"><a href="#对应措施" class="headerlink" title="对应措施"></a>对应措施</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#UA伪装：将自己伪装成一款浏览器</span></span><br><span class="line">将User-Agent放到字典中，可以通过抓包的方式获取User-Agent</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例一：百度网页爬取"><a href="#案例一：百度网页爬取" class="headerlink" title="案例一：百度网页爬取"></a>案例一：百度网页爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>) <span class="comment">#输入你要爬取的关键字</span></span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span> <span class="comment">#进行UA伪装</span></span><br><span class="line">&#125;</span><br><span class="line">info =&#123;</span><br><span class="line">    <span class="string">&#x27;wd&#x27;</span>:kw  <span class="comment"># 设置一个字典以保证requests的拼接 比如wd=&#x27;动漫&#x27; 最后会拼接成https://www.baidu.com/s?wd=&#x27;动漫&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com/s?&#x27;</span>,info,headers = headers)</span><br><span class="line">page_text = response.text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;kw&#125;</span>.html&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f: <span class="comment">#存入文件夹中</span></span><br><span class="line">    f.write(page_text)</span><br></pre></td></tr></table></figure><h4 id="案例二：百度翻译破解-利用request-post"><a href="#案例二：百度翻译破解-利用request-post" class="headerlink" title="案例二：百度翻译破解(利用request.post())"></a>案例二：百度翻译破解(利用request.post())</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">word = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt;&#x27;</span>)</span><br><span class="line">headers =&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">info =&#123;</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>:word</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">&#x27;https://fanyi.baidu.com/sug?&#x27;</span>,info,headers = headers)</span><br><span class="line">info_json = response.json()</span><br><span class="line">print(info_json)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;word&#125;</span>.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(info_json,f,ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="案例三：豆瓣电影爬取"><a href="#案例三：豆瓣电影爬取" class="headerlink" title="案例三：豆瓣电影爬取"></a>案例三：豆瓣电影爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://movie.douban.com/j/chart/top_list&#x27;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;25&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">response = requests.get(url, params, headers=headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">info_json = response.json()</span><br><span class="line">print(info_json)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;豆瓣电影动漫.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(info_json, f, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例四：爬取化妆品化妆品生产许可证信息"><a href="#案例四：爬取化妆品化妆品生产许可证信息" class="headerlink" title="案例四：爬取化妆品化妆品生产许可证信息"></a>案例四：爬取化妆品化妆品生产许可证信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>(<span class="params">url, params, method, is_json=<span class="literal">True</span></span>):</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 判断是get请求还是post请求</span></span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">&#x27;get&#x27;</span>:</span><br><span class="line">        response = requests.get(url, params, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        response = requests.post(url, params, headers=headers)</span><br><span class="line">    print(response.status_code)</span><br><span class="line">    <span class="comment"># 判断返回的数据是否是json数据</span></span><br><span class="line">    <span class="keyword">if</span> is_json:</span><br><span class="line">        info_json = response.json()</span><br><span class="line">        print(info_json)</span><br><span class="line">        <span class="keyword">return</span> info_json</span><br><span class="line">    info = response.text</span><br><span class="line">    print(info)</span><br><span class="line">    <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sure_data</span>(<span class="params">page</span>):</span></span><br><span class="line">    url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: <span class="string">f&#x27;<span class="subst">&#123;page&#125;</span>&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    id_list = []</span><br><span class="line">    json_data = get_data(url, params, <span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> data_dict <span class="keyword">in</span> json_data.get(<span class="string">&#x27;list&#x27;</span>):</span><br><span class="line">        <span class="comment"># 获取到id</span></span><br><span class="line">        id_list.append(data_dict[<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line">    url2 = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        params2 = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        json_data = get_data(url2, params2, <span class="string">&#x27;post&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.json&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(json_data,f,ensure_ascii=<span class="literal">False</span>,indent=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&#x27;over&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = ThreadPoolExecutor(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">355</span>):</span><br><span class="line">        t.submit(get_sure_data(i))</span><br><span class="line">    t.shutdown()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="爬取需要登录才能爬取的网站"><a href="#爬取需要登录才能爬取的网站" class="headerlink" title="爬取需要登录才能爬取的网站"></a>爬取需要登录才能爬取的网站</h4><p>​    cookie是用来记录用户的状态与信息的，在我们进行过登录操作后，用户每发送一次请求都会携带cookies用来证明自己已经进行过登录</p><p>​    服务端也是由cookies来判断这个用户是否进行过登录    </p><p>​    首先我们使用request.Session()获得一个session对象</p><p>​    session对象的使用方法与request一致，session.get(),session.post()</p><p>​    我们使用session.post模拟登录后session会自动获取cookies,并且在下次的请求中自带cookies进行发送</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;request模块&quot;&gt;&lt;a href=&quot;#request模块&quot; class=&quot;headerlink&quot; title=&quot;request模块&quot;&gt;&lt;/a&gt;request模块&lt;/h3&gt;&lt;p&gt;request模块简单的说就是在模拟浏览器发送请求的过程&lt;/p&gt;
&lt;h4 id=&quot;浏</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="requests模块" scheme="https://a744740454.github.io/tags/requests%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>openpyxl的简单使用</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/openpyxl%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/openpyxl%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-15T00:47:58.144Z</published>
    <updated>2021-01-15T00:50:59.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="openpyxl的简单使用"><a href="#openpyxl的简单使用" class="headerlink" title="openpyxl的简单使用"></a>openpyxl的简单使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入模块</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>实例化获得一个对象</span><br><span class="line">mywb = openpyxl.Workbook()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>获得一个sheet对象</span><br><span class="line">sheet = mywb.active</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>为某一个单元格赋值</span><br><span class="line">sheet[col +row] = 数据</span><br><span class="line">eg:</span><br><span class="line">sheet[A1]=test <span class="comment">#为第一个单元格赋值test</span></span><br><span class="line">    </span><br><span class="line"><span class="number">5.</span>存储成excel表</span><br><span class="line">mywb.save(<span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;openpyxl的简单使用&quot;&gt;&lt;a href=&quot;#openpyxl的简单使用&quot; class=&quot;headerlink&quot; title=&quot;openpyxl的简单使用&quot;&gt;&lt;/a&gt;openpyxl的简单使用&lt;/h4&gt;&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="openpyxl" scheme="https://a744740454.github.io/tags/openpyxl/"/>
    
    <category term="excel" scheme="https://a744740454.github.io/tags/excel/"/>
    
  </entry>
  
  <entry>
    <title>bs4模块</title>
    <link href="https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/bs4%E6%A8%A1%E5%9D%97/"/>
    <id>https://a744740454.github.io/2021/01/15/%E7%88%AC%E8%99%AB/bs4%E6%A8%A1%E5%9D%97/</id>
    <published>2021-01-15T00:47:58.128Z</published>
    <updated>2021-01-15T00:54:18.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bs4模块"><a href="#bs4模块" class="headerlink" title="bs4模块"></a>bs4模块</h3><p>bs4模块我们主要使用的就是他其中的BeautilSoup类去用来帮助我们做到解析页面</p><h4 id="bs4模块的导入"><a href="#bs4模块的导入" class="headerlink" title="bs4模块的导入"></a>bs4模块的导入</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br></pre></td></tr></table></figure><h4 id="BeautifulSoup的使用"><a href="#BeautifulSoup的使用" class="headerlink" title="BeautifulSoup的使用"></a>BeautifulSoup的使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获得一个bs对象</span></span><br><span class="line">bs = BeautifulSoup(<span class="string">&#x27;爬取到的页面信息&#x27;</span>,<span class="string">&#x27;使用什么解释器去解析&#x27;</span>)</span><br><span class="line"><span class="comment">#eg：BeautifulSoup(response.text,&#x27;lxml&#x27;) lxml是一种解释器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#bs方法</span></span><br><span class="line">bs.标签名称 返回文档中第一次出现的与标签名称对应的标签</span><br><span class="line">bs.find(标签名称) 返回第一次与标签名称对应的标签</span><br><span class="line">bs.find_all(标签名称，属性名称) 返回与标签名称对应的所有标签列表</span><br><span class="line"><span class="comment">#eg:bs.find(&#x27;div&#x27;,class_/id/attr=&#x27;&#x27;)</span></span><br><span class="line"></span><br><span class="line">select</span><br><span class="line">bs.select(<span class="string">&#x27;选择器&#x27;</span>)，返回的是一个列表</span><br><span class="line">标签.get_text() 获得标签对应的文本</span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;) 获得class=.tang的标签列表</span></span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;)[0].get_text() 获得对应标签的文本</span></span><br><span class="line">标签[属性] <span class="comment">#可以获得对应标签的属性</span></span><br><span class="line"><span class="comment">#eg:bs.select(&#x27;.tang&#x27;)[0][&#x27;href&#x27;] 获得对应标签的href</span></span><br></pre></td></tr></table></figure><h4 id="案例：三国演义爬取"><a href="#案例：三国演义爬取" class="headerlink" title="案例：三国演义爬取"></a>案例：三国演义爬取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.shicimingju.com/book/sanguoyanyi.html&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line">print(response.status_code)</span><br><span class="line">bs = BeautifulSoup(response.text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">sg_dict=&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> bs.select(<span class="string">&#x27;.book-mulu a&#x27;</span>):</span><br><span class="line">    sg_dict[a.text] = a[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(sg_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,url <span class="keyword">in</span> sg_dict.items():</span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">&#x27;sg&#x27;</span>):</span><br><span class="line">        os.mkdir(<span class="string">&#x27;sg&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.shicimingju.com&#x27;</span></span><br><span class="line">        sure_url = base_url + url</span><br><span class="line">        bs2 = BeautifulSoup(requests.get(sure_url,headers=headers).text,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        print(bs2.title)</span><br><span class="line">        print(<span class="string">&#x27;.bookmark-list&#x27;</span>)</span><br><span class="line">        <span class="comment"># with open(f&#x27;sg//&#123;name&#125;.txt&#x27;,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as f:</span></span><br><span class="line">        <span class="comment">#     f.write(bs2.title)</span></span><br><span class="line">        <span class="comment">#     f.write(bs2.select(&#x27;.bookmark-list&#x27;)[0].text)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bs4模块&quot;&gt;&lt;a href=&quot;#bs4模块&quot; class=&quot;headerlink&quot; title=&quot;bs4模块&quot;&gt;&lt;/a&gt;bs4模块&lt;/h3&gt;&lt;p&gt;bs4模块我们主要使用的就是他其中的BeautilSoup类去用来帮助我们做到解析页面&lt;/p&gt;
&lt;h4 id=&quot;bs</summary>
      
    
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/categories/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="bs4" scheme="https://a744740454.github.io/tags/bs4/"/>
    
    <category term="BeautifulSoup" scheme="https://a744740454.github.io/tags/BeautifulSoup/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/01/15/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95/"/>
    <id>https://a744740454.github.io/2021/01/15/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E9%9D%A2%E8%AF%95/</id>
    <published>2021-01-15T00:42:42.041Z</published>
    <updated>2021-01-15T00:42:42.041Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>butterfly配置介绍</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-01-14T09:07:34.953Z</published>
    <updated>2021-01-14T09:09:04.299Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>butterfly主题简单使用</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/butterfly%E4%B8%BB%E9%A2%98%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-01-14T08:41:21.445Z</published>
    <updated>2021-01-14T09:08:42.841Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用主题"><a href="#使用主题" class="headerlink" title="使用主题"></a>使用主题</h4><p>我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#在你的根目录里使用git下载主题</span></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="进行配置"><a href="#进行配置" class="headerlink" title="进行配置"></a>进行配置</h4><p>当主题下载好之后我们在根目录下打开<strong>_config.yml</strong>配置文件进行配置</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114165701170.png" alt="image-20210114165701170"></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">初次安装需要安装下述插件</span><br><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h4 id="移动配置文件（可以不做）"><a href="#移动配置文件（可以不做）" class="headerlink" title="移动配置文件（可以不做）"></a>移动配置文件（可以不做）</h4><p>移动配置文件可以减少升级主题带来的不便</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将主题中的_config.yml移动到根目录并重命名为_config.butterfly.yml</span><br><span class="line">hexo5.0以上才支持这个方法</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/image-20210114170433927.png" alt="image-20210114170433927"></p><h4 id="启动博客网站"><a href="#启动博客网站" class="headerlink" title="启动博客网站"></a>启动博客网站</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">最后使用下述命令即可使用新的主题</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d <span class="comment">#推送到远端</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;使用主题&quot;&gt;&lt;a href=&quot;#使用主题&quot; class=&quot;headerlink&quot; title=&quot;使用主题&quot;&gt;&lt;/a&gt;使用主题&lt;/h4&gt;&lt;p&gt;我们使用hexo搭建完博客之后我们可以选择一个适当的主题去装饰我们的个人博客，这里我选择的是butterfly主题&lt;/p&gt;
</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="butterfly" scheme="https://a744740454.github.io/tags/butterfly/"/>
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>gitee图床搭建</title>
    <link href="https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
    <id>https://a744740454.github.io/2021/01/14/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/gitee%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</id>
    <published>2021-01-14T08:21:05.153Z</published>
    <updated>2021-01-14T08:40:47.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitee图床搭建"><a href="#gitee图床搭建" class="headerlink" title="gitee图床搭建"></a><strong>gitee图床搭建</strong></h3><p><strong>1.新建一个仓库</strong><br>    1.选择公开仓库，不然外界无法访问仓库内的图片<br>    2.选择使用readme文件初始化这个仓库<br>    3.填写仓库名称以及路径<br>    4.点击创建即可</p><p><strong>2.点击头像，找到私人令牌并点击</strong><br>    1.创建一个新令牌<br>    2.选择你私人令牌所拥有的权限 #私人令牌的作用是用于替代用户名与密码的，你可以利用这个私人令牌对仓库进行对应的权限管理<br>    3.获得一串token，这个token需要我们自行保存，丢失之后就没有了。</p><p><strong>3.下载PicGo</strong><br>    这是一款开源的用于上传图片的软件,是当前市面上比较好用的软件<br>    下载链接:<br>        <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><strong>4.配置PicGo</strong><br>    1.下载好之后,我们先在picgo左侧最下边安装一个插件<br>        在搜索框输入<strong>gitee</strong>,下载<strong>gitee-upload</strong></p><p>2.进行图床设置<br>    我们在图床设置里面选择gitee<br>    里面有下述几个参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">repo：(用户名&#x2F;仓库名) #a744740454&#x2F;img</span><br><span class="line">branch: 分支 #一般写master</span><br><span class="line">token: 刚刚的私人令牌的token</span><br><span class="line">path: 存放的具体路径 #eg:img  填写这个的话若没有这个目录会新建，然后上传图片到这个目录下</span><br><span class="line">customPath：  默认即可，不用填写</span><br><span class="line">customUrl：  默认即可，不用填写    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitee图床搭建&quot;&gt;&lt;a href=&quot;#gitee图床搭建&quot; class=&quot;headerlink&quot; title=&quot;gitee图床搭建&quot;&gt;&lt;/a&gt;&lt;strong&gt;gitee图床搭建&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;1.新建一个仓库&lt;/strong&gt;</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>django基础</title>
    <link href="https://a744740454.github.io/2021/01/14/django/django/"/>
    <id>https://a744740454.github.io/2021/01/14/django/django/</id>
    <published>2021-01-14T02:08:17.839Z</published>
    <updated>2021-01-14T08:47:14.802Z</updated>
    
    <content type="html"><![CDATA[<p>-</p><a id="more"></a><h4 id="web应用"><a href="#web应用" class="headerlink" title="web应用"></a>web应用</h4><p>web应用是一种可以通过web访问的应用程序，用户只需要有浏览器即可，不需要安装其他软件</p><h4 id="web框架"><a href="#web框架" class="headerlink" title="web框架"></a>web框架</h4><p>web框架是一种开发框架，用于支持网络应用和网络服务的开发</p><h4 id="动静态网页的区别"><a href="#动静态网页的区别" class="headerlink" title="动静态网页的区别"></a>动静态网页的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态网页：动态网页简单的说就是会随着用户的请求不同而改变内容的网页，一般会有一些后端的代码与前端代码进行交互</span><br><span class="line"></span><br><span class="line">静态网页：简单的说静态网页就是用户无论何时打开网页都是没有变化的，内容是固定的</span><br></pre></td></tr></table></figure><h4 id="python常用的三个web框架"><a href="#python常用的三个web框架" class="headerlink" title="python常用的三个web框架"></a>python常用的三个web框架</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三个框架各自的特点</span></span><br><span class="line">Django:</span><br><span class="line">    大而全，集成了很多组件，有些笨重</span><br><span class="line">Flask:</span><br><span class="line">    小而轻，原生组件几乎为<span class="number">0</span>，但是第三方库极多</span><br><span class="line">Tornado:</span><br><span class="line">    原生的异步非阻塞框架，在处理并发的任务上十分的优秀</span><br></pre></td></tr></table></figure><h4 id="django安装"><a href="#django安装" class="headerlink" title="django安装"></a>django安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.通过命令行安装</span></span><br><span class="line">pip3 install django==<span class="number">1.11</span><span class="number">.11</span></span><br><span class="line"><span class="comment">#2.打开settings 在搜索框中输入python interpreter找到django选择历史版本下载</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part1.png"></p><p><img src="C:\Users\QAQ\Desktop\python学习\图片\python模块安装\模块安装part2.png"></p><h4 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.使用命令行创建，这个项目所在位置为当前你命令行的位置</span></span><br><span class="line">django-admin startproject 项目名称</span><br><span class="line"><span class="comment">#2.使用pycharm创建直接创建项目时选择Django即可</span></span><br></pre></td></tr></table></figure><h4 id="Django项目运行"><a href="#Django项目运行" class="headerlink" title="Django项目运行"></a>Django项目运行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用命令行</span></span><br><span class="line">python manage.py runserver</span><br><span class="line">运行时若报错，找到你widgets.py中</span><br><span class="line">路径：E:\python38\Lib\site-packages\django\contrib\admin\widgets.py</span><br><span class="line">    删除一个逗号</span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\python学习\报错信息\django报错修改.png"></p><h4 id="创建一个app项目"><a href="#创建一个app项目" class="headerlink" title="创建一个app项目"></a>创建一个app项目</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.在命令行中输入</span></span><br><span class="line">python manage.py startapp app名称</span><br><span class="line"><span class="comment">#2.在pycharm中的tool选项中找到run manage.py Task点击在下方输入</span></span><br><span class="line">startapp app名称</span><br></pre></td></tr></table></figure><h4 id="django项目文件详解"><a href="#django项目文件详解" class="headerlink" title="django项目文件详解"></a>django项目文件详解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app01 <span class="comment">#我们创建的app项目，一个app文件夹代表一个功能</span></span><br><span class="line">migrations <span class="comment">#数据库迁移的记录会保存在这里面</span></span><br><span class="line">    admin.py <span class="comment">#django后台管理</span></span><br><span class="line">    apps.py <span class="comment">#注册使用</span></span><br><span class="line">    models.py <span class="comment">#数据库相关的</span></span><br><span class="line">    tests.py <span class="comment">#一个测试文件</span></span><br><span class="line">    views.py <span class="comment">#视图函数，视图层</span></span><br><span class="line">    </span><br><span class="line">mysite</span><br><span class="line">settings.py <span class="comment">#django的配置文件</span></span><br><span class="line">    urls.py <span class="comment">#路由与视图函数的对应关系</span></span><br><span class="line">    wsgi.py <span class="comment">#wsgiref模块</span></span><br><span class="line">db.sqllite3 <span class="comment">#django自带的数据库</span></span><br><span class="line">manage.py <span class="comment">#django的入口文件</span></span><br></pre></td></tr></table></figure><h4 id="使用命令行创建Django项目与pycharm创建Django项目的区别"><a href="#使用命令行创建Django项目与pycharm创建Django项目的区别" class="headerlink" title="使用命令行创建Django项目与pycharm创建Django项目的区别"></a>使用命令行创建Django项目与pycharm创建Django项目的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pycharm创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [os.path.join(BASE_DIR, <span class="string">&#x27;templates&#x27;</span>)] <span class="comment">#template文件夹的路径</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#命令行创建的Django项目</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: []</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">pycharm会在创建Django项目时为你自动添加一个template文件夹以及在配置文件中添加路径，所以若是使用命令行创建需要添加DIRS</span><br></pre></td></tr></table></figure><h4 id="静态文件的配置"><a href="#静态文件的配置" class="headerlink" title="静态文件的配置"></a>静态文件的配置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span>  <span class="comment"># 起到令牌的效果，若是对上令牌则会去下面的路径中查找文件</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">    os.path.join(BASE_DIR, <span class="string">&quot;static&quot;</span>),  <span class="comment"># 静态文件存放位置</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="MVC与MTV"><a href="#MVC与MTV" class="headerlink" title="MVC与MTV"></a>MVC与MTV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MVC:一般市面上的web框架就是MVC框架的，他们将一个web应用分解成三部分，已达到解耦合的目的</span><br><span class="line">M:Models(模板层)用于和数据库打交道</span><br><span class="line">    V:View(视图层)负责与用户进行交互</span><br><span class="line">    C:Controller(控制层)进行逻辑处理的一层</span><br><span class="line">MTV:Django的web模式，本质还是MVC模式</span><br><span class="line">M:models(模型层)  与数据库交互</span><br><span class="line">    T:template(模板层)与用户交互</span><br><span class="line">    V:view(视图函数)  进行逻辑处理</span><br><span class="line">ps：MVC与MTV最大的区别就是MTV将MVC的C又进行了一层拆分，分出了一个urls专门用于处理路由匹配的问题，MVC的路由匹配则是直接在Controller中处理的</span><br></pre></td></tr></table></figure><h4 id="Django三件套"><a href="#Django三件套" class="headerlink" title="Django三件套"></a>Django三件套</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#模块的导入</span></span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> HttpResponse, render, redirect</span><br></pre></td></tr></table></figure><h5 id="前戏"><a href="#前戏" class="headerlink" title="前戏"></a>前戏</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在settings文件中的INSTALLED_APPS中将自己新建的app项目名称放入</span></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app01&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;app02&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">#在urls.py中设置视图与函数的对应关系</span></span><br><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views <span class="comment">#导入对应的视图函数</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^first/&#x27;</span>,views.first) <span class="comment">#当用户请求一个first页面时调用first函数</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回字符串</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;hello world&#x27;</span>) <span class="comment">#返回hello world 给页面</span></span><br></pre></td></tr></table></figure><h5 id="render"><a href="#render" class="headerlink" title="render"></a>render</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回一个网页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;first.html&#x27;</span>) <span class="comment">#返回一个html页面</span></span><br><span class="line"></span><br><span class="line">render参数：</span><br><span class="line">    request:　用于生成响应的请求对象</span><br><span class="line">    template_name:　要使用的模板的完整名称, 可选的参数</span><br><span class="line">    context:　添加到模板上下文的一个字典. 默认是一个空字典. 如果字典中的某个值是可调用的, 视图将在渲染模板之前调用它.</span><br><span class="line">    content_type:　 生成的文档要使用的MIME类型. 默认为DEFAULT_CONTENT_TYPE设置的值. 默认为<span class="string">&quot;text/html&quot;</span></span><br><span class="line">    status:　响应的状态码. 默认为<span class="number">200</span></span><br><span class="line">    useing:　用于加载模板的模板引擎的名称</span><br></pre></td></tr></table></figure><h5 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重定向</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">first</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&#x27;https://www.baidu.com&#x27;</span>) <span class="comment">#跳转到百度</span></span><br></pre></td></tr></table></figure><h5 id="补充：JsonResponse"><a href="#补充：JsonResponse" class="headerlink" title="补充：JsonResponse"></a>补充：JsonResponse</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> JsonResponse <span class="comment">#这个模块允许你直接将字典转化为一个json对象返回，若是其余的数据类型也想返回需要将safe参数设置为False</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> JsonResponse(&#123;<span class="string">&#x27;egon&#x27;</span>:<span class="number">18</span>,<span class="string">&#x27;tank&#x27;</span>:<span class="number">19</span>,<span class="string">&#x27;sadnesspineapple&#x27;</span>:<span class="number">22</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="通过form表单往后端传输数据"><a href="#通过form表单往后端传输数据" class="headerlink" title="通过form表单往后端传输数据"></a>通过form表单往后端传输数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前端往后端提交代码的方式有两种</span></span><br><span class="line"><span class="number">1.</span>post</span><br><span class="line">    post请求可能会报错显示</span><br><span class="line">        Forbidden (<span class="number">403</span>)CSRF verification failed. Request aborted.</span><br><span class="line">        这时需要去settings修改配置<span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,将这一行注释</span><br><span class="line"><span class="number">2.</span>get</span><br><span class="line"><span class="comment">#并且表单中的action=&quot;&quot;若是不填的话，表单会默认会对当前的网址再发送一次请求</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">djongo中的request对象，简单的说就是一个通过wigiref返回的一个对象，可以用于获取请求的各种数据</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>request.method <span class="comment">#获得返回请求的方式(GET/POST) 并且是全大写的字符串形式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>request.POST <span class="comment">#获得POST请求的数据 可以将获得的数据看做一个字典，使用字典的方式取值</span></span><br><span class="line">&gt;&gt;&gt;&lt;QueryDict: &#123;<span class="string">&#x27;username&#x27;</span>: [<span class="string">&#x27;dsb&#x27;</span>], <span class="string">&#x27;possword&#x27;</span>: [<span class="string">&#x27;123&#x27;</span>]&#125;&gt;</span><br><span class="line">    request.POST.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    值得一提的是get取得是列表中的最后一个值，若想获得列表需要使用</span><br><span class="line">    request.POST.getlist(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>request.GET <span class="comment">#获得GET请求的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>request.path系列</span><br><span class="line"><span class="number">1.</span>request.path</span><br><span class="line">    <span class="number">2.</span>request.path_info</span><br><span class="line">    <span class="number">3.</span>request.get_full_path() <span class="comment">#获得路径中的全部数据，包括？后的参数</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>request.body <span class="comment">#获得请求体内的数据</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>request.FILES</span><br><span class="line">获得一个类似字典的对象 &lt;MultiValueDict: &#123;<span class="string">&#x27;file&#x27;</span>: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span><br><span class="line">    获得上传的文件</span><br><span class="line">    eg:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request,password</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.method ==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">            file = request.FILES</span><br><span class="line">            print(file) </span><br><span class="line">            <span class="comment">#&gt;&gt;&gt;&lt;MultiValueDict: &#123;&#x27;file&#x27;: [&lt;InMemoryUploadedFile: 8FCC3F4917F92595DE62B342DCBEF4C4.jpg (image/jpeg)&gt;]&#125;&gt;</span></span><br><span class="line">            print(file.get(<span class="string">&#x27;file&#x27;</span>)) <span class="comment">#获得一个文件对象</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file.get(<span class="string">&#x27;file&#x27;</span>).name,<span class="string">&#x27;wb&#x27;</span>)<span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> line <span class="keyword">in</span> file.get(<span class="string">&#x27;file&#x27;</span>).chunks():<span class="comment">#不加chunks()也行，但是官方建议加上</span></span><br><span class="line">                    f.write(line)</span><br><span class="line">        <span class="keyword">return</span> render(request,<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">ps：上传文件form表单后面的enctype需要改成enctype=<span class="string">&quot;multipart/form-data&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>request.META</span><br><span class="line">包含了所有本次HTTP请求的Header信息，比如用户IP地址和用户Agent</span><br><span class="line">    CONTENT_LENGTH —— 请求的正文的长度（是一个字符串）。</span><br><span class="line">    CONTENT_TYPE —— 请求的正文的MIME 类型。</span><br><span class="line">    HTTP_ACCEPT —— 响应可接收的Content-Type。</span><br><span class="line">    HTTP_ACCEPT_ENCODING —— 响应可接收的编码。</span><br><span class="line">    HTTP_ACCEPT_LANGUAGE —— 响应可接收的语言。</span><br><span class="line">    HTTP_HOST —— 客服端发送的HTTP Host 头部。</span><br><span class="line">    HTTP_REFERER —— Referring 页面。</span><br><span class="line">    HTTP_USER_AGENT —— 客户端的user-agent 字符串。 </span><br><span class="line">    QUERY_STRING —— 单个字符串形式的查询字符串（未解析过的形式）。</span><br><span class="line">    REMOTE_ADDR —— 客户端的IP 地址。 </span><br><span class="line">    REMOTE_HOST —— 客户端的主机名。</span><br><span class="line">    REMOTE_USER —— 服务器认证后的用户。</span><br><span class="line">    REQUEST_METHOD —— 一个字符串，例如<span class="string">&quot;GET&quot;</span> 或<span class="string">&quot;POST&quot;</span>。</span><br><span class="line">    SERVER_NAME —— 服务器的主机名。</span><br><span class="line">    SERVER_PORT —— 服务器的端口（是一个字符串）。</span><br><span class="line"> 　　从上面可以看到，除 CONTENT_LENGTH 和 CONTENT_TYPE 之外，请求中的任何 HTTP 首部转换为 META 的键时，</span><br><span class="line">    都会将所有字母大写并将连接符替换为下划线最后加上 HTTP_  前缀。</span><br><span class="line">    所以，一个叫做 X-Bender 的头部将转换成 META 中的 HTTP_X_BENDER 键。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="djongo连接mysql"><a href="#djongo连接mysql" class="headerlink" title="djongo连接mysql"></a>djongo连接mysql</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">在配置文件中修改</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">        <span class="comment"># &#x27;NAME&#x27;: os.path.join(BASE_DIR, &#x27;db.sqlite3&#x27;),</span></span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mysite&#x27;</span>, <span class="comment">#数据库名称</span></span><br><span class="line">        <span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PORT&#x27;</span>:<span class="number">3306</span>,</span><br><span class="line">        <span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;CHARSET&#x27;</span>:<span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是这样子会报错，因为djongo内部默认是以MySQLdb模块连接的，但是MySQLdb模块兼容性较差容易报错，因此我们需要换成pymysql模块</span></span><br><span class="line"><span class="comment">#我们可以在任意的一个init文件中添加两句话就可以解决问题</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;-&lt;/p&gt;</summary>
    
    
    
    <category term="django" scheme="https://a744740454.github.io/categories/django/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>个人博客新建教程</title>
    <link href="https://a744740454.github.io/2021/01/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%95%99%E7%A8%8B/"/>
    <id>https://a744740454.github.io/2021/01/12/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%96%B0%E5%BB%BA%E6%95%99%E7%A8%8B/</id>
    <published>2021-01-12T11:50:43.632Z</published>
    <updated>2021-01-14T08:40:35.692Z</updated>
    
    <content type="html"><![CDATA[<h4 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h4><p>这是nodejs的中文官网<a href="http://nodejs.cn/">http://nodejs.cn/</a></p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/nodejs%E5%AE%89%E8%A3%85.png"></p><p>然后一路点next即可</p><p>可以通过命令行 node -v npm-v来看是否安装成功</p><p>然后再命令行通过输入 npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org安装cnpm/">https://registry.npm.taobao.org安装cnpm</a></p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/cnpm%E5%AE%89%E8%A3%85.png"></p><p>接下来通过cnpm安装hexo  再命令行输入cnpm install -g hexo-cli</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/hexo%E5%AE%89%E8%A3%85.png"></p><p>再你想新建的地方建一个blog文件夹，然后命令行输入 hexo init 博客初始化</p><p>若没有安装git会报错</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/git%E5%AE%89%E8%A3%85.png"></p><h4 id="git安装地址"><a href="#git安装地址" class="headerlink" title="git安装地址"></a>git安装地址</h4><p>这是阿里的镜像文件的所在地，下的会快点<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p><p>当你安装好以后可以在cmd中hexo s开启本地服务</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/hexo%E6%9C%8D%E5%8A%A1%E5%BC%80%E5%90%AF.png"></p><p>最后使用hexo new “名称”即可创建新的博客</p><p>在github 新建一个仓库</p><p>在刚刚那个blog文件下用命令行安装一个插件 cnpm install –save hexo-deployer-git</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png"></p><p>在部署到远端之前要对blog文件下的__config文件进行修改。打开该文件移动至最后</p><p>如此修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: git </span><br><span class="line">repo: https://gitee.com/a744740454/a744740454.gitee.io</span><br><span class="line">branch: master </span><br></pre></td></tr></table></figure><p>最后再终端输入</p><p>ssh-keygen -t rsa -C “username” (注：username为你git上的用户名)</p><p>去生成ssh</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/ssh%E7%94%9F%E6%88%901.png"></p><p>然后按两次回车</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /Users/username/.ssh/id_rsa.</span><br><span class="line"></span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /Users/username/.ssh/id_rsa.pub.</span><br><span class="line"></span><br><span class="line">The key fingerprint <span class="keyword">is</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">58</span>:<span class="number">42</span>:8b:<span class="number">58</span>:ad:4b:b5:b9:6d:<span class="number">79</span>:bf:8c:f9:e2:2b:ed username</span><br><span class="line"></span><br><span class="line">The key<span class="string">&#x27;s randomart image is:</span></span><br></pre></td></tr></table></figure><p>代表ssh key生成完成</p><p>文件目录就是：/Users/username/.ssh/id_rsa</p><p>最后我们cd进入/Users/username/.ssh/</p><p>在命令行中输入type id_rsa.pub</p><p>就会出现密钥，然后全部复制</p><p>之后在github添加SSH Key,在任意界面右上角，点击你的头像，选择Settings-&gt; SSH keys-&gt;New SSH key 添加</p><p>最后回到blog文件夹下面，<strong>hexo d</strong> 即可推到远端的github上面</p><p>最后我们使用<strong>username.github.io</strong>即可以访问你的个人博客了</p><p>git clone+’主题地址’+themes/文件名可以将你喜欢的主题下载放入里面</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;node-js安装&quot;&gt;&lt;a href=&quot;#node-js安装&quot; class=&quot;headerlink&quot; title=&quot;node.js安装&quot;&gt;&lt;/a&gt;node.js安装&lt;/h4&gt;&lt;p&gt;这是nodejs的中文官网&lt;a href=&quot;http://nodejs.cn/&quot;&gt;h</summary>
      
    
    
    
    <category term="个人博客搭建" scheme="https://a744740454.github.io/categories/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="hexo" scheme="https://a744740454.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
