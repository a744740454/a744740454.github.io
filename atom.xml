<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2021-03-01T07:33:14.352Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://a744740454.github.io/2021/03/01/%E9%80%9A%E7%94%A8%E7%9F%A5%E8%AF%86%E7%82%B9/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-03-01T00:56:25.149Z</published>
    <updated>2021-03-01T07:33:14.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">什么是布隆过滤器</span><br><span class="line">布隆过滤器是一种数据结构，用来判断某个值是否已经存在某个集合中了</span><br><span class="line">优点：空间效率和时间效率极高</span><br><span class="line">缺点：有一定的误识别率，并且随着数据量的增加这个误差的概率会越来越大</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器的应用场景"><a href="#布隆过滤器的应用场景" class="headerlink" title="布隆过滤器的应用场景"></a>布隆过滤器的应用场景</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布隆过滤器广泛应用于网页黑名单系统、垃圾邮件过滤系统、爬虫网址判重系统等。</span><br><span class="line">当你数据库有大量的数据的时候，你每次进行查询都是很消耗服务器资源的一种行为，并且对数据库的压力也会增大。</span><br><span class="line">这种时候就可以考虑使用布隆过滤器</span><br></pre></td></tr></table></figure><h2 id="布隆过滤器原理"><a href="#布隆过滤器原理" class="headerlink" title="布隆过滤器原理"></a>布隆过滤器原理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">当有一个集合，并且集合里面有多个元素时，首先将位数组进行初始化，然后将集合中的数据通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，这个编码可能对应位数组上的一个点获多个点，然后将位数组上对应的值更改为<span class="number">1.</span>数据越多，对应的位数组上的值被改为<span class="number">1</span>的越多。</span><br><span class="line"></span><br><span class="line">位数组:一个很长的二进制向量 </span><br><span class="line"></span><br><span class="line">布隆过滤器误判的原因</span><br><span class="line">当你将一个值通过<span class="built_in">hash</span>函数获得对应的<span class="built_in">hash</span>编码，可能这个值并没有存储过，但是被判断为已经存在过了。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106143141784-1475031003.png" alt="1030776-20170106143141784-1475031003"></p><h2 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">哈希函数是布隆过滤器的基础，布隆过滤器也是根据哈希函数实现的</span><br><span class="line">哈希函数：将任意大小的数据转换成特定大小的数据的函数，转换后的数据称为哈希值或哈希编码</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/1030776-20170106142012816-1867044021.png" alt="1030776-20170106142012816-1867044021"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;布隆过滤器&quot;&gt;&lt;a href=&quot;#布隆过滤器&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器&quot;&gt;&lt;/a&gt;布隆过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/categories/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    
    <category term="布隆过滤器" scheme="https://a744740454.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    <category term="数据结构" scheme="https://a744740454.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Flask请求扩展</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E6%89%A9%E5%B1%95/</id>
    <published>2021-02-24T11:23:50.339Z</published>
    <updated>2021-02-24T11:32:59.820Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask请求扩展"><a href="#Flask请求扩展" class="headerlink" title="Flask请求扩展"></a>Flask请求扩展</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Flask的请求扩展类似于django的中间件，在请求进入视图函数和离开视图函数之后执行的一些功能，总共有<span class="number">7</span>个</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>before_request：请求来之前执行（可以加多个，从上往下执行，等同于中间件的process_request）</span><br><span class="line"><span class="number">2.</span>after_request:请求走之后（可以加多个，从下往上执行，等同于以中间件的process_response）</span><br><span class="line"><span class="number">3.</span>before_first_request:项目运行后的第一次会执行它（初始化的工工作）</span><br><span class="line"><span class="number">4.</span>teardown_request:出错也会走，记录日志</span><br><span class="line"><span class="number">5.</span>errorhandler(<span class="number">404</span>)：状态码是响应的，就会触发它的执行</span><br><span class="line"><span class="comment">#上面五个使用方法大致相似，与下面2个使用方法不一样</span></span><br><span class="line"><span class="meta">@app.before_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">before</span>():</span></span><br><span class="line">    <span class="comment">#取出访问者的ip，记录一下</span></span><br><span class="line">    print(request.path)</span><br><span class="line">    print(<span class="string">&#x27;我执行了&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;回去&#x27;</span>  <span class="comment"># 直接回去了，等同于django中return Response对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>template_global()  <span class="comment"># 全局函数，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_global()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sb</span>(<span class="params">a1, a2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + a2</span><br><span class="line"></span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123;sb(<span class="number">1</span>,<span class="number">2</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>template_filter() <span class="comment"># 全局过滤器，在模板中直接使用</span></span><br><span class="line"><span class="meta">@app.template_filter()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">db</span>(<span class="params">a1,a2,a3,a4</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a1 + <span class="number">100</span>+a2+a3+a4</span><br><span class="line"><span class="comment">#模板中使用</span></span><br><span class="line">&#123;&#123; <span class="number">1</span>|db(<span class="number">2</span>,<span class="number">3</span>)&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask请求扩展&quot;&gt;&lt;a href=&quot;#Flask请求扩展&quot; class=&quot;headerlink&quot; title=&quot;Flask请求扩展&quot;&gt;&lt;/a&gt;Flask请求扩展&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask闪现</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E9%97%AA%E7%8E%B0/</id>
    <published>2021-02-24T11:20:17.247Z</published>
    <updated>2021-02-24T11:20:17.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask闪现"><a href="#Flask闪现" class="headerlink" title="Flask闪现"></a>Flask闪现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">闪现的本质就是先将一部分数据存储在某个位置，下次请求的时候取出来，取出以后该数据消失</span><br><span class="line">而flask的闪现是存放在session中的</span><br><span class="line"></span><br><span class="line">使用</span><br><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> flash</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>存值</span><br><span class="line">flash(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>取值</span><br><span class="line">get_flashed_message()</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>设置闪现分类</span><br><span class="line">flash(<span class="string">&#x27;超时错误&#x27;</span>,category=<span class="string">&quot;x1&quot;</span>) </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>从对应的分类中取出数据</span><br><span class="line">data = get_flashed_messages(category_filter=[<span class="string">&#x27;x1&#x27;</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask闪现&quot;&gt;&lt;a href=&quot;#Flask闪现&quot; class=&quot;headerlink&quot; title=&quot;Flask闪现&quot;&gt;&lt;/a&gt;Flask闪现&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask设置session</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E8%AE%BE%E7%BD%AEsession/</id>
    <published>2021-02-24T11:01:52.026Z</published>
    <updated>2021-02-24T11:07:31.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask设置session"><a href="#Flask设置session" class="headerlink" title="Flask设置session"></a>Flask设置session</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>设置密钥</span><br><span class="line">app.secret_key = <span class="string">&#x27;&#x27;</span>随机密钥</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>导入全局session对象</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>赋值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>] = value</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>取值</span><br><span class="line">session[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"></span><br><span class="line">ps:session存放的位置是浏览器端的cookie中，类似于荷载</span><br></pre></td></tr></table></figure><h2 id="session的执行流程"><a href="#session的执行流程" class="headerlink" title="session的执行流程"></a>session的执行流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>请求来了在open_session中取出cookie，反解数据，包装成session---》视图函数中使用session</span><br><span class="line"><span class="number">2.</span>只要session修改了，请求走了---》save_session---》把session加密，放到cookie中，返回给前端</span><br><span class="line"><span class="number">3.</span>不同浏览器，cookie不同（你的淘宝，同一个浏览器只能登陆一个用户）</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask设置session&quot;&gt;&lt;a href=&quot;#Flask设置session&quot; class=&quot;headerlink&quot; title=&quot;Flask设置session&quot;&gt;&lt;/a&gt;Flask设置session&lt;/h2&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的请求响应</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/Flask%E7%9A%84%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</id>
    <published>2021-02-24T09:20:58.781Z</published>
    <updated>2021-02-24T11:00:57.926Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask的请求对象"><a href="#Flask的请求对象" class="headerlink" title="Flask的请求对象"></a>Flask的请求对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入位置</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>request中的各个属性</span><br><span class="line">    <span class="comment"># print(type(request.values[&#x27;name&#x27;]))  # post和get提交的数据总和 还是个字典</span></span><br><span class="line">    <span class="comment"># print(request.full_path) # 全路径</span></span><br><span class="line">    <span class="comment"># print(request.url)      # 带数据</span></span><br><span class="line">    <span class="comment"># print(request.base_url) # 带域名</span></span><br><span class="line">    <span class="comment"># print(request.files)    # 等同于django中的request.FILES</span></span><br><span class="line">    <span class="comment"># 请求相关信息</span></span><br><span class="line">    <span class="comment"># request.method  提交的方法</span></span><br><span class="line">    <span class="comment"># request.args  get请求提及的数据</span></span><br><span class="line">    <span class="comment"># request.form   post请求提交的数据</span></span><br><span class="line">    <span class="comment"># request.values  post和get提交的数据总和</span></span><br><span class="line">    <span class="comment"># request.cookies  客户端所带的cookie</span></span><br><span class="line">    <span class="comment"># request.headers  请求头</span></span><br><span class="line">    <span class="comment"># request.path     不带域名，请求路径</span></span><br><span class="line">    <span class="comment"># request.full_path  不带域名，带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.script_root</span></span><br><span class="line">    <span class="comment"># request.url           带域名带参数的请求路径</span></span><br><span class="line">    <span class="comment"># request.base_url带域名请求路径</span></span><br><span class="line">    <span class="comment"># request.url_root      域名</span></span><br><span class="line">    <span class="comment"># request.host_url域名</span></span><br><span class="line">    <span class="comment"># request.host127.0.0.1:500</span></span><br><span class="line">    <span class="comment"># request.files</span></span><br></pre></td></tr></table></figure><h2 id="Flask的响应对象"><a href="#Flask的响应对象" class="headerlink" title="Flask的响应对象"></a>Flask的响应对象</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入位置</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>响应对象的生成</span><br><span class="line">response = make_response(render_template(<span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>响应对象设置属性</span><br><span class="line">response.delete_cookie(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">response.set_cookie(<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>)</span><br><span class="line">response.headers[<span class="string">&#x27;X-Something&#x27;</span>] = <span class="string">&#x27;A value&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>生成各个类型的响应对象</span><br><span class="line">res=make_response(render_template(<span class="string">&#x27;index.html&#x27;</span>)) <span class="comment"># 模板响应对象</span></span><br><span class="line">res=make_response(jsonify(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;lqz&#x27;</span>&#125;)) <span class="comment"># json响应对象</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask的请求对象&quot;&gt;&lt;a href=&quot;#Flask的请求对象&quot; class=&quot;headerlink&quot; title=&quot;Flask的请求对象&quot;&gt;&lt;/a&gt;Flask的请求对象&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的模板语言</title>
    <link href="https://a744740454.github.io/2021/02/24/flask/flask%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80/"/>
    <id>https://a744740454.github.io/2021/02/24/flask/flask%E6%A8%A1%E6%9D%BF%E8%AF%AD%E8%A8%80/</id>
    <published>2021-02-24T09:05:38.231Z</published>
    <updated>2021-02-24T09:19:51.954Z</updated>
    
    <content type="html"><![CDATA[<p>Flask的模板语言是按Jinja2模板语言的标准，基于jinja2做了一点点的封装</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">可以说flask的模板语言与django中的模板语言大致相同，但是具备django模板语言所不具备的一些点</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>flask往模板中传递数据</span><br><span class="line">STUDENT = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Old&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">38</span>, <span class="string">&#x27;gender&#x27;</span>: <span class="string">&#x27;中&#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;student.html&quot;</span>, student=STUDENT)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>flask模板语言可以使用.[]get的方式取值</span><br><span class="line">&lt;td&gt;&#123;&#123; student.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; student[&quot;age&quot;] &#125;&#125;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&#123;&#123; student.get(&quot;gender&quot;) &#125;&#125;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>flask模板中可以使用函数的内存地址+括号来调用函数，并传递参数</span><br><span class="line">&lt;td&gt;&#123;&#123; student.get(&quot;gender&quot;) &#125;&#125;&lt;/td&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Flask的模板语言是按Jinja2模板语言的标准，基于jinja2做了一点点的封装&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Flask的CBV如何使用</title>
    <link href="https://a744740454.github.io/2021/02/23/flask/Flask%E7%9A%84CBV%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://a744740454.github.io/2021/02/23/flask/Flask%E7%9A%84CBV%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-23T13:41:06.058Z</published>
    <updated>2021-02-23T13:56:55.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flask的CBV如何使用"><a href="#Flask的CBV如何使用" class="headerlink" title="Flask的CBV如何使用"></a>Flask的CBV如何使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>新建一个类继承views中的MethodView，并在里面重写方法即可</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    methods=[<span class="string">&quot;GET&quot;</span>]   <span class="comment">#允许的请求方式</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">ps:如果继承view.View需要重写dispatch_request()方法，MethodView帮助你写好了dispatch_request</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>在app.add_url_rule中注册路由</span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index.as_view(name=<span class="string">&#x27;index&#x27;</span>)) <span class="comment">#as_view中的name必填</span></span><br></pre></td></tr></table></figure><h2 id="CBV装饰器的使用"><a href="#CBV装饰器的使用" class="headerlink" title="CBV装饰器的使用"></a>CBV装饰器的使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只需要在类中添加一个decorator属性</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span>(<span class="params">views.MethodView</span>):</span></span><br><span class="line">    decorator=()   <span class="comment">#装饰器的内存地址</span></span><br><span class="line">    </span><br><span class="line">cbv源码装饰器部分：</span><br><span class="line"><span class="keyword">if</span> cls.decorators:</span><br><span class="line">    view.__name__ = name</span><br><span class="line">    view.__module__ = cls.__module__</span><br><span class="line">    <span class="keyword">for</span> decorator <span class="keyword">in</span> cls.decorators:</span><br><span class="line">        view = decorator(view)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Flask的CBV如何使用&quot;&gt;&lt;a href=&quot;#Flask的CBV如何使用&quot; class=&quot;headerlink&quot; title=&quot;Flask的CBV如何使用&quot;&gt;&lt;/a&gt;Flask的CBV如何使用&lt;/h2&gt;&lt;figure class=&quot;highlight pyth</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>flask的路由系统</title>
    <link href="https://a744740454.github.io/2021/02/23/flask/flask%E7%9A%84%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/"/>
    <id>https://a744740454.github.io/2021/02/23/flask/flask%E7%9A%84%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-02-23T10:56:54.473Z</published>
    <updated>2021-02-23T13:40:29.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask的路由系统"><a href="#flask的路由系统" class="headerlink" title="flask的路由系统"></a>flask的路由系统</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">flask中最经典的设置路由的方式是通过装饰器</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#route的参数</span></span><br><span class="line"><span class="number">1.</span>rule 路径 <span class="comment">#这个必须要填</span></span><br><span class="line"><span class="number">2.</span>options</span><br><span class="line">methods     <span class="comment">#允许进入的请求方式，例如GET,POST</span></span><br><span class="line">    endpoint    <span class="comment">#别名，用于做反向解析,不写，默认是函数名</span></span><br><span class="line">    default     <span class="comment">#给函数传递的参数</span></span><br><span class="line">    redirect_to <span class="comment">#重定向的地址</span></span><br><span class="line">strict_slashes = <span class="literal">None</span> <span class="comment">#对URL最后的 / 符号是否严格要求</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#转换器</span></span><br><span class="line">我们还可以使用在路由中使用转换器</span><br><span class="line">eg:</span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/detail/&lt;int:nid&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>],endpoint=<span class="string">&#x27;detail&#x27;</span></span>)</span></span><br><span class="line"></span><br><span class="line">flask我们还可以设置另外一种路由方式</span><br><span class="line"><span class="comment">#FBV式的</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index)</span><br><span class="line"></span><br><span class="line"><span class="comment">#CBV式的</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/&#x27;</span>,endpoint=<span class="string">&#x27;index&#x27;</span>,view_func=index.as_view(name=<span class="string">&#x27;index&#x27;</span>)) <span class="comment">#as_view中的name必填</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask的路由系统&quot;&gt;&lt;a href=&quot;#flask的路由系统&quot; class=&quot;headerlink&quot; title=&quot;flask的路由系统&quot;&gt;&lt;/a&gt;flask的路由系统&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>drf视图类及路由设置</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%8F%8A%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%A7%86%E5%9B%BE%E7%B1%BB%E5%8F%8A%E8%B7%AF%E7%94%B1%E8%AE%BE%E7%BD%AE/</id>
    <published>2021-02-22T11:50:55.194Z</published>
    <updated>2021-02-22T11:53:07.597Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drf视图类及路由设置"><a href="#drf视图类及路由设置" class="headerlink" title="drf视图类及路由设置"></a>drf视图类及路由设置</h2><h3 id="drf两个基类"><a href="#drf两个基类" class="headerlink" title="drf两个基类"></a>drf两个基类</h3><p>1.APIView</p><p>​    该类是继承了django原生view类的drf类，他重写了django类的as_view方法，将request换成了自己的request，并做了认证等功能</p><p>​    ps:可以从rest_framework.views</p><p>2.GenericAPIView </p><p>​    该类继承了APIView是对APIView的进一步封装</p><p>​    ps:可以从 rest_framework.generics 导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#继承该类后你只需要在类的开头为类添加queryset，serializer_class</span></span><br><span class="line"><span class="comment">#之后每次之后每次只需要调用get_queryset()就可以或得queryset对象</span></span><br><span class="line"><span class="comment">#每次只需要调用get_serializer()就可以或得序列化器对象对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">GenericAPIView</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        queryset = self.get_queryset()</span><br><span class="line">        ser = self.get_serializer(instance=queryset, many=<span class="literal">True</span>)</span><br><span class="line">        print(ser.data)</span><br><span class="line">        <span class="keyword">return</span> Response(ser.data)</span><br></pre></td></tr></table></figure><h3 id="5个视图扩展类"><a href="#5个视图扩展类" class="headerlink" title="5个视图扩展类"></a>5个视图扩展类</h3><p>基于drf的两个基类又扩展出了5个扩展类，他们是基于上述两个基类之后又进行了一步封装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">可以从rest_framework.mixins中导入 </span><br><span class="line">这五个类需要与GenericAPIView类一起使用</span><br><span class="line">CreateModelMixin <span class="comment">#创建数据 依然需要写post()</span></span><br><span class="line">DestroyModelMixin <span class="comment">#删除单条数据 依然需要写delete()</span></span><br><span class="line">UpdateModelMixin <span class="comment"># 更新数据库数据 依然需要写put()</span></span><br><span class="line">ListModelMixin <span class="comment"># 获得多条数据   需要写名词复数类的get()</span></span><br><span class="line">RetrieveModelMixin <span class="comment">#获得单条数据 需要写名词类的get()</span></span><br><span class="line"></span><br><span class="line">这些类的内部做的就是我们之前写的调用序列化器，将queryset对象传入等操作，这样我们只需要做到简单的调用方法即可</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">GenericAPIView,ListModelMixin</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request,*args,**kwargs</span>):</span> <span class="comment"># 写get方法</span></span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request,*args,**kwargs)</span><br></pre></td></tr></table></figure><h3 id="9个子类视图"><a href="#9个子类视图" class="headerlink" title="9个子类视图"></a>9个子类视图</h3><p>这九个子类视图则是对五个视图扩展类的进一步封装，上述五个视图扩展类还需要我们写get等方法，接下来我们只需要通过继承，就可以实现我们需要的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这九个子类视图我们可以通过rest_framework.generics获得</span><br><span class="line">下述五个实现了基本功能</span><br><span class="line">CreateAPIView ，GenericAPIView，CreateModelMixin</span><br><span class="line">ListAPIView</span><br><span class="line">DestroyAPIView</span><br><span class="line">UpdateAPIView</span><br><span class="line">RetrieveAPIView</span><br><span class="line"></span><br><span class="line">下述<span class="number">4</span>个则是功能的混合搭配</span><br><span class="line">ListCreateAPIView：同时具备查询多个以及创建数据的功能</span><br><span class="line">RetrieveDestroyAPIView：具备查询一个以及删除的功能</span><br><span class="line">RetrieveUpdateAPIView：具备查询一个以及更新的功能</span><br><span class="line">RetrieveUpdateDestroyAPIView：具备查询一个以及更新以及删除的功能</span><br></pre></td></tr></table></figure><h3 id="视图集"><a href="#视图集" class="headerlink" title="视图集"></a>视图集</h3><p>ModelViewSet类则是对上述代码的进一步封装，我们只需要继承该类并在路由中进行一定的配置就可以简单的完成路由与视图的搭配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">该类需要从rest_framework.viewsets中导入</span><br><span class="line"></span><br><span class="line">这个类继承了五个视图扩展类以及GenericViewSet</span><br><span class="line">GenericViewSet:该类继承了ViewSetMixin, generics.GenericAPIView</span><br><span class="line">ViewSet:该类继承ViewSetMixin和APIView</span><br><span class="line">其中的重点便是ViewSetMixin该混合类重写了as_view方法，正是由于重写的这个方法帮助我们做到了视图与类方法的映射</span><br><span class="line"></span><br><span class="line">ps:ReadOnlyModelViewSet：继承mixins.RetrieveModelMixin,mixins.ListModelMixin,GenericViewSet,该类不具备写入的功能</span><br></pre></td></tr></table></figure><h3 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h3><p>我们让一个类继承了ModelViewSet之后我们便需要对视图进行一定的修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line">最原始的直接写</span><br><span class="line"></span><br><span class="line">下述两个方法都需要继承ModelViewSet之后才能使用</span><br><span class="line">方式二：</span><br><span class="line">url(<span class="string">r&#x27;^books/&#x27;</span>, views.Books.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;<span class="comment">#这里写一个字典代表映射关系)),当get请求过来的时候会执行list方法</span></span><br><span class="line">                                    </span><br><span class="line">方式三：自动化创建路径</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(<span class="string">&#x27;路径前缀&#x27;</span>,指定的视图类 ) </span><br><span class="line">eg:router.register(<span class="string">&#x27;books&#x27;</span>, views.Books )</span><br><span class="line">                                    </span><br><span class="line">若使用方式三自动创建路径,若我们需要指定运行的方法时该如何做</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action 导入action装饰器</span><br><span class="line">在你需要执行的类方法上添加该装饰器</span><br><span class="line">                                    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">ModelViewSet</span>):</span></span><br><span class="line">    queryset = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = serialize.BookSerializer</span><br><span class="line">                                    </span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>],detail=<span class="literal">False</span></span>) </span><span class="comment">#当get方法来的时候执行该类方法</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">aaa</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        print(self.action)</span><br><span class="line">        <span class="keyword">return</span> Response(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">                                    </span><br><span class="line">action参数的含义:                                  </span><br><span class="line">-methods：什么请求方式会触发被装饰函数的执行</span><br><span class="line">-detail：是<span class="literal">True</span>是基于带<span class="built_in">id</span>的路由生成的，如果是<span class="literal">False</span>，是基于不带<span class="built_in">id</span>的路由生成的</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;drf视图类及路由设置&quot;&gt;&lt;a href=&quot;#drf视图类及路由设置&quot; class=&quot;headerlink&quot; title=&quot;drf视图类及路由设置&quot;&gt;&lt;/a&gt;drf视图类及路由设置&lt;/h2&gt;&lt;h3 id=&quot;drf两个基类&quot;&gt;&lt;a href=&quot;#drf两个基类&quot; c</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>drf认证、权限、频率实现</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%AE%A4%E8%AF%81%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E9%A2%91%E7%8E%87%E5%AE%9E%E7%8E%B0/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%AE%A4%E8%AF%81%E3%80%81%E6%9D%83%E9%99%90%E3%80%81%E9%A2%91%E7%8E%87%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-02-22T11:50:51.470Z</published>
    <updated>2021-02-22T11:53:21.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drf认证、权限、频率实现"><a href="#drf认证、权限、频率实现" class="headerlink" title="drf认证、权限、频率实现"></a>drf认证、权限、频率实现</h2><h3 id="drf认证功能实现"><a href="#drf认证功能实现" class="headerlink" title="drf认证功能实现"></a>drf认证功能实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个任意的py文件，在里面任意的定义一个类，假设该类名为MyAuth</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>继承BaseAuthentication</span><br><span class="line"><span class="keyword">from</span> rest_framework.authentication <span class="keyword">import</span> BaseAuthentication 从这里导入</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>为该类创建一个authenticate方法</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>在该类中书写认证方法，如果认证成功返回none或元祖，认证失败的话抛出一个异常AuthenticationFailed</span><br><span class="line"></span><br><span class="line">eg：</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Login_Auth</span>(<span class="params">BaseAuthentication</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">authenticate</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        token = request.GET.get(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            models.Auth.objects.get(token=token)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span> <span class="comment">#ps:也可以返回一个元祖</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> AuthenticationFailed(<span class="string">&#x27;还未登录，请先登录&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="drf权限功能的实现"><a href="#drf权限功能的实现" class="headerlink" title="drf权限功能的实现"></a>drf权限功能的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">过程与认证功能基本一致，只不过创建的类继承的类不一样，权限功能继承的类为BasePermission</span><br><span class="line">重写的方法为has_permission</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookPermission</span>(<span class="params">BasePermission</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_permission</span>(<span class="params">self, request, view</span>):</span> <span class="comment">#这里的request与view为之前认证功能返回的元祖中的数据</span></span><br><span class="line">        <span class="keyword">if</span> request.user.user_type == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="comment">#如果权限通过返回true</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span> <span class="comment">#如果权限未通过返回false</span></span><br></pre></td></tr></table></figure><h3 id="内置频率类使用"><a href="#内置频率类使用" class="headerlink" title="内置频率类使用"></a>内置频率类使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">django为我们提供了多个限制频率类</span><br><span class="line">BaseThrottle：基类</span><br><span class="line">AnonRateThrottle：限制匿名用户的访问次数 <span class="comment">#内部通过request.user.isauthenticed判断</span></span><br><span class="line">    SimpleRateThrottle：可以通过自定义扩写它</span><br><span class="line">    ScopedRateThrottle：</span><br><span class="line">    UserRateThrottle：限制登录用户访问次数 </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">使用方法，新建一个类继承SimpleRateThrottle，内部定义一个scope属性，并且重写get_cache_key方法</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThrottle</span>(<span class="params">SimpleRateThrottle</span>):</span></span><br><span class="line">    scope = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_cache_key</span>(<span class="params">self, request, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.get_ident(request)</span><br><span class="line">    </span><br><span class="line">在setting.py中配置</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&quot;DEFAULT_THROTTLE_CLASSES&quot;</span>:[<span class="string">&#x27;app01.auth.MyThrottle&#x27;</span>,],</span><br><span class="line">    <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;xxx&#x27;</span>:<span class="string">&#x27;10/m&#x27;</span><span class="comment"># key跟scope对应，value是一个时间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="认证功能、权限功能、频率功能局部使用和全局使用"><a href="#认证功能、权限功能、频率功能局部使用和全局使用" class="headerlink" title="认证功能、权限功能、频率功能局部使用和全局使用"></a>认证功能、权限功能、频率功能局部使用和全局使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 全局使用（所有接口，都需要登录才能访问）</span><br><span class="line">-在配置文件中</span><br><span class="line">        REST_FRAMEWORK = &#123;</span><br><span class="line">        <span class="string">&quot;DEFAULT_AUTHENTICATION_CLASSES&quot;</span>: [<span class="string">&quot;app01.MyAuthen.LoginAuth&quot;</span>, ], <span class="comment">#认证有关</span></span><br><span class="line">        <span class="string">&quot;DEFAULT_PERMISSION_CLASSES&quot;</span>: [<span class="string">&quot;app01.MyAuthen.SuperPermission&quot;</span>, ] <span class="comment">#权限有关</span></span><br><span class="line">        <span class="string">&quot;DEFAULT_THROTTLE_CLASSES&quot;</span>:[<span class="string">&#x27;app01.auth.MyThrottle&#x27;</span>,],<span class="comment">#频率相关</span></span><br><span class="line">        <span class="string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span> : &#123;</span><br><span class="line">        <span class="string">&#x27;xxx&#x27;</span>:<span class="string">&#x27;10/m&#x27;</span><span class="comment"># key跟scope对应，value是一个时间</span></span><br><span class="line">    &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="number">2</span> 局部使用</span><br><span class="line">-在想局部使用的视图类上</span><br><span class="line">authentication_classes = [MyAuthen.LoginAuth,] <span class="comment">#认证有关</span></span><br><span class="line">    permission_classes = [MyAuthen.SuperPermission] <span class="comment">#权限有关</span></span><br><span class="line">    throttle_classes = [auth.MyThrottle]</span><br><span class="line"><span class="number">3</span> 局部禁用</span><br><span class="line">-在想禁用的视图类上</span><br><span class="line">    authentication_classes = []</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;drf认证、权限、频率实现&quot;&gt;&lt;a href=&quot;#drf认证、权限、频率实现&quot; class=&quot;headerlink&quot; title=&quot;drf认证、权限、频率实现&quot;&gt;&lt;/a&gt;drf认证、权限、频率实现&lt;/h2&gt;&lt;h3 id=&quot;drf认证功能实现&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>drf过滤、排序、分页器</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%BF%87%E6%BB%A4%E3%80%81%E6%8E%92%E5%BA%8F%E3%80%81%E5%88%86%E9%A1%B5%E5%99%A8/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E8%BF%87%E6%BB%A4%E3%80%81%E6%8E%92%E5%BA%8F%E3%80%81%E5%88%86%E9%A1%B5%E5%99%A8/</id>
    <published>2021-02-22T11:50:48.280Z</published>
    <updated>2021-02-22T11:52:01.063Z</updated>
    
    <content type="html"><![CDATA[<h2 id="drf过滤、排序、分页器"><a href="#drf过滤、排序、分页器" class="headerlink" title="drf过滤、排序、分页器"></a>drf过滤、排序、分页器</h2><h3 id="drf内置的排序、过滤功能使用"><a href="#drf内置的排序、过滤功能使用" class="headerlink" title="drf内置的排序、过滤功能使用"></a>drf内置的排序、过滤功能使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">使用的话十分的简单</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> OrderingFilter, SearchFilter 导入这两个类，在可以进行查询的接口中进行一定的配置即可</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤功能</span></span><br><span class="line">filter_backends = [SearchFilter,]</span><br><span class="line">search_fields=(<span class="string">&#x27;name&#x27;</span>,) <span class="comment"># 表中的字段，会去表中该字段进行匹配</span></span><br><span class="line">路径中的写入方式</span><br><span class="line">http://127.0.0.1:8000/students/?search=e # 只能写search</span><br><span class="line">            </span><br><span class="line"><span class="comment">#排序功能</span></span><br><span class="line"> filter_backends = [OrderingFilter]</span><br><span class="line"> ordering_fields = (<span class="string">&#x27;price&#x27;</span>, <span class="string">&#x27;id&#x27;</span>) <span class="comment">#表中的字段，可以以这些字段进行排序</span></span><br><span class="line">路径中的书写方式</span><br><span class="line">http://127.0.0.1:8000/students/?ordering=-age # 必须写ordering</span><br></pre></td></tr></table></figure><h3 id="django-filter的使用"><a href="#django-filter的使用" class="headerlink" title="django-filter的使用"></a>django-filter的使用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先下载django-<span class="built_in">filter</span></span><br><span class="line"><span class="number">2.</span>导入类</span><br><span class="line"><span class="keyword">from</span> django_filters.rest_framework <span class="keyword">import</span> DjangoFilterBackend</span><br><span class="line"><span class="number">3.</span>在视图类中进行配置</span><br><span class="line">    filter_backends = [DjangoFilterBackend]</span><br><span class="line">    filter_fields = (<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;price&#x27;</span>) <span class="comment">#模型中的字段，以这些为查询条件</span></span><br><span class="line"><span class="number">4.</span>路径中的参数</span><br><span class="line">http://127.0.0.1:8000/book/?name=西游记 #为精准匹配，不是模糊查询</span><br></pre></td></tr></table></figure><h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入基类</span><br><span class="line"><span class="keyword">from</span> rest_framework.filters <span class="keyword">import</span> BaseFilterBackend</span><br><span class="line"><span class="number">2.</span>继承并重写他的filter_queryset方法</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filter_queryset</span>(<span class="params">self, request, queryset, view</span>):</span></span><br><span class="line">        <span class="keyword">return</span> queryset  <span class="comment">#必须返回一个queryset对象</span></span><br><span class="line"><span class="number">3.</span>直接在视图类里使用</span><br><span class="line"> filter_backends = [Myfilter.MyFilter]   </span><br></pre></td></tr></table></figure><h3 id="drf分页器的使用"><a href="#drf分页器的使用" class="headerlink" title="drf分页器的使用"></a>drf分页器的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">drf为我们提供了<span class="number">3</span>种分页器</span><br><span class="line"><span class="number">1.</span>PageNumberPagination</span><br><span class="line">我们可以新建一个类然后继承该类，然后在该类中添加<span class="number">4</span>个属性</span><br><span class="line">    page_size = <span class="number">1</span>  <span class="comment"># 每页显示多少条</span></span><br><span class="line">    page_query_param = <span class="string">&#x27;page&#x27;</span>  <span class="comment"># 查询参数</span></span><br><span class="line">    eg：http://127.0.0.1:8000/book/?page=1</span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span>  <span class="comment"># 查询的时候你按什么名称来指定每页显示多少条</span></span><br><span class="line">    eg:http://127.0.0.1:8000/book/?size=3 # 指定每页显示3条，不指定按默认之前配的page_size来</span><br><span class="line">    max_page_size = <span class="number">10</span>  <span class="comment"># 每页最多显示多少条</span></span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>LimitOffsetPagination    </span><br><span class="line">default_limit = <span class="number">2</span>  <span class="comment"># 默认条数</span></span><br><span class="line">    limit_query_param = <span class="string">&#x27;limit&#x27;</span>             <span class="comment"># 查询时，指定查询多少条</span></span><br><span class="line">    offset_query_param = <span class="string">&#x27;offset&#x27;</span>           <span class="comment"># 查询时，指定的起始位置是哪 </span></span><br><span class="line">    max_limit = <span class="literal">None</span>                        <span class="comment"># 查询时，最多返回多少条</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>CursorPagination</span><br><span class="line">cursor_query_param = <span class="string">&#x27;cursor&#x27;</span>  <span class="comment"># 查询的时候，指定的查询方式</span></span><br><span class="line">    page_size = <span class="number">2</span> <span class="comment"># 每页显示多少条</span></span><br><span class="line">    ordering = <span class="string">&#x27;-created&#x27;</span>   <span class="comment"># 排序方式</span></span><br><span class="line">    page_size_query_param = <span class="string">&#x27;size&#x27;</span>  <span class="comment"># 查询的时候指定每页显示多少条</span></span><br><span class="line">    max_page_size = <span class="literal">None</span>          <span class="comment">#每页最多显示多少条</span></span><br><span class="line"></span><br><span class="line">使用方式在视图类中添加</span><br><span class="line">pagination_class = MyPage</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="number">7</span> APIView的分页模式</span><br><span class="line">-新建一个类，继承普通分页，重写四个属性</span><br><span class="line">-视图类写法如下</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentApiView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self,request</span>):</span></span><br><span class="line">        student_list=Student.objects.<span class="built_in">all</span>()</span><br><span class="line">        page=MyPageNumberPagination()<span class="comment"># 实例化得到对象</span></span><br><span class="line">        <span class="comment"># 只需要换不同的分页类即可</span></span><br><span class="line">        res=page.paginate_queryset(student_list,request,self)<span class="comment"># 开始分页</span></span><br><span class="line">        ser=StudentSerializer(res,many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> page.get_paginated_response(ser.data) <span class="comment"># 返回数据</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;drf过滤、排序、分页器&quot;&gt;&lt;a href=&quot;#drf过滤、排序、分页器&quot; class=&quot;headerlink&quot; title=&quot;drf过滤、排序、分页器&quot;&gt;&lt;/a&gt;drf过滤、排序、分页器&lt;/h2&gt;&lt;h3 id=&quot;drf内置的排序、过滤功能使用&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API规范</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/RESTful%20API%E8%A7%84%E8%8C%83/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/RESTful%20API%E8%A7%84%E8%8C%83/</id>
    <published>2021-02-22T11:47:43.320Z</published>
    <updated>2021-02-22T11:49:25.566Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RESTful-API规范-10条"><a href="#RESTful-API规范-10条" class="headerlink" title="RESTful API规范(10条)"></a>RESTful API规范(10条)</h3><p>​    REST全称是<strong>Representational State Transfer</strong>，中文意思是表述（编者注：通常译为表征性状态转移）。 它首次出现在2000年Roy Fielding的博士论文中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>数据的安全保障</span><br><span class="line"><span class="comment">#数据传输一般使用https协议进行传输</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>接口特征表现</span><br><span class="line"><span class="comment">#前后数据交互的接口需要在网址中写入api关键字，用于标识该地址是用于返回数据的</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>多数据版本共存</span><br><span class="line"><span class="comment">#应该将API的版本号放入URL</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>路径</span><br><span class="line"><span class="comment">#在restful规范中指出，每一个路径应当看成一个资源，例如books路径就应该看成所有的图书信息</span></span><br><span class="line">    <span class="comment">#并且在设计路径的时候不要使用动词！</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>资源操作方式由请求决定</span><br><span class="line"><span class="comment">#我们在设计路径的时候不使用动词，这种时候我们就需要使用另外一种方式去判断该请求的目的。例如我们是对一本图书进行删除，增加等</span></span><br><span class="line"><span class="comment">#共有7种请求方式</span></span><br><span class="line">    常用：</span><br><span class="line">        GET（SELECT）：从服务器取出资源（一项或多项）。</span><br><span class="line">        POST（CREATE）：在服务器新建一个资源。</span><br><span class="line">        PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</span><br><span class="line">        PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</span><br><span class="line">        DELETE（DELETE）：从服务器删除资源</span><br><span class="line">    不常用：</span><br><span class="line">        HEAD：获取资源的元数据。</span><br><span class="line">        OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</span><br><span class="line">    </span><br><span class="line"><span class="number">6.</span>过滤，通过在url上传参的形式传递搜索条件</span><br><span class="line"><span class="comment">#我们可以通过url放回过滤参数。例如?limit=10指的是过滤出前10条</span></span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>响应状态码</span><br><span class="line"><span class="comment">#服务器端向客户端返回数据的时候需要添加状态码</span></span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>错误处理，应当返回错误信息，error当做key</span><br><span class="line"><span class="comment">#服务器端对应不同的状态码应当返回对应的错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>返回结果，针对不同操作，服务器向用户返回的文档需要符合下述规范</span><br><span class="line">GET /collection：返回资源对象的列表（数组）</span><br><span class="line">    GET /collection/resource：返回单个资源对象</span><br><span class="line">    POST /collection：返回新生成的资源对象</span><br><span class="line">    PUT /collection/resource：返回完整的资源对象</span><br><span class="line">    PATCH /collection/resource：返回完整的资源对象</span><br><span class="line">    DELETE /collection/resource：返回一个空文档</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>需要url请求的可以在返回结果中返回链接</span><br><span class="line"><span class="comment">#字面意思，若是前端的代码需要url连接的话在返回的json数据中携带url。例如图片的url</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;RESTful-API规范-10条&quot;&gt;&lt;a href=&quot;#RESTful-API规范-10条&quot; class=&quot;headerlink&quot; title=&quot;RESTful API规范(10条)&quot;&gt;&lt;/a&gt;RESTful API规范(10条)&lt;/h3&gt;&lt;p&gt;​    RES</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
    <category term="RESTful API" scheme="https://a744740454.github.io/tags/RESTful-API/"/>
    
  </entry>
  
  <entry>
    <title>drf序列化器</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/drf%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</id>
    <published>2021-02-22T10:25:41.294Z</published>
    <updated>2021-02-22T10:28:02.781Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化器的各个字段以及字段内属性"><a href="#序列化器的各个字段以及字段内属性" class="headerlink" title="序列化器的各个字段以及字段内属性"></a>序列化器的各个字段以及字段内属性</h2><p>字段表格：</p><table><thead><tr><th><strong>BooleanField</strong></th><th>BooleanField()</th></tr></thead><tbody><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length=None, min_length=None, allow_blank=False, trim_whitespace=True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length=None, min_length=None, allow_blank=False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length=50, min_length=None, allow_blank=False) 正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length=200, min_length=None, allow_blank=False)</td></tr><tr><td><strong>UUIDField</strong></td><td>UUIDField(format=’hex_verbose’) format: 1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code> 2） <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code> 3）<code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code> 4）<code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol=’both’, unpack_ipv4=False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value=None, min_value=None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value=None, min_value=None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string=None, max_value=None, min_value=None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format=api_settings.DATETIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format=api_settings.DATE_FORMAT, input_formats=None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format=api_settings.TIME_FORMAT, input_formats=None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length=None, allow_empty_file=False, use_url=UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child=, min_length=None, max_length=None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child=)</td></tr></tbody></table><p>通用字段属性</p><table><thead><tr><th><strong>read_only</strong></th><th>表明该字段只会在返回数据的时候起到作用，并不会在写入数据的时候起到作用，默认False</th></tr></thead><tbody><tr><td><strong>write_only</strong></td><td>表明该字段只会在往数据库输入的时候起到作用，并不会在返回数据的时候将该字段数据返回，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>可以使用该属性进行数据校验，为该属性传入的是一个列表，列表内放入函数的内存地址</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><p>非通用属性</p><table><thead><tr><th><strong>max_length</strong></th><th>最大长度</th></tr></thead><tbody><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h2 id="drf序列化器的全局钩子与局部钩子"><a href="#drf序列化器的全局钩子与局部钩子" class="headerlink" title="drf序列化器的全局钩子与局部钩子"></a>drf序列化器的全局钩子与局部钩子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">局部钩子,validate_字段名，必须要有data,data就是form组件的clean_data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate_title</span>(<span class="params">self, data</span>):</span> </span><br><span class="line">    <span class="keyword">if</span> data.startswith(<span class="string">&#x27;sb&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;不能以sb开头&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        </span><br><span class="line">全局钩子,attrs就是form组件的clean_data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validate</span>(<span class="params">self, attrs</span>):</span></span><br><span class="line">    title=attrs.get(<span class="string">&#x27;title&#x27;</span>)</span><br><span class="line">    publish=attrs.get(<span class="string">&#x27;publish&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> title==publish:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;书名不能跟出版社同名&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> attrs</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">validators 字段中指定特定函数去处理检测</span><br><span class="line">publish = serializers.CharField(max_length=<span class="number">32</span>,validators=[check,])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">data</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data)&gt;<span class="number">10</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValidationError(<span class="string">&#x27;最长不能超过10&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><h2 id="序列化器的高级使用"><a href="#序列化器的高级使用" class="headerlink" title="序列化器的高级使用"></a>序列化器的高级使用</h2><h3 id="1-source"><a href="#1-source" class="headerlink" title="1.source"></a>1.source</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>可以通过source与models中的字段进行映射关系，这样我们可以任意取名，为返回的数据命名</span><br><span class="line">book_name = serializers.CharField(min_length=<span class="number">3</span>, max_length=<span class="number">32</span>,source=<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>与models中的任意方法进行映射</span><br><span class="line">我们可以创建任意一个不存在的字段，与models中的任意函数进行映射</span><br><span class="line">    序列化器中</span><br><span class="line">    name_price = serializers.CharField(source=<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    models中：</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="built_in">str</span>(self.price)</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>支持跨表查询数据</span><br><span class="line">    publish_addr = serializers.CharField(max_length=<span class="number">32</span> , source=<span class="string">&#x27;publish.addr&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-SerializerMethodField"><a href="#2-SerializerMethodField" class="headerlink" title="2.SerializerMethodField"></a>2.SerializerMethodField</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用该字段后，你可以在下面写一个方法与该字段进行绑定，下面的方法的返回值就是你这个字段要被序列化，反序列化的值</span><br><span class="line"><span class="comment">#命名规范</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_</span>字段名(<span class="params">self,obj</span>) #<span class="title">obj</span>是必须要有的，<span class="title">obj</span>为你这个类绑定的表的对象</span></span><br></pre></td></tr></table></figure><h2 id="模型类序列化器"><a href="#模型类序列化器" class="headerlink" title="模型类序列化器"></a>模型类序列化器</h2><h3 id="ModelSerilizer"><a href="#ModelSerilizer" class="headerlink" title="ModelSerilizer"></a>ModelSerilizer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">serializers.ModelSerializer</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = models.Book <span class="comment">#与model中的哪个表进行关联</span></span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span> <span class="comment">#将哪些字段进行序列化或反序列化__all__是指全部序列化</span></span><br><span class="line">        exclude = [字段] <span class="comment">#除了哪些字段都进行序列化以及反序列化，不能跟fields同时使用</span></span><br><span class="line">        read_only_fields = [字段] <span class="comment">#只读与之前的read_only一样</span></span><br><span class="line">        write_only_fields = [字段] <span class="comment">#只写</span></span><br><span class="line">        extra_kwargs = &#123;字段:&#123;属性&#125;&#125; eg:&#123;<span class="string">&#x27;title&#x27;</span>:&#123;<span class="string">&#x27;max_length&#x27;</span>:<span class="number">32</span>,<span class="string">&#x27;write_only&#x27;</span>:<span class="literal">True</span>&#125;&#125;</span><br><span class="line">        depth = <span class="number">1</span> <span class="comment">#跨表查询，将另外一张与该表有关表的数据全部查出</span></span><br><span class="line">        </span><br><span class="line">新增与修改</span><br><span class="line">不需要重写create与update方法，在ModelSerializer以及进行了重写</span><br><span class="line"></span><br><span class="line">ps:值得注意的是，使用该序列器并对表进行关联后，当你调用is_valid()方法后，他会去帮助你检验数据库中的校验规则，比如用户名必须唯一等</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;序列化器的各个字段以及字段内属性&quot;&gt;&lt;a href=&quot;#序列化器的各个字段以及字段内属性&quot; class=&quot;headerlink&quot; title=&quot;序列化器的各个字段以及字段内属性&quot;&gt;&lt;/a&gt;序列化器的各个字段以及字段内属性&lt;/h2&gt;&lt;p&gt;字段表格：&lt;/p&gt;
&lt;tab</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>rest-framework初识</title>
    <link href="https://a744740454.github.io/2021/02/22/django/rest-framework/rest-framework%E5%88%9D%E8%AF%86/"/>
    <id>https://a744740454.github.io/2021/02/22/django/rest-framework/rest-framework%E5%88%9D%E8%AF%86/</id>
    <published>2021-02-22T06:59:44.310Z</published>
    <updated>2021-02-22T10:28:25.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是rest-framework"><a href="#什么是rest-framework" class="headerlink" title="什么是rest_framework"></a>什么是rest_framework</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rest_framework简称drf</span><br><span class="line">rest_framework是基于django与RESTful API规范设计的框架。</span><br></pre></td></tr></table></figure><h2 id="drf的简单使用"><a href="#drf的简单使用" class="headerlink" title="drf的简单使用"></a>drf的简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装</span><br><span class="line">pip install djangorestframework</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>注册</span><br><span class="line">在django的配置文件中进行注册，drf本质是一个app,所以我们在注册app的地方注册即可</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>进行数据迁移</span><br><span class="line">python manage.py makemigrations</span><br><span class="line">python manage.py migrate</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>新写一个序列化器类</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">serializers.Serializer</span>):</span></span><br><span class="line">    <span class="comment">#写字段</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    name = serializers.CharField(min_length=<span class="number">3</span>, max_length=<span class="number">32</span>)</span><br><span class="line">    price = serializers.DecimalField(max_digits=<span class="number">5</span>, decimal_places=<span class="number">2</span>)</span><br><span class="line">    publish = serializers.CharField(max_length=<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>视图函数中创建类，以及在路由中配置路由</span><br><span class="line"><span class="comment">#路由</span></span><br><span class="line">url(<span class="string">r&#x27;^books/&#x27;</span>, views.Books.as_view()),</span><br><span class="line"></span><br><span class="line"><span class="comment">#视图 返回的Response是drf的Response</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Books</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        books = models.Book.objects.<span class="built_in">all</span>()</span><br><span class="line">        book_ser = ser.Book(instance=books, many=<span class="literal">True</span>) <span class="comment"># 传入一个queryset对象，序列器会自动帮你转化为字典</span></span><br><span class="line">        <span class="keyword">return</span> Response(book_ser.data)</span><br><span class="line">    ps:序列器对象中的参数</span><br><span class="line">        many:若是多个对象要使该参数为true</span><br><span class="line">        instance:传入你实例化的对象</span><br><span class="line">        data:传入一个反序列化的数据</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是rest-framework&quot;&gt;&lt;a href=&quot;#什么是rest-framework&quot; class=&quot;headerlink&quot; title=&quot;什么是rest_framework&quot;&gt;&lt;/a&gt;什么是rest_framework&lt;/h2&gt;&lt;figure class</summary>
      
    
    
    
    <category term="rest-framework" scheme="https://a744740454.github.io/categories/rest-framework/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="rest-framework" scheme="https://a744740454.github.io/tags/rest-framework/"/>
    
    <category term="drf" scheme="https://a744740454.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>web应用介绍</title>
    <link href="https://a744740454.github.io/2021/02/22/django/web%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://a744740454.github.io/2021/02/22/django/web%E5%BA%94%E7%94%A8%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-02-22T06:47:24.537Z</published>
    <updated>2021-02-22T06:50:13.436Z</updated>
    
    <content type="html"><![CDATA[<h4 id="什么是web应用"><a href="#什么是web应用" class="headerlink" title="什么是web应用"></a>什么是web应用</h4><p>web应用是一种可以通过web访问的应用程序，用户只需要有浏览器即可，不需要安装其他软件</p><h4 id="什么是web框架"><a href="#什么是web框架" class="headerlink" title="什么是web框架"></a>什么是web框架</h4><p>web框架是一种开发框架，用于支持网络应用和网络服务的开发</p><h4 id="动静态网页的区别"><a href="#动静态网页的区别" class="headerlink" title="动静态网页的区别"></a>动静态网页的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">动态网页：动态网页简单的说就是会随着用户的请求不同而改变内容的网页，一般会有一些后端的代码与前端代码进行交互</span><br><span class="line"></span><br><span class="line">静态网页：简单的说静态网页就是用户无论何时打开网页都是没有变化的，内容是固定的</span><br></pre></td></tr></table></figure><h4 id="python常用的三个web框架的区别"><a href="#python常用的三个web框架的区别" class="headerlink" title="python常用的三个web框架的区别"></a>python常用的三个web框架的区别</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#三个框架各自的特点</span></span><br><span class="line">Django:</span><br><span class="line">    大而全，集成了很多组件，有些笨重</span><br><span class="line">Flask:</span><br><span class="line">    小而轻，原生组件几乎为<span class="number">0</span>，但是第三方库极多</span><br><span class="line">Tornado:</span><br><span class="line">    原生的异步非阻塞框架，在处理并发的任务上十分的优秀</span><br></pre></td></tr></table></figure><h4 id="MVC与MTV"><a href="#MVC与MTV" class="headerlink" title="MVC与MTV"></a>MVC与MTV</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MVC:一般市面上的web框架就是MVC框架的，他们将一个web应用分解成三部分，已达到解耦合的目的</span><br><span class="line">M:Models(模板层)用于和数据库打交道</span><br><span class="line">    V:View(视图层)负责与用户进行交互</span><br><span class="line">    C:Controller(控制层)进行逻辑处理的一层</span><br><span class="line">MTV:Django的web模式，本质还是MVC模式</span><br><span class="line">M:models(模型层)  与数据库交互</span><br><span class="line">    T:template(模板层)与用户交互</span><br><span class="line">    V:view(视图函数)  进行逻辑处理</span><br><span class="line">ps：MVC与MTV最大的区别就是MTV将MVC的C又进行了一层拆分，分出了一个urls专门用于处理路由匹配的问题，MVC的路由匹配则是直接在Controller中处理的</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;什么是web应用&quot;&gt;&lt;a href=&quot;#什么是web应用&quot; class=&quot;headerlink&quot; title=&quot;什么是web应用&quot;&gt;&lt;/a&gt;什么是web应用&lt;/h4&gt;&lt;p&gt;web应用是一种可以通过web访问的应用程序，用户只需要有浏览器即可，不需要安装其他软件&lt;/</summary>
      
    
    
    
    <category term="django" scheme="https://a744740454.github.io/categories/django/"/>
    
    
    <category term="django" scheme="https://a744740454.github.io/tags/django/"/>
    
    <category term="web应用" scheme="https://a744740454.github.io/tags/web%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>flask的简单使用</title>
    <link href="https://a744740454.github.io/2021/02/14/flask/flask/"/>
    <id>https://a744740454.github.io/2021/02/14/flask/flask/</id>
    <published>2021-02-14T06:32:37.707Z</published>
    <updated>2021-02-23T13:35:08.460Z</updated>
    
    <content type="html"><![CDATA[<h2 id="flask的简单使用"><a href="#flask的简单使用" class="headerlink" title="flask的简单使用"></a>flask的简单使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装flask</span><br><span class="line">pip install flask</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>新建一个py项目，并实例化获得一个flask对象</span><br><span class="line">eg:</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,redirect</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>写一个函数</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>启动服务</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,port=<span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h2 id="flask返回页面"><a href="#flask返回页面" class="headerlink" title="flask返回页面"></a>flask返回页面</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>重定向</span><br><span class="line"><span class="number">1.</span>导入redirect</span><br><span class="line">    <span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="number">2.</span>在对应的函数中返回</span><br><span class="line"><span class="meta">        @app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">            <span class="keyword">return</span> redirect()</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>直接返回字符串</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;任意字符&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>返回模板</span><br><span class="line"><span class="number">1.</span>导入render_template</span><br><span class="line">    <span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line">    <span class="number">2.</span>返回</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>返回json格式字符串</span><br><span class="line"><span class="number">1.</span>导入jsonify</span><br><span class="line">    <span class="keyword">from</span> flask <span class="keyword">import</span> jsonify</span><br><span class="line">    <span class="number">2.</span>返回</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&quot;username&quot;</span>: <span class="string">&quot;admin&quot;</span>,&#125;)</span><br></pre></td></tr></table></figure><h2 id="flask函数中使用反向解析"><a href="#flask函数中使用反向解析" class="headerlink" title="flask函数中使用反向解析"></a>flask函数中使用反向解析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在django中我们若要在函数中使用反向解析，我们使用的是reverse,而flask中则是url_for</span><br><span class="line"></span><br><span class="line">导入:</span><br><span class="line">    <span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line">参数:</span><br><span class="line">    endpoint --函数别名</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    url=url_for(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url) <span class="comment">#重定向到endpoint为home的路径上去</span></span><br></pre></td></tr></table></figure><h2 id="flask的配置文件"><a href="#flask的配置文件" class="headerlink" title="flask的配置文件"></a>flask的配置文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">flask使用配置文件有多种方式</span><br><span class="line"><span class="number">1.</span>直接针对flask的对象进行配置，但是只能配两种</span><br><span class="line">app=Flask(__name__)</span><br><span class="line">app.secret_key=<span class="string">&#x27;asdfasdfasdf4545322wefaaeaesfsad&#x27;</span></span><br><span class="line">app.debug=<span class="literal">True</span>  <span class="comment"># 调试模式</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>给对象的config设置，可以设置所有配置文件</span><br><span class="line">app.config[<span class="string">&#x27;DEBUG&#x27;</span>]=<span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>通过配置文件进行配置</span><br><span class="line">app.config.from_pyfile(<span class="string">&quot;settings.py&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>通过环境变量进行配置</span><br><span class="line">os.environ[<span class="string">&#x27;DEBUG&#x27;</span>]=<span class="string">&#x27;ddd&#x27;</span></span><br><span class="line">app.config.from_envvar(os.environ[<span class="string">&#x27;DEBUG&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>通过json格式文件进行配置</span><br><span class="line">app.config.from_json(<span class="string">&quot;setting.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>通过字典进行配置</span><br><span class="line">app.config.from_mapping(&#123;<span class="string">&#x27;DEBUG&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>通过类配置</span><br><span class="line">app.config.from_object(<span class="string">&#x27;settings.ProductionConfig&#x27;</span>) <span class="comment">#在settings文件夹中写一个类即可</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line">    TESTING = <span class="literal">False</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;xxxx&#x27;</span></span><br><span class="line">    USER=<span class="string">&#x27;root&#x27;</span></span><br><span class="line">    PASSWORD=<span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DATABASE_URI = <span class="string">&#x27;mysql://user@localhost/foo&#x27;</span></span><br><span class="line">    USER = <span class="string">&#x27;luffy&#x27;</span></span><br><span class="line">    PASSWORD = <span class="string">&#x27;luffy?&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="flask的默认配置"><a href="#flask的默认配置" class="headerlink" title="flask的默认配置"></a>flask的默认配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        <span class="string">&#x27;DEBUG&#x27;</span>:                                get_debug_flag(default=<span class="literal">False</span>),  是否开启Debug模式</span><br><span class="line">        <span class="string">&#x27;TESTING&#x27;</span>:                              <span class="literal">False</span>,                          是否开启测试模式</span><br><span class="line">        <span class="string">&#x27;PROPAGATE_EXCEPTIONS&#x27;</span>:                 <span class="literal">None</span>,                          </span><br><span class="line">        <span class="string">&#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;</span>:        <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SECRET_KEY&#x27;</span>:                           <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;PERMANENT_SESSION_LIFETIME&#x27;</span>:           timedelta(days=<span class="number">31</span>),</span><br><span class="line">        <span class="string">&#x27;USE_X_SENDFILE&#x27;</span>:                       <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;LOGGER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;LOGGER_HANDLER_POLICY&#x27;</span>:               <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SERVER_NAME&#x27;</span>:                          <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;APPLICATION_ROOT&#x27;</span>:                     <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_NAME&#x27;</span>:                  <span class="string">&#x27;session&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_DOMAIN&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_PATH&#x27;</span>:                  <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_HTTPONLY&#x27;</span>:              <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_COOKIE_SECURE&#x27;</span>:                <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;SESSION_REFRESH_EACH_REQUEST&#x27;</span>:         <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>:                   <span class="literal">None</span>,</span><br><span class="line">        <span class="string">&#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;</span>:            timedelta(hours=<span class="number">12</span>),</span><br><span class="line">        <span class="string">&#x27;TRAP_BAD_REQUEST_ERRORS&#x27;</span>:              <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;TRAP_HTTP_EXCEPTIONS&#x27;</span>:                 <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;EXPLAIN_TEMPLATE_LOADING&#x27;</span>:             <span class="literal">False</span>,</span><br><span class="line">        <span class="string">&#x27;PREFERRED_URL_SCHEME&#x27;</span>:                 <span class="string">&#x27;http&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;JSON_AS_ASCII&#x27;</span>:                        <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSON_SORT_KEYS&#x27;</span>:                       <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;</span>:          <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;JSONIFY_MIMETYPE&#x27;</span>:                     <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TEMPLATES_AUTO_RELOAD&#x27;</span>:                <span class="literal">None</span>,</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="flask默认拥有的转换器"><a href="#flask默认拥有的转换器" class="headerlink" title="flask默认拥有的转换器"></a>flask默认拥有的转换器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>:          UnicodeConverter,  <span class="comment">#默认不填属性时设置的</span></span><br><span class="line">    <span class="string">&#x27;string&#x27;</span>:           UnicodeConverter,</span><br><span class="line">    <span class="string">&#x27;any&#x27;</span>:              AnyConverter,</span><br><span class="line">    <span class="string">&#x27;path&#x27;</span>:             PathConverter,</span><br><span class="line">    <span class="string">&#x27;int&#x27;</span>:              IntegerConverter,</span><br><span class="line">    <span class="string">&#x27;float&#x27;</span>:            FloatConverter,</span><br><span class="line">    <span class="string">&#x27;uuid&#x27;</span>:             UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;flask的简单使用&quot;&gt;&lt;a href=&quot;#flask的简单使用&quot; class=&quot;headerlink&quot; title=&quot;flask的简单使用&quot;&gt;&lt;/a&gt;flask的简单使用&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    <category term="flask" scheme="https://a744740454.github.io/categories/flask/"/>
    
    
    <category term="flask" scheme="https://a744740454.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>scrapy提高爬取效率</title>
    <link href="https://a744740454.github.io/2021/02/12/%E7%88%AC%E8%99%AB/scrapy/scrapy%E6%8F%90%E9%AB%98%E7%88%AC%E5%8F%96%E6%95%88%E7%8E%87/"/>
    <id>https://a744740454.github.io/2021/02/12/%E7%88%AC%E8%99%AB/scrapy/scrapy%E6%8F%90%E9%AB%98%E7%88%AC%E5%8F%96%E6%95%88%E7%8E%87/</id>
    <published>2021-02-12T05:46:12.545Z</published>
    <updated>2021-02-16T04:20:06.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="提高爬虫效率"><a href="#提高爬虫效率" class="headerlink" title="提高爬虫效率"></a>提高爬虫效率</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 提高scrapy的爬取效率（异步框架，基于twisted，性能很高了，可以优化的点），面试聊</span><br><span class="line"></span><br><span class="line">- 在配置文件中进行相关的配置即可:(默认还有一套setting，类比django)</span><br><span class="line"><span class="comment">#1 增加并发：</span></span><br><span class="line">默认scrapy开启的并发线程为<span class="number">32</span>个，可以适当进行增加。在settings配置文件中修改CONCURRENT_REQUESTS = <span class="number">100</span>值为<span class="number">100</span>,并发设置成了为<span class="number">100</span>。</span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 降低日志级别：</span></span><br><span class="line">在运行scrapy时，会有大量日志信息的输出，为了减少CPU的使用率。可以设置log输出信息为INFO或者ERROR即可。在配置文件中编写：LOG_LEVEL = ‘INFO’</span><br><span class="line"><span class="comment"># 3 禁止cookie：（cnblogs不需要cookie）</span></span><br><span class="line">如果不是真的需要cookie，则在scrapy爬取数据时可以禁止cookie从而减少CPU的使用率，提升爬取效率。在配置文件中编写：COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 4禁止重试：</span></span><br><span class="line">对失败的HTTP进行重新请求（重试）会减慢爬取速度，因此可以禁止重试。在配置文件中编写：</span><br><span class="line">RETRY_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 5 减少下载超时：</span></span><br><span class="line">如果对一个非常慢的链接进行爬取，减少下载超时可以能让卡住的链接快速被放弃，从而提升效率。在配置文件中进行编写：</span><br><span class="line">DOWNLOAD_TIMEOUT = <span class="number">10</span> 超时时间为10s</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;提高爬虫效率&quot;&gt;&lt;a href=&quot;#提高爬虫效率&quot; class=&quot;headerlink&quot; title=&quot;提高爬虫效率&quot;&gt;&lt;/a&gt;提高爬虫效率&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="scrapy" scheme="https://a744740454.github.io/categories/scrapy/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="https://a744740454.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>scrapy的Request与Item对象</title>
    <link href="https://a744740454.github.io/2021/02/12/%E7%88%AC%E8%99%AB/scrapy/scrapy%E7%9A%84Response%E4%B8%8Eitem/"/>
    <id>https://a744740454.github.io/2021/02/12/%E7%88%AC%E8%99%AB/scrapy/scrapy%E7%9A%84Response%E4%B8%8Eitem/</id>
    <published>2021-02-12T05:19:34.262Z</published>
    <updated>2021-02-16T04:19:57.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scrapy的Request与item"><a href="#scrapy的Request与item" class="headerlink" title="scrapy的Request与item"></a>scrapy的Request与item</h2><h3 id="Request对象"><a href="#Request对象" class="headerlink" title="Request对象"></a>Request对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">导入位置</span><br><span class="line"><span class="keyword">from</span> scrapy.http.request <span class="keyword">import</span> Request</span><br><span class="line">参数:</span><br><span class="line">url       ---  一个网址，<span class="keyword">yield</span>住之后下次爬取的地址</span><br><span class="line">callback  ---  函数名，当request请求爬取回来之后执行的函数</span><br><span class="line">meta      ---  request与回调函数之间传递参数使用，传字典</span><br></pre></td></tr></table></figure><h3 id="Item对象"><a href="#Item对象" class="headerlink" title="Item对象"></a>Item对象</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>导入</span><br><span class="line"><span class="keyword">from</span> scrapy <span class="keyword">import</span> Item</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>自己写一个类并且继承Item类</span><br><span class="line">eg:</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstscrapyItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    name = scrapy.Field()</span><br><span class="line">    </span><br><span class="line">当你在程序中<span class="keyword">yield</span>住一个Item对象之后，程序便会自动去保存</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在爬虫程序中每爬取一页都实例化一个对象</span><br><span class="line">item = FirstscrapyItem()</span><br><span class="line">ps:往这个对象中存值只能使用[]的方式，不能用.</span><br><span class="line">eg:item[<span class="string">&#x27;url&#x27;</span>] = url</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="keyword">yield</span>返回该值即可，接下来他会根据settings中的配置去pipline中找到对应的类并进行持久化存储</span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   <span class="string">&#x27;firstscrapy.pipelines.FirstscrapyPipeline&#x27;</span>: <span class="number">300</span>, <span class="comment">#类的位置，后面的数字是优先级</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据的持久化操作"><a href="#数据的持久化操作" class="headerlink" title="数据的持久化操作"></a>数据的持久化操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.使用命令</span><br><span class="line">我们只需要在执行文件后添加一个-o 路径即可</span><br><span class="line">eg:scrapy crawl first -o .&#x2F;qiubai.csv</span><br><span class="line">以该方式存储的只能为&#39;json&#39;, &#39;jsonlines&#39;, &#39;jl&#39;, &#39;csv&#39;, &#39;xml&#39;, &#39;marshal&#39;, &#39;pickle&#39;这些格式</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scrapy的Request与item&quot;&gt;&lt;a href=&quot;#scrapy的Request与item&quot; class=&quot;headerlink&quot; title=&quot;scrapy的Request与item&quot;&gt;&lt;/a&gt;scrapy的Request与item&lt;/h2&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="scrapy" scheme="https://a744740454.github.io/categories/scrapy/"/>
    
    
    <category term="爬虫" scheme="https://a744740454.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="scrapy" scheme="https://a744740454.github.io/tags/scrapy/"/>
    
  </entry>
  
  <entry>
    <title>celery在linux的后台运行</title>
    <link href="https://a744740454.github.io/2021/02/05/celery/celery%E5%9C%A8linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/"/>
    <id>https://a744740454.github.io/2021/02/05/celery/celery%E5%9C%A8linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C/</id>
    <published>2021-02-05T06:05:55.775Z</published>
    <updated>2021-02-16T02:14:27.420Z</updated>
    
    <content type="html"><![CDATA[<h2 id="celery部署到服务器上"><a href="#celery部署到服务器上" class="headerlink" title="celery部署到服务器上"></a>celery部署到服务器上</h2><p>当我们写了一个celery的定时任务之后，我们需要将其放到我们服务器上并让其在后台执行。</p><p>我本来是直接部署到服务器上，然后执行了两句命令，但是没想到确失败了。经过一番资料的查找，我发现需要用到两个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&amp;      -- 这个符号可以让你的程序在后台运行</span><br><span class="line">nohup  -- 这个命令可以让你的程序在你退出ssh链接之后不被杀死</span><br><span class="line">eg:</span><br><span class="line">nohup .&#x2F;start-dishi.sh &gt;output 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">解释：</span><br><span class="line"> 1. &amp;符号的含义</span><br><span class="line"> 带&amp;的命令行，即使terminal（终端）关闭，或者电脑死机程序依然运行（前提是你把程序递交到服务器上)； </span><br><span class="line"> 2. 2&gt;&amp;1的意思 </span><br><span class="line">　　这个意思是把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面，所以结果是标准错误和标准输出都导入文件output里面了。 至于为什么需要将标准错误重定向到标准输出的原因，那就归结为标准错误没有缓冲区，而stdout有。这就会导致 &gt;output 2&gt;output 文件output被两次打开，而stdout和stderr将会竞争覆盖，这肯定不是我门想要的. </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;celery部署到服务器上&quot;&gt;&lt;a href=&quot;#celery部署到服务器上&quot; class=&quot;headerlink&quot; title=&quot;celery部署到服务器上&quot;&gt;&lt;/a&gt;celery部署到服务器上&lt;/h2&gt;&lt;p&gt;当我们写了一个celery的定时任务之后，我们需要将</summary>
      
    
    
    
    <category term="celery学习" scheme="https://a744740454.github.io/categories/celery%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="celery,linux" scheme="https://a744740454.github.io/tags/celery-linux/"/>
    
  </entry>
  
  <entry>
    <title>五险一金相关</title>
    <link href="https://a744740454.github.io/2021/02/02/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91%E7%9B%B8%E5%85%B3/"/>
    <id>https://a744740454.github.io/2021/02/02/%E9%9D%A2%E8%AF%95%E7%9B%B8%E5%85%B3/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91%E7%9B%B8%E5%85%B3/</id>
    <published>2021-02-02T00:28:07.897Z</published>
    <updated>2021-02-02T01:02:42.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="五险一金是指哪些？"><a href="#五险一金是指哪些？" class="headerlink" title="五险一金是指哪些？"></a>五险一金是指哪些？</h2><p>五险:养老，医疗，失业，生育，工伤</p><p>一金:公积金</p><h2 id="个人账户与统筹账户"><a href="#个人账户与统筹账户" class="headerlink" title="个人账户与统筹账户"></a>个人账户与统筹账户</h2><p>五险的账户会分为2部分，一部分为个人账户，一部分为统筹账户</p><p>个人账户:从你工资上扣的</p><p>统筹账户:从公司中扣的,与员工无关</p><h2 id="社保基数是多少？"><a href="#社保基数是多少？" class="headerlink" title="社保基数是多少？"></a>社保基数是多少？</h2><p> 社会保险基数简称社保基数，是指职工在一个社保年度的社会保险缴费基数。它是按照职工上一年度1月至12月的所有工资性收入所得的月平均额来进行确定。社会保险缴费基数是计算用人单位及其职工缴纳社保费和职工社会保险待遇的重要依据，有上限和下限之分，具体数额根据各地区实际情况而定。</p><p>建议:够用即可</p><h2 id="社保可以取得前提"><a href="#社保可以取得前提" class="headerlink" title="社保可以取得前提"></a>社保可以取得前提</h2><pre><code> -死亡</code></pre><p>​    -移民</p><p>​    -转移</p><h2 id="公积金"><a href="#公积金" class="headerlink" title="公积金"></a>公积金</h2><p>​    -这个能多交就多交(5%–12%),你交一半，公司给你交一半，可以随时提取</p><p>​    -租房子，新房装修等都可以提取</p><h2 id="面试技巧"><a href="#面试技巧" class="headerlink" title="面试技巧"></a>面试技巧</h2><p>1.现在全国的社保是没有进行全国联网的，因此若hr问你之前有没有交过社保，可以使用下面这句话</p><p>​    -我之前在上海没有交过社保，你给我办增员</p><p>2.工作经验三年，没有交过社保</p><p>​    -之前是在别的城市工作</p><p>​    -跟之前的同事合伙办了个公司</p><p>​    -去了个创业公司(公司没给交)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;五险一金是指哪些？&quot;&gt;&lt;a href=&quot;#五险一金是指哪些？&quot; class=&quot;headerlink&quot; title=&quot;五险一金是指哪些？&quot;&gt;&lt;/a&gt;五险一金是指哪些？&lt;/h2&gt;&lt;p&gt;五险:养老，医疗，失业，生育，工伤&lt;/p&gt;
&lt;p&gt;一金:公积金&lt;/p&gt;
&lt;h2 id</summary>
      
    
    
    
    <category term="五险一金" scheme="https://a744740454.github.io/categories/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/"/>
    
    
    <category term="五险一金" scheme="https://a744740454.github.io/tags/%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/"/>
    
  </entry>
  
</feed>
