<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SadnessPineapple</title>
  
  
  <link href="https://a744740454.github.io/atom.xml" rel="self"/>
  
  <link href="https://a744740454.github.io/"/>
  <updated>2022-02-28T07:00:36.973Z</updated>
  <id>https://a744740454.github.io/</id>
  
  <author>
    <name>Sadness Pineapple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/28/Vue%E5%AD%A6%E4%B9%A0/vue3/Vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/"/>
    <id>https://a744740454.github.io/2022/02/28/Vue%E5%AD%A6%E4%B9%A0/vue3/Vue%E6%95%B0%E6%8D%AE%E5%93%8D%E5%BA%94/</id>
    <published>2022-02-28T07:00:31.193Z</published>
    <updated>2022-02-28T07:00:36.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue数据响应"><a href="#Vue数据响应" class="headerlink" title="Vue数据响应"></a>Vue数据响应</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### reactive</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Vue数据响应&quot;&gt;&lt;a href=&quot;#Vue数据响应&quot; class=&quot;headerlink&quot; title=&quot;Vue数据响应&quot;&gt;&lt;/a&gt;Vue数据响应&lt;/h2&gt;&lt;h3 id=&quot;ref&quot;&gt;&lt;a href=&quot;#ref&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/setup/"/>
    <id>https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/setup/</id>
    <published>2022-02-21T09:27:28.770Z</published>
    <updated>2022-02-28T06:59:24.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setup的初识"><a href="#setup的初识" class="headerlink" title="setup的初识"></a>setup的初识</h2><h3 id="vue2中写法"><a href="#vue2中写法" class="headerlink" title="vue2中写法"></a>vue2中写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default (&#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,methods:&#123;</span><br><span class="line">    updateCount()&#123;</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="vue3中的写法"><a href="#vue3中的写法" class="headerlink" title="vue3中的写法"></a>vue3中的写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  &#x2F;* 使用vue3的composition API *&#x2F;</span><br><span class="line">  setup () &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 定义响应式数据 ref对象</span><br><span class="line">    const count &#x3D; ref(1)</span><br><span class="line">    console.log(count)</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 更新响应式数据的函数</span><br><span class="line">    function update () &#123;</span><br><span class="line">      &#x2F;&#x2F; alert(&#39;update&#39;)</span><br><span class="line">      count.value &#x3D; count.value + 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      count,</span><br><span class="line">      update</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;setup的初识&quot;&gt;&lt;a href=&quot;#setup的初识&quot; class=&quot;headerlink&quot; title=&quot;setup的初识&quot;&gt;&lt;/a&gt;setup的初识&lt;/h2&gt;&lt;h3 id=&quot;vue2中写法&quot;&gt;&lt;a href=&quot;#vue2中写法&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/vue3/"/>
    <id>https://a744740454.github.io/2022/02/21/Vue%E5%AD%A6%E4%B9%A0/vue3/vue3/</id>
    <published>2022-02-21T09:13:59.882Z</published>
    <updated>2022-02-21T09:26:57.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue3安装与初识"><a href="#vue3安装与初识" class="headerlink" title="vue3安装与初识"></a>vue3安装与初识</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">安装vue3</span><br><span class="line"></span><br><span class="line">1.脚手架方式安装</span><br><span class="line">命令</span><br><span class="line">npm install -g @vue&#x2F;cli</span><br><span class="line">vue --version</span><br><span class="line">vue create 项目名</span><br><span class="line"></span><br><span class="line">2.使用vite创建</span><br><span class="line">特定:</span><br><span class="line">1.快速的冷启动</span><br><span class="line">2.即时的热模块更新,替换性能和模块的解耦让更新飞起</span><br><span class="line">3.真正的按需编译，不再等待整个应用编译完成</span><br><span class="line">命令:</span><br><span class="line">npm init vite-app 项目名</span><br><span class="line">cd 项目名</span><br><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h3 id="App-vue代码"><a href="#App-vue代码" class="headerlink" title="App.vue代码"></a>App.vue代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- Vue2中的html必须要有一对根标签，Vue3组件的html模板中可以没有根标签 --&gt;</span><br><span class="line">  &lt;img alt&#x3D;&quot;Vue logo&quot; src&#x3D;&quot;.&#x2F;assets&#x2F;logo.png&quot;&gt;</span><br><span class="line">  &lt;HelloWorld msg&#x3D;&quot;Welcome to Your Vue.js App&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&#x2F;&#x2F;引入一个子级组件</span><br><span class="line">import HelloWorld from &#39;.&#x2F;components&#x2F;HelloWorld.vue&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;暴露出去一个定义好的组件</span><br><span class="line">export default &#123;</span><br><span class="line">  &#x2F;&#x2F;当前组件的名称是App</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  &#x2F;&#x2F;注册组件</span><br><span class="line">  components: &#123;</span><br><span class="line">    &#x2F;&#x2F;注册一个子级组件</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;vue3安装与初识&quot;&gt;&lt;a href=&quot;#vue3安装与初识&quot; class=&quot;headerlink&quot; title=&quot;vue3安装与初识&quot;&gt;&lt;/a&gt;vue3安装与初识&lt;/h2&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/16/Vue%E5%AD%A6%E4%B9%A0/webpack/"/>
    <id>https://a744740454.github.io/2022/01/16/Vue%E5%AD%A6%E4%B9%A0/webpack/</id>
    <published>2022-01-16T02:36:06.782Z</published>
    <updated>2022-01-16T04:40:45.936Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h3 id="webpack是什么"><a href="#webpack是什么" class="headerlink" title="webpack是什么"></a>webpack是什么</h3><p>webpack就是一个打包工具，浏览器只能识别.js.jpg等少部分的文件，通过webpack可以将一些不同文件后缀名的转换成浏览器可以识别的文件</p><h3 id="webpack与node的关系"><a href="#webpack与node的关系" class="headerlink" title="webpack与node的关系"></a>webpack与node的关系</h3><p>webpack 本身依赖于node执行，必须先安装node之后才能安装webpack,node安装之后会自带一个包管理工具npm，我们可以使用npm安装对应的包</p><h3 id="webpack安装"><a href="#webpack安装" class="headerlink" title="webpack安装"></a>webpack安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure><h3 id="webpack打包js文件"><a href="#webpack打包js文件" class="headerlink" title="webpack打包js文件"></a>webpack打包js文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#对main文件进行打包，这样子就会将main文件中所有引用的内容以及本身的内容进行打包，存放到budle.js文件中</span><br><span class="line">webpack .&#x2F;src&#x2F;main.js .&#x2F;dist&#x2F;bundle.js</span><br><span class="line"></span><br><span class="line">然后在主文件中我们只需要引用bundle.js就可以了</span><br></pre></td></tr></table></figure><h3 id="webpack配置文件"><a href="#webpack配置文件" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h3><h4 id="webpack配置文件-1"><a href="#webpack配置文件-1" class="headerlink" title="webpack配置文件"></a>webpack配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpack.config.js</span><br><span class="line">    const path &#x3D; require(&#39;path&#39;) # 导入node包，用于找到当前文件路径</span><br><span class="line">    module.exports &#x3D;&#123;</span><br><span class="line">        entry:&#39;.&#x2F;src&#x2F;main.js&#39;, #输入文件路径</span><br><span class="line">        output :&#123;</span><br><span class="line">            path:path.resolve(__dirname,&#39;dist&#39;), #输出的文件夹路径，不能使用相对路径</span><br><span class="line">            filename : &#39;bundle.js&#39; #输出的文件名称</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>package.json是通过npm init生成的，我们可以通过这个文件去知道这个项目的一些基本信息，以及做到类似makefile的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>执行命令</span><br><span class="line">npm init #然后一路回车即可</span><br><span class="line"><span class="number">2.</span>package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;practice&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;  <span class="comment">//脚本，在这里写命令之后可以通过npm run 去实现后续的命令，例如npm run build == webpack</span></span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;  <span class="comment">//包依赖</span></span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^3.6.0&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>webpack 打包直接下载后只能支持基础的打包，如果想要支持css获其余类型文件的打包必须要下载对应的loader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">官方文档地址https:&#x2F;&#x2F;webpack.docschina.org&#x2F;loaders&#x2F;css-loader </span><br><span class="line">(1)安装</span><br><span class="line">npm install --save-dev css-loader &#x2F;&#x2F;这个loader只负载加载，如果想要css文件生效还需要style-loader</span><br><span class="line">npm install --save-dev style-loader &#x2F;&#x2F;这个loader负责渲染</span><br><span class="line">(2)配置</span><br><span class="line">webpack.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.css$&#x2F;i, &#x2F;&#x2F;这里是正则表达式，代表对所有的css文件进行匹配，去执行下面的loader</span><br><span class="line">        use: [&quot;style-loader&quot;, &quot;css-loader&quot;],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h2&gt;&lt;h3 id=&quot;webpack是什么&quot;&gt;&lt;a href=&quot;#webpack是什么&quot; class=&quot;head</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-01-15T10:17:08.848Z</published>
    <updated>2022-01-15T10:50:24.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端模块化"><a href="#前端模块化" class="headerlink" title="前端模块化"></a>前端模块化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">为了代码的复用，es6中也有导入导出的方式，可以将复用的js代码进行抽取。</span><br><span class="line"></span><br><span class="line">新建一个文件，在该文件中定义一些变量或函数</span><br><span class="line">使用export&#123;变量名1,变量名2&#125;</span><br><span class="line">import &#39;变量名1&#39; from &#39;文件路径&#39;;</span><br><span class="line"></span><br><span class="line">简单的说前端就是通过导出的方式去判断是内部函数或变量还是外部可以调用的方式。</span><br></pre></td></tr></table></figure><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.html:&lt;script src&#x3D;&quot;info.js&quot; type&#x3D;&quot;module&quot;&#x2F;&gt; #引入js文件</span><br><span class="line">2.两个js互相导入导出</span><br><span class="line">import &#123;s,b,c&#125; from &#39;文件路径&#39; # 引入default关键字的变量不需要加大括号</span><br></pre></td></tr></table></figure><h3 id="导出方式"><a href="#导出方式" class="headerlink" title="导出方式"></a>导出方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.在需要导出的函数名前加export</span><br><span class="line">export function 变量名</span><br><span class="line"></span><br><span class="line">2.先定义好，定义好后集体导出</span><br><span class="line">export&#123;函数1，函数2&#125;</span><br><span class="line"></span><br><span class="line">3.让导入者自己命名</span><br><span class="line">export default aaa # 只能有一个default</span><br><span class="line">import bbb from &#39;文件名&#39; 将前端有default的重命名成了bbb(不需要大括号)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前端模块化&quot;&gt;&lt;a href=&quot;#前端模块化&quot; class=&quot;headerlink&quot; title=&quot;前端模块化&quot;&gt;&lt;/a&gt;前端模块化&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7%E4%B8%8E%E7%9B%91%E5%90%AC%E5%B1%9E%E6%80%A7/</id>
    <published>2022-01-15T09:32:52.348Z</published>
    <updated>2021-01-12T11:38:31.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">该属性与data,methods这些属于同一级别,你可以在这个属性里面写一个函数，这个函数的结果就会成为外界使用这个函数的结果。效果类似于methods.</span><br><span class="line">基本语法:</span><br><span class="line">html方面:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;demo&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">vue方面:</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">        computed:&#123;</span><br><span class="line">            demo:function()&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;123&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#该属性与methods的区别</span></span><br><span class="line">methods你每次都需要重新调用一遍函数，若是一个确定的固定的值，那这是很没有必要的。会浪费大量的计算资源。这个时候我们就可以使用computed,该属性会将内部的函数计算的结果保存下来。以后你每次调用他就会将这个值直接返回给你，而不会在进行一遍函数的运算</span><br></pre></td></tr></table></figure><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Vue提供了一个属性帮助我们监听属性的变化，当属性发生了变化的时候，他会自己去调用这个属性里面的函数</span><br><span class="line"></span><br><span class="line">html相关:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">&lt;button type=&quot;button&quot; @click=&quot;button_test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&#123;&#123;test&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue相关:</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">data:&#123;</span><br><span class="line"><span class="string">&#x27;test&#x27;</span>:<span class="string">&#x27;test&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">test: function(new_test,old_test)&#123;</span><br><span class="line">console.log(new_test)</span><br><span class="line">console.log(old_test)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">button_test:function()&#123;</span><br><span class="line">this.test += <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;计算属性&quot;&gt;&lt;a href=&quot;#计算属性&quot; class=&quot;headerlink&quot; title=&quot;计算属性&quot;&gt;&lt;/a&gt;计算属性&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue组件</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue%E7%BB%84%E4%BB%B6/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue%E7%BB%84%E4%BB%B6/</id>
    <published>2022-01-15T09:32:52.345Z</published>
    <updated>2022-01-15T09:40:09.060Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h3><h4 id="组件基本使用"><a href="#组件基本使用" class="headerlink" title="组件基本使用"></a>组件基本使用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vue组件的功能简单的说就是帮助我们将一些复用的代码进行封装,然后我们在前端的页面上就可以通过特定的标签将这些组件渲染在页面上，这样子我们就可以省去写重复代码的情况</span><br><span class="line">html代码:</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><br><span class="line">&lt;component_test&gt;&lt;/component_test&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">js代码:</span><br><span class="line">Vue.component(<span class="string">&#x27;component_test&#x27;</span>, &#123;</span><br><span class="line">    data: function() &#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    template: <span class="string">&#x27;&lt;button v-on:click=&quot;count--&quot;&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span> <span class="comment">#将这里的标签渲染在上面</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ps:组件中的data必须是一个函数，这是为了防止多个组件之间的数据被互相影响</span><br></pre></td></tr></table></figure><h4 id="通过prop向组件传递数据"><a href="#通过prop向组件传递数据" class="headerlink" title="通过prop向组件传递数据"></a>通过prop向组件传递数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">当我们通过一个实例化的对象获得了一定的API数据后，我们若是想将这个实例化对象的数据传递给我们的组件，我们可以使用下述的方式</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>port的值</span><br><span class="line">vue = new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        ports:[</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">1</span>,title:<span class="string">&#x27;这是port1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">2</span>,title:<span class="string">&#x27;这是port2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="built_in">id</span>:<span class="number">3</span>,title:<span class="string">&#x27;这是port3&#x27;</span>&#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>创建一个标签，并获得标签中port属性的值</span><br><span class="line">Vue.component(<span class="string">&#x27;component_test&#x27;</span>, &#123;</span><br><span class="line">    props:[<span class="string">&#x27;port&#x27;</span>],</span><br><span class="line">    template: <span class="string">&#x27;&lt;p&gt;&#123;&#123; port[0].id &#125;&#125; &#123;&#123; port[0].title &#125;&#125;&lt;/p&gt;&#x27;</span> <span class="comment">#可以在模板中使用这个port中的值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>使用v-bind为标签设置属性</span><br><span class="line">&lt;component_test v-bind:port=&#x27;ports&#x27;&gt;&lt;/component_test&gt;</span><br><span class="line"> </span><br><span class="line">ps:我们可以限制传过来的数据的类型</span><br><span class="line">props: &#123;</span><br><span class="line">            myname:String, <span class="comment">#传过来的数据必须是字符串类型</span></span><br><span class="line">            isshow:Boolean <span class="comment">#传过来的数据必须是布尔类型</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="组件向vue实例传递数据的方式"><a href="#组件向vue实例传递数据的方式" class="headerlink" title="组件向vue实例传递数据的方式"></a>组件向vue实例传递数据的方式</h4><h5 id="1-通过自定义事件来传递数据"><a href="#1-通过自定义事件来传递数据" class="headerlink" title="1.通过自定义事件来传递数据"></a>1.通过自定义事件来传递数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过自定义事件来传递数据</span><br><span class="line">html:</span><br><span class="line">&lt;navbar @myevent=&quot;handleClick&quot;&gt;&lt;/navbar&gt;</span><br><span class="line"></span><br><span class="line">组件:</span><br><span class="line">    Vue.component(<span class="string">&#x27;navbar&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;button @click=&quot;handleNav&quot;&gt;点我，触发父组件的某个函数执行&lt;/button&gt; #创建一个按钮并绑定了点击事件</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                name:<span class="string">&#x27;lqz&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleNav()&#123;</span><br><span class="line">                this.$emit(<span class="string">&#x27;myevent&#x27;</span>,<span class="number">100</span>,this.name,<span class="number">99</span>) <span class="comment">#每当按钮被点击时会触发这边的事件，后面是传递的参数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">vue实例:</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleClick(ev,a,b)&#123;</span><br><span class="line">                console.log(<span class="string">&#x27;我是父组件的函数，我执行了&#x27;</span>)</span><br><span class="line">                console.log(ev)</span><br><span class="line">                console.log(a)</span><br><span class="line">                console.log(b)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-通过ref属性来传递数据"><a href="#2-通过ref属性来传递数据" class="headerlink" title="2.通过ref属性来传递数据"></a>2.通过ref属性来传递数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">ref属性放置在标签上，拿到的是原生节点</span><br><span class="line">ref属性放置在组件上，拿到的是组件对象</span><br><span class="line">eg:</span><br><span class="line">    html:</span><br><span class="line">        &lt;child ref=&quot;mychild&quot;&gt;&lt;/child&gt; #子组件设置属性</span><br><span class="line">        </span><br><span class="line">    组件:</span><br><span class="line">        Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">            template: `</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">            &lt;hr&gt;</span><br><span class="line">            我是子组件的<span class="built_in">input</span></span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            `,</span><br><span class="line">            data() &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    mytext: <span class="string">&#x27;&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods:&#123;</span><br><span class="line">                add(a)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;返回了&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    </span><br><span class="line">实例:</span><br><span class="line">            var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            name: <span class="string">&#x27;asdf&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handle(a) &#123;</span><br><span class="line">                this.name = a</span><br><span class="line">            &#125;,</span><br><span class="line">            handleButton()&#123;</span><br><span class="line">                console.log(this.$refs.mychild.mytext) <span class="comment">#获得子组件中的mytext数据</span></span><br><span class="line">                console.log(this.$refs.mychild.add(this.name)) <span class="comment">#向子组件传递数据，将name属性传递给他的方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="组件与组件之间传递数据的方式"><a href="#组件与组件之间传递数据的方式" class="headerlink" title="组件与组件之间传递数据的方式"></a>组件与组件之间传递数据的方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们可能遇到一些需要往另一个组件中传递数据的情况，这种时候我们需要用到一个叫做事件总线的技术，让他在组件与组件之间起到桥梁的作用</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>首先我们先定义一个事件总线</span><br><span class="line">    var bus=new Vue()</span><br><span class="line"> </span><br><span class="line"><span class="number">2.</span>在某个组件中使用这个事件总线</span><br><span class="line">    Vue.component(<span class="string">&#x27;child1&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=&quot;handleClick&quot;&gt;点我传递数据到另一个组件&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                text: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            handleClick() &#123;</span><br><span class="line">                console.log(this.text)</span><br><span class="line">                bus.$emit(<span class="string">&#x27;suibian&#x27;</span>,this.text) <span class="comment">#把数据传递给事件总线</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在另外一个组件上监听事件总线的变化</span><br><span class="line">    Vue.component(<span class="string">&#x27;child2&#x27;</span>, &#123;</span><br><span class="line">        template: `</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">        收到的消息是：&#123;&#123;recv_text&#125;&#125;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    `,</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                recv_text:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;  <span class="comment">#组件挂载（生命周期钩子函数中的一个），开始监听事件总线上的随便</span></span><br><span class="line">            bus.$on(&#x27;suibian&#x27;,(item)=&gt;&#123;</span><br><span class="line">                console.log(<span class="string">&#x27;收到了&#x27;</span>,item)</span><br><span class="line">                this.recv_text=item</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="vue生命周期图"><a href="#vue生命周期图" class="headerlink" title="vue生命周期图"></a>vue生命周期图</h4><img src="https://cn.vuejs.org/images/lifecycle.png" alt="Vue 实例生命周期" style="zoom:50%;" /><h4 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们可能拥有多个子组件，但同一时间内只会显示一个，或通过用户的某些操作来改变组件的展示</span><br><span class="line">这时我们就需要用到动态组件</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>在实例中的data中设置一个任意名称的数据，这个数据要与组件有关系</span><br><span class="line">实例:</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            who: <span class="string">&#x27;child1&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            child1: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是首页 </span><br><span class="line">                &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;,</span><br><span class="line">            child2: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是商品 &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;,</span><br><span class="line">            child3: &#123;</span><br><span class="line">                template: `</span><br><span class="line">                &lt;div&gt;我是订单 &lt;/div&gt;</span><br><span class="line">                `,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>在html中设置一个component标签</span><br><span class="line">&lt;component :is=&quot;who&quot;&gt;&lt;/component&gt; 这个标签的:is属性与data中的数据有关系，后期我们可以通过修改who的属性来设置这个地方出现的组件是谁</span><br></pre></td></tr></table></figure><h4 id="keep-alive标签的作用"><a href="#keep-alive标签的作用" class="headerlink" title="keep-alive标签的作用"></a>keep-alive标签的作用</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加入该标签后，若你切换到另外一个组件，这个组件不会被销毁，这样的话数据会保留下来</span><br><span class="line">eg：</span><br><span class="line">    &lt;keep-alive&gt;</span><br><span class="line">        &lt;component :is=&quot;who&quot;&gt;&lt;/component&gt;</span><br><span class="line">    &lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h4 id="使用axios向后端发送ajax请求"><a href="#使用axios向后端发送ajax请求" class="headerlink" title="使用axios向后端发送ajax请求"></a>使用axios向后端发送ajax请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">axios是一个框架，使用这个框架可以帮助我们向后端发送ajax请求</span><br><span class="line"><span class="number">1.</span>导入cdn</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.0/axios.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如上图，我们可以看到vue的生命周期，在mounted之后我们对前端设定的模板进行了替换，所以我们可以在此之前发送ajax请求，获得数据。</span><br><span class="line">然后他会对前端的模板进行替换。</span><br><span class="line">vue = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#axios&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        data:null</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">        axios.get(<span class="string">&#x27;http://127.0.0.1:8001/home/home/&#x27;</span>).</span><br><span class="line">        <span class="comment">#设置一个回调函数</span></span><br><span class="line">        then(response =&gt; (</span><br><span class="line">            this.data = response.data <span class="comment"># 将this.data中的数据替换成返回的数据</span></span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">我们之前有学过有关组件的基本内容，而插槽就是在组件内进行一个定位。我们可以在某些位置对定位的内容进行定量的替换</span><br><span class="line"></span><br><span class="line">html内容</span><br><span class="line">&lt;slot_test&gt;</span><br><span class="line">&lt;slot_test2&gt;&lt;/slot_test2&gt;</span><br><span class="line">&lt;/slot_test&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Vue插槽内容:</span><br><span class="line"><span class="comment">#模板文件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test&#x27;</span>,&#123;</span><br><span class="line">    template:</span><br><span class="line">    `&lt;div&gt;这是第一层的div</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            这是第二层的div</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">            这是slot底下的文字</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#要插入模板文件的组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test2&#x27;</span>,&#123;</span><br><span class="line">template:`&lt;div&gt;我在哪？&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#如上所示，我们将底下的组件插入到上面的组件中的模板中了，它默认是在所有的slot位置插入所有有写的组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">我们也可以根据插槽的一个name属性，来指定我们将某个插件插入在哪个位置</span><br><span class="line"><span class="number">1.</span>首先我们在一个根插槽为一个slot设置一个name属性</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test&#x27;</span>,&#123;</span><br><span class="line">template:</span><br><span class="line">`&lt;div&gt;</span><br><span class="line">这是第一层的div</span><br><span class="line">&lt;slot name=&#x27;first&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">这是第一层slot底下的文字</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">这是第二层的div</span><br><span class="line">&lt;slot name=&#x27;second&#x27;&gt;&lt;/slot&gt;</span><br><span class="line">这是第二层slot底下的文字</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">`</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>其次我们就可以利用这个在组件中使用slot属性指定我们需要将对应的组件插入的位置</span><br><span class="line">html:</span><br><span class="line">&lt;slot_test&gt;</span><br><span class="line">&lt;slot_test2 slot=&#x27;second&#x27;&gt;&lt;/slot_test2&gt;</span><br><span class="line">&lt;slot_test3 slot=&#x27;first&#x27;&gt;&lt;/slot_test3&gt;</span><br><span class="line">&lt;/slot_test&gt;</span><br><span class="line"></span><br><span class="line">组件:</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test2&#x27;</span>,&#123;</span><br><span class="line">    template:`&lt;div &gt;我在哪？&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;slot_test3&#x27;</span>,&#123;</span><br><span class="line">    template:`&lt;div &gt;我在这&lt;/div&gt;`</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vue提供了自定义指令的方式</span><br><span class="line">    html:</span><br><span class="line">    &lt;div v-mystyle=&quot;color&quot;&gt; 我是div&lt;/div&gt;</span><br><span class="line">    组件:</span><br><span class="line">        Vue.directive(<span class="string">&#x27;mystyle&#x27;</span>, &#123;</span><br><span class="line">            inserted(ev, color) &#123;  <span class="comment">#ev就是标签对象</span></span><br><span class="line">                console.log(ev)</span><br><span class="line">                console.log(color.value) <span class="comment">#color.value才是真正的数据</span></span><br><span class="line">                ev.style.background = color.value</span><br><span class="line">            &#125;,</span><br><span class="line">            update(el, <span class="built_in">input</span>) &#123;</span><br><span class="line">                el.style.background = <span class="built_in">input</span>.value</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">过滤器可以帮助我们进行一些特定的操作</span><br><span class="line">html:</span><br><span class="line">&lt;img :src=<span class="string">&quot;item.img | repUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">过滤器:   </span><br><span class="line">    Vue.<span class="built_in">filter</span>(<span class="string">&#x27;repUrl&#x27;</span>, function (url) &#123;</span><br><span class="line">        <span class="keyword">return</span> url.replace(<span class="string">&#x27;w.h&#x27;</span>, <span class="string">&#x27;128.180&#x27;</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue组件&quot;&gt;&lt;a href=&quot;#Vue组件&quot; class=&quot;headerlink&quot; title=&quot;Vue组件&quot;&gt;&lt;/a&gt;Vue组件&lt;/h3&gt;&lt;h4 id=&quot;组件基本使用&quot;&gt;&lt;a href=&quot;#组件基本使用&quot; class=&quot;headerlink&quot; title=&quot;组</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue基本语法</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</id>
    <published>2022-01-15T09:32:52.342Z</published>
    <updated>2022-01-15T09:35:06.863Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vue基本语法"><a href="#vue基本语法" class="headerlink" title="vue基本语法"></a>vue基本语法</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt; #vue导入</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">#导入后实例化一个新的Vue对象</span></span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el:<span class="string">&#x27;选择器&#x27;</span>,<span class="comment">#使用这个找到你需要的标签，然后你就可以在这个标签内找到该对象内的值</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,<span class="comment">#这里面写各种函数</span></span><br><span class="line">    data:&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;<span class="comment">#这里写各种数据，你可以在标签内通过&#123;&#123; &#125;&#125;获得数据</span></span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">&#123;&#123; message &#125;&#125; <span class="comment"># vue对象中的message会渲染到这里</span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">        message: <span class="string">&#x27;hello Vue&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">ps：若data中存在列表以及对象，列表使用索引取值，对象使用.key的方式取值</span><br></pre></td></tr></table></figure><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这个指令会让元素只渲染一次，后续不会随着数据的改变而改变</span><br><span class="line">eg:</span><br><span class="line">&lt;h2 v-once&#x3D;&quot;school.phone + &#39;!&#39; &quot;&gt;&lt;&#x2F;h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: &quot;北京校区&quot;,</span><br><span class="line">phone: 13333</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-text与v-html"><a href="#v-text与v-html" class="headerlink" title="v-text与v-html"></a>v-text与v-html</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v-text==js中的innerText() 你为一个标签设置该属性之后，他只会将该标签内的内容全部替换为你指定的内容</span><br><span class="line">ps：可以使用运算符</span><br><span class="line">eg：</span><br><span class="line">&lt;h2 v-text=&quot;school.phone + &#x27;!&#x27; &quot;&gt;&lt;/h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: <span class="string">&quot;北京校区&quot;</span>,</span><br><span class="line">phone: <span class="number">13333</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">v-html则是==js中的innerHtml() 若是你在data中设置的值附带标签，那么他会将*标签*渲染在该位置</span><br></pre></td></tr></table></figure><h4 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">v-pre类似于后端的转义符，可以让模板语言中的模板失效，会原封不动的将模板转成字符串打印出来</span><br><span class="line">eg：</span><br><span class="line">&lt;h2 v-pre&#x3D;&quot;school.phone + &#39;!&#39; &quot;&gt;&lt;&#x2F;h2&gt; </span><br><span class="line">data: &#123;</span><br><span class="line">school: &#123;</span><br><span class="line">name: &quot;北京校区&quot;,</span><br><span class="line">phone: 13333</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">你可以通过v-on设置事件</span><br><span class="line">v-on有下述几种常用事件</span><br><span class="line"><span class="meta">@click:标签被点击时触发</span></span><br><span class="line"><span class="meta">@blur:失去焦点触发</span></span><br><span class="line"><span class="meta">@change:失去焦点时触发，与blur一样，除了一种特殊情况，就是当用户点入input框后，若是没进行任何的修改，直接退出，那么不会触发</span></span><br><span class="line"><span class="meta">@input:数据发生改变触发</span></span><br><span class="line"><span class="meta">@keyup.xxx:键盘上某个键被按下时触发，键盘的每一个按键都有特定的数字与其进行映射，例如<span class="number">13</span>就是回车键</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line"><span class="comment">#为下述两个标签设置点击事件</span></span><br><span class="line">    &lt;div v-on:click=&quot;click&quot;&gt;132&lt;/div&gt;</span><br><span class="line">    &lt;div @click=&quot;click&quot;&gt;456&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">    <span class="comment">#点击事件的具体逻辑</span></span><br><span class="line">    <span class="comment">#语法----函数名:function()&#123;&#125;</span></span><br><span class="line">    click: function() &#123;</span><br><span class="line">        // 可以通过this获得这个Vue对象内的任意值</span><br><span class="line">        this.school.name = <span class="string">&#x27;我被点击了&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ps:@等于v-on:是他的简化版</span><br><span class="line">ps:若要为事件传参直接在标签的函数名后添加括号即可</span><br><span class="line">&lt;div v-on:click=&quot;click(123)&quot;&gt;132&lt;/div&gt;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">在v-on后面还可以执行一些简单的js代码</span><br><span class="line">&lt;button type=&quot;button&quot; v-on:click=&quot;count++&quot;&gt;点击我试试&lt;/button&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">js代码:</span><br><span class="line">var app = new Vue(&#123;</span><br><span class="line">        el: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            count:<span class="number">12</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在v-on后面设置事件后，我们还可以设置一些事件修饰符</span><br><span class="line">常用的事件修饰符如下所示</span><br><span class="line">.stop 阻止事件冒泡</span><br><span class="line">.self 只处理自己的事件，子控件冒泡的事件不处理</span><br><span class="line">.prevent 阻止a链接跳转</span><br><span class="line">.once 只处理一次就解绑(抽奖页面)</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">     &lt;div @click.stop=&quot;click&quot;&gt;132&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">可以通过该方法设置一个标签是否隐藏</span><br><span class="line">&lt;div v-show=&quot;is_show&quot; v-on:click=&quot;show&quot;&gt;我还在&lt;/div&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    is_show:true,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#我们可以通过修改data中的is_show来修改标签是否显示</span></span><br></pre></td></tr></table></figure><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">if</span>控制标签是否显示时功能与v-show一致，不同的是他直接操作dom树，会将一个标签直接移除。</span><br><span class="line">他后面还可以写原生的js语句</span><br><span class="line">他会判断后面的js语句是否正确，我们可以利用这个特性和v-<span class="keyword">else</span>做到流程控制</span><br></pre></td></tr></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">v-bind用于绑定标签的属性，以此来设置标签的属性</span><br><span class="line"><span class="number">1.</span>v-bind与普通属性的绑定</span><br><span class="line">eg：</span><br><span class="line">&lt;img v-bind:src=<span class="string">&quot;img_src&quot;</span> &gt;</span><br><span class="line">    data: &#123;</span><br><span class="line">        img_src:<span class="string">&#x27;public/favicon.ico&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">上述例子中就会将img标签中的src属性绑定为img_src</span><br><span class="line">v-bind还有简写的方式，可以将v-bind省去，只留下:</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>v-bind与类的绑定</span><br><span class="line">:class=&quot;&#123;active:is_active&#125;&quot; 语法为 &#123;css样式的类名:data&#125; true的话会显示，false的话不显示</span><br><span class="line">data: &#123;</span><br><span class="line">        is_active:true,</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure><h4 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">该语法类似于python中的<span class="keyword">for</span>循环</span><br><span class="line">eg:</span><br><span class="line">    &lt;li v-for=&quot;i in food&quot;&gt;&#123;&#123; i &#125;&#125;&lt;/li&gt; </span><br><span class="line">    data: &#123;</span><br><span class="line">        food:[<span class="string">&#x27;西红柿炒蛋&#x27;</span>,<span class="string">&#x27;蛋炒西红柿&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">如上会生成两个li标签我们还可以获得他的索引</span><br><span class="line">    &lt;li v-for=&quot;(food,index) in foods&quot;&gt;&#123;&#123; index &#125;&#125;&#123;&#123; food &#125;&#125;&lt;/li&gt; </span><br><span class="line">    data: &#123;</span><br><span class="line">        foods:[<span class="string">&#x27;西红柿炒蛋&#x27;</span>,<span class="string">&#x27;蛋炒西红柿&#x27;</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用v-model可以做到标签与数据的双向绑定，一般用于<span class="built_in">input</span>标签，这样就会在<span class="built_in">input</span>标签内显示message信息</span><br><span class="line">&lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;message&quot;</span>&gt;</span><br><span class="line">data: &#123;</span><br><span class="line">    message: <span class="string">&#x27;我是vue内的message&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="key属性的作用"><a href="#key属性的作用" class="headerlink" title="key属性的作用"></a>key属性的作用</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key属性在Vue中起到的作用主要是提高元素的渲染效果，这个key一般一个标签只有一个。</span><br></pre></td></tr></table></figure><h4 id="虚拟dom树"><a href="#虚拟dom树" class="headerlink" title="虚拟dom树"></a>虚拟dom树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟dom也就是虚拟节点，利用js对象来描述真实的dom节点。每次只修改真实dom变更的部分，这样做可以保证高效的渲染，提高渲染性能</span><br></pre></td></tr></table></figure><h4 id="Vue的diff算法"><a href="#Vue的diff算法" class="headerlink" title="Vue的diff算法"></a>Vue的diff算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue利用自己的diff算法对真实dom与虚拟dom的替换做了一个优化</span><br><span class="line">共有三种方案</span><br><span class="line">-分层级比较</span><br><span class="line">    -同key值比较（循环中尽量加key）</span><br><span class="line">    -组件或标签的比较去替换</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;vue基本语法&quot;&gt;&lt;a href=&quot;#vue基本语法&quot; class=&quot;headerlink&quot; title=&quot;vue基本语法&quot;&gt;&lt;/a&gt;vue基本语法&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E4%BD%BF%E7%94%A8swiper/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/vue%E4%BD%BF%E7%94%A8swiper/</id>
    <published>2022-01-15T09:32:52.340Z</published>
    <updated>2021-01-12T11:38:33.139Z</updated>
    
    <content type="html"><![CDATA[<h4 id="vue使用swiper"><a href="#vue使用swiper" class="headerlink" title="vue使用swiper"></a>vue使用swiper</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先需要安装</span><br><span class="line">cnpm install swiper vue-awesome-swiper --save</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在main.js中导入</span><br><span class="line"><span class="keyword">import</span> VueAwesomeSwiper <span class="keyword">from</span> <span class="string">&#x27;vue-awesome-swiper&#x27;</span></span><br><span class="line">Vue.use(VueAwesomeSwiper)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在组件中使用</span><br><span class="line"><span class="comment">#在mounted中进行实例化</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;swiper/swiper-bundle.css&#x27;</span> <span class="comment">#导入样式，也可以在main.js中导入，代表全局</span></span><br><span class="line"></span><br><span class="line">mounted() &#123;</span><br><span class="line">    this.$swiper = new Swiper(<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line"><span class="comment">#这里写配置的各种属性</span></span><br><span class="line">        slidesPerView: <span class="string">&#x27;auto&#x27;</span>, <span class="comment">#一个页面中显示几个</span></span><br><span class="line">        virtual: true,</span><br><span class="line">        // loop: true, <span class="comment">#是否开启循环</span></span><br><span class="line">        slidesPerGroup : <span class="number">3</span>, <span class="comment">#按几个分为一组</span></span><br><span class="line">        watchSlidesProgress : true, <span class="comment">#监听进度</span></span><br><span class="line">        navigation: &#123; <span class="comment">#前后按钮组件</span></span><br><span class="line">            nextEl: <span class="string">&#x27;.swiper-button-next&#x27;</span>,</span><br><span class="line">            prevEl: <span class="string">&#x27;.swiper-button-prev&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;vue使用swiper&quot;&gt;&lt;a href=&quot;#vue使用swiper&quot; class=&quot;headerlink&quot; title=&quot;vue使用swiper&quot;&gt;&lt;/a&gt;vue使用swiper&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;tab</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue_CLI</title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue_CLI/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/Vue_CLI/</id>
    <published>2022-01-15T09:32:52.337Z</published>
    <updated>2022-01-15T09:34:39.233Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue_CLI"></a>Vue_CLI</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>安装node</span><br><span class="line">官网下载安装包，傻瓜式安装：https://nodejs.org/zh-cn/</span><br><span class="line">    </span><br><span class="line"><span class="number">2.</span>安装cnpm <span class="comment">#淘宝源，下载速度较快</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>安装脚手架</span><br><span class="line">cnpm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>清空缓存处理</span><br><span class="line">npm cache clean --force</span><br></pre></td></tr></table></figure><h4 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>项目创建</span><br><span class="line">vue create 项目名 <span class="comment">#项目会创建在当前文件夹下</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>启动服务</span><br><span class="line">npm run serve <span class="comment">#需要进入项目根目录</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>打包项目</span><br><span class="line">npm run build <span class="comment">#需要进入项目根目录</span></span><br></pre></td></tr></table></figure><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dist: 打包的项目目录(打包后会生成)</span><br><span class="line">node_modules: 项目依赖</span><br><span class="line">public: 共用资源</span><br><span class="line">src: 项目目标,书写代码的地方</span><br><span class="line">-- assets:资源</span><br><span class="line">-- components:组件</span><br><span class="line">-- views:视图组件</span><br><span class="line">-- App.vue:根组件</span><br><span class="line">-- main.js: 入口js</span><br><span class="line">-- router.js: 路由文件</span><br><span class="line">-- store.js: 状态库文件</span><br><span class="line">vue.config.js: 项目配置文件(没有可以自己新建)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="vue项目修改端口"><a href="#vue项目修改端口" class="headerlink" title="vue项目修改端口"></a>vue项目修改端口</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过修改vue.config.js来实现达到修改端口的目的</span><br><span class="line"><span class="comment">#vue.config.js</span></span><br><span class="line">module.exports=&#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">port: <span class="number">8888</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现自定义组件跳转"><a href="#实现自定义组件跳转" class="headerlink" title="实现自定义组件跳转"></a>实现自定义组件跳转</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">组件的跳转</span><br><span class="line"><span class="number">1.</span>在app.vue中的template中添加两个标签</span><br><span class="line">&lt;router-link to=&quot;/要跳往的路径&quot;&gt;内容&lt;/router-link&gt; #该标签类似于前端的a标签</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt; #组件的内容如果想要展示必须加</span><br><span class="line">   eg:</span><br><span class="line">        &lt;router-link to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line"><span class="number">2.</span>新建组件</span><br><span class="line">如上述示例所示，我们需要在components下新建一个以vue结尾的文件</span><br><span class="line">    </span><br><span class="line">    template:</span><br><span class="line">         &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt;home&lt;/h1&gt;</span><br><span class="line">                &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">     </span><br><span class="line">    script:</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;  <span class="comment">#export是导出的意思，只有在这里导出了我们才能在别处引用这个组件</span></span><br><span class="line">                data () &#123;</span><br><span class="line">                    <span class="keyword">return</span> &#123;</span><br><span class="line">                        msg: <span class="string">&quot;我是home 组件&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span>新建一个router.js文件,将组件的路径写在这边</span><br><span class="line">router.js：</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span> <span class="comment">#导入vue</span></span><br><span class="line">    <span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span> <span class="comment">#导入vue-router,没有该组件的需要安装</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#导入组件</span></span><br><span class="line">    <span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;./components/home&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;./components/about&#x27;</span></span><br><span class="line"></span><br><span class="line">    Vue.use(VueRouter) <span class="comment">#注册，告诉vue我们需要使用VueRouter</span></span><br><span class="line"></span><br><span class="line">    export default new VueRouter(&#123;</span><br><span class="line">        routes:[</span><br><span class="line">            &#123;</span><br><span class="line">            path: <span class="string">&#x27;/home&#x27;</span>, <span class="comment">#在url中输入路径对应的组件</span></span><br><span class="line">            name: <span class="string">&#x27;home&#x27;</span>, <span class="comment">#对应的名称</span></span><br><span class="line">            component:Home <span class="comment">#路径对应的组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">            path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;about&#x27;</span>,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>最后在main.js中注册一下     </span><br><span class="line">main.js:</span><br><span class="line">    <span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line">    <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line">    Vue.config.productionTip = false <span class="comment">#这是提示</span></span><br><span class="line"></span><br><span class="line">    new Vue(&#123;</span><br><span class="line">      render: h =&gt; h(App),</span><br><span class="line">      router <span class="comment">#添加这个</span></span><br><span class="line">    &#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="动态路由匹配"><a href="#动态路由匹配" class="headerlink" title="动态路由匹配"></a>动态路由匹配</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在实际的开发环境中我们经常需要做到动态的路由匹配</span><br><span class="line">例如:</span><br><span class="line">    http://<span class="number">192.168</span><span class="number">.11</span><span class="number">.214</span>:<span class="number">8888</span>/user/<span class="number">1</span> <span class="comment">#找到对应编号为1的用户，</span></span><br><span class="line">那么我们需要如何去匹配这个路径让他去往对应的路径呢</span><br><span class="line">eg：</span><br><span class="line">router.js:</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">&#x27;/user/:username&#x27;</span>, <span class="comment">#:username代表key,方便我们在后续的页面使用特殊的方式取出这个参数</span></span><br><span class="line">        name: <span class="string">&#x27;user&#x27;</span>, </span><br><span class="line">        component:User <span class="comment">#上述路径对应的组件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">user.vue:</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">   &lt;div&gt;用户名是:&#123;&#123;$route.params.username&#125;&#125;&lt;/div&gt; #router.params代表的就是参数对象</span><br><span class="line">    &lt;/template&gt;</span><br></pre></td></tr></table></figure><h4 id="捕获路径不正确的页面返回404"><a href="#捕获路径不正确的页面返回404" class="headerlink" title="捕获路径不正确的页面返回404"></a>捕获路径不正确的页面返回404</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">我们可以在路由的最后添加一个path: <span class="string">&#x27;*&#x27;</span>，这代表匹配所有的路径，由于我们路由匹配时自上而下的，所以我们可以把这个匹配到所有路由的分配给<span class="number">404</span>页面</span><br><span class="line">eg:</span><br><span class="line">router.js:</span><br><span class="line">    &#123;</span><br><span class="line">    path: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">     name: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        component:Error</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">有些时候我们需要在一个组件中进行一些组件的嵌套，面对这种需求vue也为我们提供了相应的语法</span><br><span class="line">在路由中我们只需要在对应的组件下面添加一个children属性即可</span><br><span class="line">router.js:</span><br><span class="line">&#123;</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    name: <span class="string">&#x27;main&#x27;</span>,</span><br><span class="line">    component:Main,</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">            component:Home</span><br><span class="line">    &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">然后我们在父组件中添加一个&lt;router-view&gt;&lt;/router-view&gt;标签就可以把对应的组件渲染在该位置</span><br></pre></td></tr></table></figure><h4 id="使用js实现页面组件跳转"><a href="#使用js实现页面组件跳转" class="headerlink" title="使用js实现页面组件跳转"></a>使用js实现页面组件跳转</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过点击页面组件中的某个控件来达到跳转组件的效果，但是我们本身也可以通过js来实现页面组件的跳转</span><br><span class="line">语法:</span><br><span class="line">    this.$router.push(<span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Vue-CLI&quot;&gt;&lt;a href=&quot;#Vue-CLI&quot; class=&quot;headerlink&quot; title=&quot;Vue_CLI&quot;&gt;&lt;/a&gt;Vue_CLI&lt;/h3&gt;&lt;h4 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="vue" scheme="https://a744740454.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://a744740454.github.io/tags/vue/"/>
    
    <category term="前端" scheme="https://a744740454.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/var-let/"/>
    <id>https://a744740454.github.io/2022/01/15/Vue%E5%AD%A6%E4%B9%A0/var-let/</id>
    <published>2022-01-15T09:32:52.334Z</published>
    <updated>2022-01-15T09:42:57.693Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var-let"><a href="#var-let" class="headerlink" title="var/let"></a>var/let</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var在设计上是有缺陷的，为了弥补这个缺陷，在ES6中推出了let关键字去弥补这个缺陷。</span><br></pre></td></tr></table></figure><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var没有块级作用域，在&#123;&#125;内定义的变量可以全局使用，容易造成变量污染。</span><br></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let可以让定义的变量在函数内有块级作用域的概念，不会影响到别的函数</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;var-let&quot;&gt;&lt;a href=&quot;#var-let&quot; class=&quot;headerlink&quot; title=&quot;var/let&quot;&gt;&lt;/a&gt;var/let&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://a744740454.github.io/2021/12/11/gui/PyQt5/PyQt5%E5%88%9D%E8%AF%86/"/>
    <id>https://a744740454.github.io/2021/12/11/gui/PyQt5/PyQt5%E5%88%9D%E8%AF%86/</id>
    <published>2021-12-11T11:25:23.544Z</published>
    <updated>2021-12-11T13:55:38.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="QObject"><a href="#QObject" class="headerlink" title="QObject"></a>QObject</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">所有控件的基类</span><br><span class="line">设置了一些通用与基础的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">method:</span><br><span class="line">parent:</span><br><span class="line">获取该对象的父控件(只有一个)</span><br><span class="line">children:</span><br><span class="line">获取该对象的子控件(可能会有多个)</span><br><span class="line"></span><br><span class="line">内存管理机制</span><br><span class="line">在父子关系的空间中，可以通过关闭父控件以达到关闭所有该父控件下的子控件的效果</span><br></pre></td></tr></table></figure><h2 id="qss"><a href="#qss" class="headerlink" title="qss"></a>qss</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qss与css很相，他的组成部分可以由三部分组成</span><br><span class="line">控件名称 + # + 控件id + [&quot;属性名&quot;]</span><br><span class="line">eg:</span><br><span class="line">QPushButton#test[&quot;&quot;]</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">from PyQt5.Qt import *</span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">app &#x3D; QApplication(sys.argv)</span><br><span class="line">print(sys.argv)  # 接受命令行传递过来的参数，去执行对应的命令</span><br><span class="line"></span><br><span class="line">window &#x3D; QWidget()</span><br><span class="line">window.setWindowTitle(&quot;QAQ&quot;)</span><br><span class="line">window.resize(500, 500)</span><br><span class="line">window.move(400, 200)</span><br><span class="line"></span><br><span class="line">label &#x3D; QLabel(window)</span><br><span class="line">label.setText(&quot;hello world&quot;)</span><br><span class="line">label.move(200, 200)</span><br><span class="line"></span><br><span class="line">window.show()</span><br><span class="line"></span><br><span class="line">sys.exit(app.exec_())  # app.exec_,启动事件循环。直到程序接收到对应的退出码后才会退出</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;QObject&quot;&gt;&lt;a href=&quot;#QObject&quot; class=&quot;headerlink&quot; title=&quot;QObject&quot;&gt;&lt;/a&gt;QObject&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>pylint</title>
    <link href="https://a744740454.github.io/2021/11/28/python%E6%A8%A1%E5%9D%97/pylint/pylint/"/>
    <id>https://a744740454.github.io/2021/11/28/python%E6%A8%A1%E5%9D%97/pylint/pylint/</id>
    <published>2021-11-28T09:29:36.735Z</published>
    <updated>2021-11-28T10:38:26.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="pylint"><a href="#pylint" class="headerlink" title="pylint"></a>pylint</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Pylint 是一个 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8）和有潜在问题的代码。</span><br><span class="line"></span><br><span class="line">pylint可以简单的通过配置文件去修改配置项，以达到定制的目的</span><br><span class="line"></span><br><span class="line">pylint的信息</span><br><span class="line">[OBJECT:]MESSAGE_TYPE:LINE_NUMBER:MESSAGE</span><br><span class="line">项目名     :  行数     :  信息类型 : 信息内容</span><br><span class="line"></span><br><span class="line">ex:</span><br><span class="line">amimation_web\route\api_route.py:5:0: C0116: Missing function or method docstring (missing-function-docstring)</span><br><span class="line"></span><br><span class="line">pylint的信息类型的级别</span><br><span class="line">　　(C) convention 惯例。违反了编码风格标准</span><br><span class="line">　　(R) refactor 重构。写得非常糟糕的代码。</span><br><span class="line">　　(W) warning 警告。某些 Python 特定的问题。</span><br><span class="line">　　(E) error 错误。很可能是代码中的错误。</span><br><span class="line">　　(F) fatal 致命错误。阻止 Pylint 进一步运行的错误。</span><br><span class="line">　　</span><br><span class="line">启动命令:</span><br><span class="line">pylint [option] project</span><br><span class="line">参数:</span><br><span class="line">--rcfile:指定配置文件</span><br><span class="line">ex:</span><br><span class="line">pylint --rcfile&#x3D;amimation_web&#x2F;pylint.conf amimation_web</span><br></pre></td></tr></table></figure><h3 id="pylint配置文件"><a href="#pylint配置文件" class="headerlink" title="pylint配置文件"></a>pylint配置文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">[MASTER]</span><br><span class="line"><span class="comment">#忽视某些文件夹或者文件夹的名称</span></span><br><span class="line">ignore=文件名获文件夹名，检索的时候会被跳过</span><br><span class="line">ex:</span><br><span class="line">ignore=CVS,venv</span><br><span class="line">    </span><br><span class="line"><span class="comment">#忽视某个文件路径,可以使用正则</span></span><br><span class="line">ignore-paths=文件路径</span><br><span class="line"></span><br><span class="line">output-<span class="built_in">format</span>=text/parseable/colorized/json</span><br><span class="line">text:只输出文本</span><br><span class="line">parseable:比起text文本会更详细点</span><br><span class="line">colorized:输出带颜色的文本</span><br><span class="line">json:输出成json类型</span><br><span class="line"></span><br><span class="line">[REPORTS]</span><br><span class="line">reports=yes/no <span class="comment">#是否输出报告</span></span><br><span class="line"></span><br><span class="line">[MESSAGES CONTROL]</span><br><span class="line"><span class="comment">#不使用某些规则</span></span><br><span class="line">disable=</span><br><span class="line">ex:</span><br><span class="line">    disable=missing-docstring, <span class="comment"># 去掉文档打印</span></span><br><span class="line">        wrong-<span class="keyword">import</span>-position, <span class="comment"># 去掉 文件导入位置,不符合实际需求</span></span><br><span class="line">        logging-<span class="keyword">not</span>-lazy, <span class="comment"># 去掉 日志打印相关</span></span><br><span class="line">        unnecessary-<span class="keyword">pass</span>, <span class="comment"># 去掉 判断 空函数 不能加pass的校验</span></span><br><span class="line">        redefined-builtin, <span class="comment"># 去掉 命名和 python内置函数名或类名冲突 的校验，如 python的next()函数，则变量不能命名为next</span></span><br><span class="line">        no-self-use, <span class="comment"># 去掉 类中没有自己调用的 检测</span></span><br><span class="line">        too-few-public-methods, <span class="comment"># 去掉 检测 类中方法太少 的功能</span></span><br><span class="line">        no-<span class="keyword">else</span>-<span class="keyword">return</span>, <span class="comment"># 去掉 if中有return,else中不能有return的 校验</span></span><br><span class="line">        no-<span class="keyword">else</span>-<span class="keyword">raise</span>, <span class="comment"># 去掉 if中有raise,else中不能有raise的 校验</span></span><br><span class="line">        </span><br><span class="line">[FORMAT]</span><br><span class="line"><span class="comment"># 一行的最大单词数</span></span><br><span class="line"><span class="built_in">max</span>-line-length=<span class="number">125</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个文件最大行数</span></span><br><span class="line"><span class="built_in">max</span>-module-lines=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line">[DESIGN]</span><br><span class="line"></span><br><span class="line"><span class="comment">#一个函数或方法的最大参数个数</span></span><br><span class="line"><span class="built_in">max</span>-args=<span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个类最多的属性个数</span></span><br><span class="line"><span class="built_in">max</span>-attributes=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#if语句中的最大布尔表达式个数</span></span><br><span class="line"><span class="built_in">max</span>-<span class="built_in">bool</span>-expr=<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个函数或方法最大的分支个数（if else 个数）</span></span><br><span class="line"><span class="built_in">max</span>-branches=<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#最大局部变量个数</span></span><br><span class="line"><span class="built_in">max</span>-<span class="built_in">locals</span>=<span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类的最大父类个数</span></span><br><span class="line"><span class="built_in">max</span>-parents=<span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#类中公共方法个数</span></span><br><span class="line"><span class="built_in">max</span>-public-methods=<span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#一个函数最大return个数</span></span><br><span class="line"><span class="built_in">max</span>-returns=<span class="number">10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;pylint&quot;&gt;&lt;a href=&quot;#pylint&quot; class=&quot;headerlink&quot; title=&quot;pylint&quot;&gt;&lt;/a&gt;pylint&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut</summary>
      
    
    
    
    <category term="pylint" scheme="https://a744740454.github.io/categories/pylint/"/>
    
    
    <category term="pylint" scheme="https://a744740454.github.io/tags/pylint/"/>
    
  </entry>
  
  <entry>
    <title>linux常用目录</title>
    <link href="https://a744740454.github.io/2021/10/24/linux/linux%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95/"/>
    <id>https://a744740454.github.io/2021/10/24/linux/linux%E5%B8%B8%E7%94%A8%E7%9B%AE%E5%BD%95/</id>
    <published>2021-10-24T10:22:06.691Z</published>
    <updated>2021-10-24T13:06:20.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="linux常用目录"><a href="#linux常用目录" class="headerlink" title="linux常用目录"></a>linux常用目录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.应用程序</span><br><span class="line">&#x2F;usr&#x2F;bin:系统用于程序开发的工具，像常用的命令cd等都在这个目录下</span><br><span class="line">&#x2F;usr&#x2F;local 、&#x2F;opt:后期用户添加的命令一般都在这边</span><br><span class="line"></span><br><span class="line">2.头文件</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;linux常用目录&quot;&gt;&lt;a href=&quot;#linux常用目录&quot; class=&quot;headerlink&quot; title=&quot;linux常用目录&quot;&gt;&lt;/a&gt;linux常用目录&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="linux" scheme="https://a744740454.github.io/categories/linux/"/>
    
    
    <category term="linux" scheme="https://a744740454.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>分层模型与协议、参考模型</title>
    <link href="https://a744740454.github.io/2021/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8D%8F%E8%AE%AE%E3%80%81%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/"/>
    <id>https://a744740454.github.io/2021/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E5%88%86%E5%B1%82%E6%A8%A1%E5%9E%8B%E4%B8%8E%E5%8D%8F%E8%AE%AE%E3%80%81%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-09-17T14:52:24.681Z</published>
    <updated>2021-09-17T15:40:44.526Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分层模型与协议、参考模型"><a href="#分层模型与协议、参考模型" class="headerlink" title="分层模型与协议、参考模型"></a>分层模型与协议、参考模型</h2><h3 id="协议的定义"><a href="#协议的定义" class="headerlink" title="协议的定义"></a>协议的定义</h3><p>协议:简单的说就是规则，协议创建出来的目的是为了沟通的方所创建的。打个比方，我这边使用python写了一部分接口，别人如果要调用我的接口应该怎么办呢？如果我不和他说，那他就基本不可能知道我接口的构成。但是我写了接口文档之后，他就知道去如何调用我的接口了，协议的本质其实和接口文档也是类似的。他本质就是不同计算机之间沟通的桥梁。</p><h3 id="协议模型与参考模型"><a href="#协议模型与参考模型" class="headerlink" title="协议模型与参考模型"></a>协议模型与参考模型</h3><p>首先说结论，协议模型的本质是为了让人们使用更好的使用协议，而参考模型则是基于协议模型发展而来的。因此可以这么说协议模型，就是现实中实现某种协议而现实存在的，便于人们理解的。参考模型则不同，参考模型是为了让人们去理解网络的功能与过程去实现的。</p><p>打个比方:TCP/IP协议模型就详细的描述了每个部分实现的功能，是一种事实上的标准</p><p>参考模型:osi7层模型，他并没有详细的解释每一层中的某个协议具体的功能，而是大概的解释了网络的传输功能，并依据功能对此进行分类</p><h3 id="osi7层模型"><a href="#osi7层模型" class="headerlink" title="osi7层模型"></a>osi7层模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.osi7层模型是在1979年ISO公布的系统互连参考模型，他提供了关于网络通信过程的简要描述</span><br><span class="line">2.osi是一种分层的体系结构，共有7层</span><br><span class="line">    应表会传网数物</span><br><span class="line">    应用层:为终端用户提供应用程序服务</span><br><span class="line">    表示层:为应用提供数据的表示形式。例如表示层告诉应用层哪里有加密或者是否为一张图片</span><br><span class="line">    会话层:用户之间管理会话</span><br><span class="line">    传输层:定义数据段并编号，传送数据，并在目的地重组数据</span><br><span class="line">    网络层:为能通过在其他网络的中间设备进行端到端的发送建立编址包</span><br><span class="line">    数据链路层:为在局域网上主机到主机或广域网的设备间的发送建立和编址帧</span><br><span class="line">    物理层:传输数据</span><br><span class="line">3.每一层中都存在着一部分的实体,也就是具体的功能</span><br><span class="line">4.每一层的沟通方式使用的是SAP，也就是接口组成，上下层不需要知道其实现的细节</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分层模型与协议、参考模型&quot;&gt;&lt;a href=&quot;#分层模型与协议、参考模型&quot; class=&quot;headerlink&quot; title=&quot;分层模型与协议、参考模型&quot;&gt;&lt;/a&gt;分层模型与协议、参考模型&lt;/h2&gt;&lt;h3 id=&quot;协议的定义&quot;&gt;&lt;a href=&quot;#协议的定义&quot; c</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://a744740454.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://a744740454.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络的功能特性</title>
    <link href="https://a744740454.github.io/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7/"/>
    <id>https://a744740454.github.io/2021/09/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7/</id>
    <published>2021-09-08T15:17:15.326Z</published>
    <updated>2021-09-15T15:56:07.829Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机网络的功能特性"><a href="#计算机网络的功能特性" class="headerlink" title="计算机网络的功能特性"></a>计算机网络的功能特性</h2><p>首先我们抛出一个问题:计算机网络如何在两个端用户之间提供访问通信?</p><p>对于上述问题，我们可以简单的用下面这种文字链式的方式来进行回答</p><p><strong>应用–&gt;编码器–&gt;传输介质–&gt;编码器–&gt;应用</strong></p><p>上面是大概的轮廓，现在我们来详细讲讲通信之间的具体方式</p><h3 id="传输数据必备的前提"><a href="#传输数据必备的前提" class="headerlink" title="传输数据必备的前提"></a>传输数据必备的前提</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.众所周知，计算机之间的通信是通过电信号去通信的，那么问题来了，电信号是如何传播的。在当前社会其实是有两种方式的，一种是通过地面的有形介质，也就是深埋在地底的各种线路，一种是无形的介质，也就是卫星。</span><br><span class="line">2.其次我们假设一种情况，一匹马从北京到上海马不停蹄，是不是会累死？电信号其实本质也是这样，电信号在传播的时候其实是会有一定的损失的，如果距离过远，损失会更大，因此我们需要我们的“驿站”，也就是途中的部分转发节点</span><br><span class="line">3.不知道大家小时候知不知道“猫”，小时候如果要上网，那必须使用的方式是拨号上网。其实那是在和电话线使用同一个传输的通道，而猫的作用就是将我们电脑的数字信号转成模拟信号，以达到让电脑的数据可以通过电话的通道去进行传输。</span><br><span class="line"></span><br><span class="line">ps:数字信号和模拟信号的区别</span><br><span class="line">模拟信号是连续的，不停的，是一段电压</span><br><span class="line">数字信号则是通过0和1的数字串所构成的数字流来传输的、</span><br></pre></td></tr></table></figure><h3 id="数据传输的特点"><a href="#数据传输的特点" class="headerlink" title="数据传输的特点"></a>数据传输的特点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数据传输其实是有一个很明显的特点的，打个比方，我们在打电话的时候，很明显数据应该是持续的，毕竟沟通嘛，不可能你隔一段时间说一句那个隔一段时间说一句，但是数据传输不一样。他其实是一个数据包一个数据包传输，并且每一个数据包之间的传输会有一定的间隔。</span><br><span class="line">综合上述特点，我们可以考虑到计算机之间的通信我们需要有一个比较合理的架构，毕竟世界上不止有两台计算机在通信，是非常多的计算机在进行通信。但是很多计算机其实是用的同一个信道。所以如何去规划这些数据包的传输是一件很有学问的事情</span><br></pre></td></tr></table></figure><h3 id="数据包的传输规划"><a href="#数据包的传输规划" class="headerlink" title="数据包的传输规划"></a>数据包的传输规划</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">针对数字信号的传输，设计者是设计了两种方案去解决这个问题</span><br><span class="line">1.报文交换</span><br><span class="line">2.分组交换(现在常用)</span><br><span class="line"></span><br><span class="line">上述两种听名字很高大上，实际上是非常简单的一个概念，报文交换就是将所有的数据一并进行传输，分组交换则是将一整组的数据进行拆分，拆成小的部分进行传输。</span><br><span class="line">至于两者之间的优劣可以去看这个博客:https:&#x2F;&#x2F;blog.csdn.net&#x2F;suxiaorui&#x2F;article&#x2F;details&#x2F;87099192个人觉得是讲解的比较简单详细的。</span><br><span class="line">这里说个结论，分组交换要优于报文交换。因为将数据进行拆分以后，你可以通过多个路线去进行传输，理论上是可以达到类似并行的效果的，并且个人觉得，这样做可以减少丢包带来的损失，就算丢了其中一部分包，你也只需要传输丢失的一部分包即可，不需要进行全部重传的操作。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">多路复用简单的说就是让多个计算机使用同一条通信的信道，这就是多路复用。</span><br><span class="line">多路复用+分组交换是现在最常用的一种传输数据的手段</span><br></pre></td></tr></table></figure><p><img src="C:\Users\QAQ\Desktop\R-C.png" alt="R-C"></p><p>​                                                                                                多路复用图示详解</p><h3 id="分组交换所需要的必备条件-分组的控制信息"><a href="#分组交换所需要的必备条件-分组的控制信息" class="headerlink" title="分组交换所需要的必备条件(分组的控制信息)"></a>分组交换所需要的必备条件(分组的控制信息)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">为了满足上述的功能条件，有下面三点是必须做到的</span><br><span class="line">1.差错控制</span><br><span class="line">2.寻址功能</span><br><span class="line">3.仲裁过程</span><br><span class="line">首先我们来谈谈差错控制，差错控制简单的说就是如何去校验你传输过来的数据是否正确？是否中途被人调过包获少包，你需要有这个校验功能</span><br><span class="line">寻址功能就是我们如何确定要给谁去传这个包？也就是类似的邮件寄件地址</span><br><span class="line">仲裁过程就是在多个计算机同时发包，那么谁先谁后？</span><br><span class="line"></span><br><span class="line">对于上述的功能，我们有个统一的名称(数据链路控制功能) Data Link Control</span><br><span class="line"></span><br><span class="line">上述几点是最重要的，但是除了上述几点，我们还需要考虑下面几点</span><br><span class="line">网络通信量过多了如何？如何确定计算机网络之间的通信已经结束？</span><br><span class="line">对于上述这两个问题也有一定的功能区解决</span><br><span class="line">流量控制以及拥塞控制是去解决第一个问题的。</span><br><span class="line">对于第二个问题则是牵扯到tcp中四次握手三次挥手的概念</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;计算机网络的功能特性&quot;&gt;&lt;a href=&quot;#计算机网络的功能特性&quot; class=&quot;headerlink&quot; title=&quot;计算机网络的功能特性&quot;&gt;&lt;/a&gt;计算机网络的功能特性&lt;/h2&gt;&lt;p&gt;首先我们抛出一个问题:计算机网络如何在两个端用户之间提供访问通信?&lt;/p&gt;
</summary>
      
    
    
    
    <category term="计算机网络" scheme="https://a744740454.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="https://a744740454.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像发布</title>
    <link href="https://a744740454.github.io/2021/08/15/docker/docker%20%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83/"/>
    <id>https://a744740454.github.io/2021/08/15/docker/docker%20%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83/</id>
    <published>2021-08-15T15:32:16.623Z</published>
    <updated>2021-08-15T15:32:17.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-镜像发布"><a href="#docker-镜像发布" class="headerlink" title="docker 镜像发布"></a>docker 镜像发布</h2><h3 id="发布到阿里云"><a href="#发布到阿里云" class="headerlink" title="发布到阿里云"></a>发布到阿里云</h3><p>1.登录</p><p>2.选择容器镜像服务</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210615150257.png" alt="image-20210615150257481"></p><p>3.选择个人版</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210615150336.png" alt="image-20210615150336052"></p><p>4.创建命名空间</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210615150356.png" alt="image-20210615150356943"></p><p>5.创建镜像仓库</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210615150422.png" alt="image-20210615150422024"></p><p>6.根据阿里官方的文档进行镜像的推送即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-镜像发布&quot;&gt;&lt;a href=&quot;#docker-镜像发布&quot; class=&quot;headerlink&quot; title=&quot;docker 镜像发布&quot;&gt;&lt;/a&gt;docker 镜像发布&lt;/h2&gt;&lt;h3 id=&quot;发布到阿里云&quot;&gt;&lt;a href=&quot;#发布到阿里云&quot; cla</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker容器互联</title>
    <link href="https://a744740454.github.io/2021/08/15/docker/docker%20%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/"/>
    <id>https://a744740454.github.io/2021/08/15/docker/docker%20%E5%AE%B9%E5%99%A8%E4%BA%92%E8%81%94/</id>
    <published>2021-08-15T15:32:16.504Z</published>
    <updated>2021-08-15T15:32:17.040Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-容器互联"><a href="#docker-容器互联" class="headerlink" title="docker 容器互联"></a>docker 容器互联</h2><p>当你创建了多个容器后，你可以直接使用ip地址ping通，但是我们需要考虑一个情况</p><p>某个容器修改了ip,这样子的话其余连接该容器的容器都需要更换成新的ip地址。是不是很麻烦</p><p>这种时候我们需要一种技术，通过连接主机名，也就是容器名，我们就可以让容器之间互相连接。</p><h3 id="–link"><a href="#–link" class="headerlink" title="–link"></a>–link</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">启动容器的时候直接添加--link参数</span><br><span class="line">docker run --link 容器名    </span><br><span class="line">ps:本质是在启动容器内的&#x2F;etc&#x2F;host下添加了映射</span><br></pre></td></tr></table></figure><h3 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker network ls <span class="comment">#查看网络信息</span></span><br><span class="line">docker network inspect 网络名 <span class="comment"># 查看网络详细信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建</span></span><br><span class="line">docker network create --driver 模式 --subnet 子网 --gateway 网关 网络名称</span><br><span class="line">eg:</span><br><span class="line">docker network create --driver bridge --subnet <span class="number">192.168</span><span class="number">.0</span><span class="number">.0</span>/<span class="number">16</span> --gateway <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> mynet</span><br><span class="line">    </span><br><span class="line"><span class="comment">#容器使用自己的网络创建容器</span></span><br><span class="line">docker run --net 网络名</span><br><span class="line">eg:</span><br><span class="line">    docker run -d -P --name tomcat-net-01 --net mynet tomcat</span><br><span class="line"></span><br><span class="line">使用自定义网络之后在同一网段下我们可以直接使用容器名就可以实现容器互联</span><br></pre></td></tr></table></figure><h3 id="不同网段的容器互相连通"><a href="#不同网段的容器互相连通" class="headerlink" title="不同网段的容器互相连通"></a>不同网段的容器互相连通</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker network connect 网络名 容器名</span><br><span class="line">eg:</span><br><span class="line">docker network connect mynet dea17f8117e0</span><br><span class="line">我们可以使用命令查看对应的网络信息</span><br><span class="line">docker network inspect mynet <span class="comment">#查看mynet地下的容器信息</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\CSIT-04\AppData\Roaming\Typora\typora-user-images\image-20210617191824008.png" alt="image-20210617191824008"></p><p>如上图所示，我们将对应的容器直接加入到了对应的网络地下</p><p>这样子我们就做到了不同网段联通的情况</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-容器互联&quot;&gt;&lt;a href=&quot;#docker-容器互联&quot; class=&quot;headerlink&quot; title=&quot;docker 容器互联&quot;&gt;&lt;/a&gt;docker 容器互联&lt;/h2&gt;&lt;p&gt;当你创建了多个容器后，你可以直接使用ip地址ping通，但是我们需要</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker容器基础操作</title>
    <link href="https://a744740454.github.io/2021/08/15/docker/docker%20%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
    <id>https://a744740454.github.io/2021/08/15/docker/docker%20%E5%AE%B9%E5%99%A8%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</id>
    <published>2021-08-15T15:32:16.442Z</published>
    <updated>2021-08-15T15:32:16.777Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker-容器基础操作"><a href="#docker-容器基础操作" class="headerlink" title="docker 容器基础操作"></a>docker 容器基础操作</h2><h3 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run [option] image [cmd]</span><br><span class="line">option:</span><br><span class="line">-d:以守护进程方式运行</span><br><span class="line">-p:指定映射端口  本机端口:r</span><br><span class="line">-P:随机映射端口</span><br><span class="line">-i:保持标准输入打开</span><br><span class="line">-t:分配一个伪终端</span><br><span class="line">-v:设置挂载文件到主机上</span><br><span class="line">--rm:当容器关闭时自动删除</span><br><span class="line">--name:为启动的容器设置一个名字</span><br><span class="line">--network:指定使用哪个网络</span><br><span class="line">-e:设置容器中的环境变量</span><br><span class="line">--link:链接到另一个容器</span><br><span class="line">-h:指定容器内的主机名</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps [option]</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND        CREATED             STATUS       PORTS        NAMES</span><br><span class="line">容器id          镜像名     命令            创建时间             状态          端口号        容器名称    </span><br><span class="line"></span><br><span class="line">option:</span><br><span class="line">-a:全部容器，包括停止的</span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker终止容器是首先向容器发送SIGTERM信号,等待一段时间超时后(默认10秒)，再发送SIGKILL信号来终止容器。</span><br><span class="line">docker stop [container id]&#x2F;[names]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><h4 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker attach [container id]&#x2F;[names]</span><br><span class="line">attach是最早docker官方推出的进入容器的命令了，不过使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作，当所有窗口退出时，容器结束</span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker exec [options] [container id]&#x2F;[names] [command]</span><br><span class="line">既attach之后，exec是官方推出的有一个新的进入容器的命令，这个命令相当于在容器中执行一个命令。</span><br><span class="line">options:</span><br><span class="line">    -d :分离模式: 在后台运行</span><br><span class="line">    -i :即使没有附加也保持STDIN 打开</span><br><span class="line">    -t :分配一个伪终端</span><br><span class="line">eg:</span><br><span class="line">docker exec -it 2f9f406173da &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h4 id="nsenter"><a href="#nsenter" class="headerlink" title="nsenter"></a>nsenter</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">是一个轻量级的软件，我们可以使用这个软件进入容器之中，一般配合docker inspect使用</span><br><span class="line"></span><br><span class="line">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; [container id]&#x2F;[names] 获取容器的pid</span><br><span class="line">nsenter</span><br><span class="line">-t, --target pid：指定被进入命名空间的目标进程的pid</span><br><span class="line">-m, --mount[&#x3D;file]：进入mount命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-u, --uts[&#x3D;file]：进入uts命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-i, --ipc[&#x3D;file]：进入ipc命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-n, --net[&#x3D;file]：进入net命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-p, --pid[&#x3D;file]：进入pid命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-U, --user[&#x3D;file]：进入user命令空间。如果指定了file，则进入file的命令空间</span><br><span class="line">-G, --setgid gid：设置运行程序的gid</span><br><span class="line">-S, --setuid uid：设置运行程序的uid</span><br><span class="line">-r, --root[&#x3D;directory]：设置根目录</span><br><span class="line">-w, --wd[&#x3D;directory]：设置工作目录</span><br></pre></td></tr></table></figure><h4 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在生产环境中排除了使用 docker attach 命令进入容器之后，相信大家第一个想到的就是 ssh。在镜像（或容器） 中安装 SSH Server，这样就能保证多人进入容器且相互之间不受干扰了，相信大家在当前的生产环境中（没有 使用 Docker 的情况）也是这样做的。但是使用了 Docker 容器之后不建议使用 ssh 进入到 Docker 容器内。</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm [options] [container id]&#x2F;[name]</span><br><span class="line">options</span><br><span class="line">-f:强制删除</span><br></pre></td></tr></table></figure><h3 id="容器的文件复制"><a href="#容器的文件复制" class="headerlink" title="容器的文件复制"></a>容器的文件复制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将容器内的文件复制出来</span><br><span class="line">docker cp [container id]&#x2F;name:容器内路径 本地路径</span><br><span class="line"></span><br><span class="line">将宿主机的文件复制到容器中</span><br><span class="line">docker cp 本地路径 [container id]&#x2F;name:容器内路径</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;docker-容器基础操作&quot;&gt;&lt;a href=&quot;#docker-容器基础操作&quot; class=&quot;headerlink&quot; title=&quot;docker 容器基础操作&quot;&gt;&lt;/a&gt;docker 容器基础操作&lt;/h2&gt;&lt;h3 id=&quot;容器创建&quot;&gt;&lt;a href=&quot;#容器创建&quot;</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
    <category term="docker容器" scheme="https://a744740454.github.io/tags/docker%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>dockerfile</title>
    <link href="https://a744740454.github.io/2021/08/15/docker/Dockerfile/"/>
    <id>https://a744740454.github.io/2021/08/15/docker/Dockerfile/</id>
    <published>2021-08-15T15:32:16.315Z</published>
    <updated>2021-08-15T15:32:16.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dockerfile-构建镜像"><a href="#Dockerfile-构建镜像" class="headerlink" title="Dockerfile 构建镜像"></a>Dockerfile <strong>构建镜像</strong></h2><p>​    Dockerfile 由一行行命令语句组成， 并且支持以＃开头的注释行。一般而言， Dockerfile 主体内容分为四 部分：基础镜像信息、 维护者信息、 镜像操作指令和容器启动时执行指令。 </p><p>​    Docker 以从上到下的顺序运行 Dockerfile 的指令。为了指定基本映像，第一条指令必须是 FROM。一个声明以＃字符开头则被视为注释。可以在 Docker 文件中使用 RUN，CMD，FROM，EXPOSE，ENV 等指令</p><p><img src="https://gitee.com/a744740454/mypic/raw/master/img/20210422191053.png" alt="image-20210422191046184"></p><h3 id="FROM-基础镜像"><a href="#FROM-基础镜像" class="headerlink" title="FROM:基础镜像"></a>FROM:基础镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式</span><br><span class="line">FROM image</span><br><span class="line">FROM image:tag</span><br><span class="line">FROM image@digest</span><br><span class="line">eg:</span><br><span class="line">FROM mysql:5.6</span><br><span class="line">ps: tag或digest是可选的，如果不使用这两个值，会使用latest版本的基础镜像 </span><br></pre></td></tr></table></figure><h3 id="MAINTAINER-维护者信息"><a href="#MAINTAINER-维护者信息" class="headerlink" title="MAINTAINER:维护者信息"></a>MAINTAINER:维护者信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式:</span><br><span class="line">MAINTAINER name</span><br><span class="line">eg:</span><br><span class="line">MAINTAINER SadnessPineapple</span><br></pre></td></tr></table></figure><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">RUN 用于在镜像容器中执行命令，有以下两种命令执行方式</span><br><span class="line">格式:</span><br><span class="line">run command</span><br><span class="line">eg:</span><br><span class="line">RUN [<span class="string">&quot;executable&quot;</span>, <span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param2&quot;</span>]<span class="comment">#executable:可执行的命令</span></span><br><span class="line">run echo <span class="string">&quot;nameserver 114.114.114.114&quot;</span></span><br></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">将本地文件添加到容器中(tar类型的文件会自动解压)</span><br><span class="line">格式:</span><br><span class="line">ADD src dest</span><br><span class="line">eg:</span><br><span class="line">ADD hom* &#x2F;mydir&#x2F; 将所有的文件添加到&#x2F;mydir&#x2F;下</span><br></pre></td></tr></table></figure><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</span><br><span class="line">格式:</span><br><span class="line">COPY src dest</span><br><span class="line">eg:</span><br><span class="line">dest 为镜像中的绝对路径或者相对于WORKDIR的路径</span><br></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构建容器后调用，也就是在容器启动时才进行调用，只能有一个，多个的话会被覆盖</span><br><span class="line">格式:</span><br><span class="line">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">示例:</span><br><span class="line">CMD [&quot;&#x2F;bin&#x2F;bash&quot;]</span><br></pre></td></tr></table></figure><h3 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">功能与CMD相似，但是不会被覆盖</span><br><span class="line">格式:</span><br><span class="line">ENTRYPOINT [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</span><br><span class="line">示例:</span><br><span class="line">ENTRYPOINT [&quot;&#x2F;bin&#x2F;bash&quot;]</span><br></pre></td></tr></table></figure><h3 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用于为镜像添加元数据</span><br><span class="line">格式:</span><br><span class="line">LABEL &lt;key&gt;&#x3D;&lt;value&gt;</span><br><span class="line">示例:</span><br><span class="line">LABEL version&#x3D;&quot;1.0&quot; description&#x3D;&quot;这是一个 Web 服务器&quot; by&#x3D;&quot;IT 笔录&quot;</span><br></pre></td></tr></table></figure><h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">设置环境变量</span><br><span class="line">格式:</span><br><span class="line">ENV &lt;key&gt; &lt;value&gt; <span class="comment">#&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置 一个变量</span></span><br><span class="line">示例:</span><br><span class="line">    ENV myName John Doe</span><br></pre></td></tr></table></figure><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">指定于外界交互的端口</span><br><span class="line">格式:</span><br><span class="line">EXPOSE &lt;port&gt;</span><br><span class="line">示例:</span><br><span class="line">EXPOSE 80 443</span><br></pre></td></tr></table></figure><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Docker的数据持久化主要有两种方式：</span><br><span class="line">    bind mount</span><br><span class="line">    volume</span><br><span class="line">Docker的数据持久化即使数据不随着container的结束而结束，数据存在于host机器上——要么存在于host的某个指定目录中（使用bind mount），要么使用docker自己管理的volume（/var/lib/docker/volumes下）。</span><br><span class="line">格式:</span><br><span class="line">VOLUME [<span class="string">&quot;/path&quot;</span>] <span class="comment">#将容器内的某个文件挂载出来</span></span><br><span class="line">示例:</span><br><span class="line">VOLUME [<span class="string">&quot;/data&quot;</span>]</span><br><span class="line"></span><br><span class="line">ps:</span><br><span class="line">通过 VOLUME 指令创建的挂载点，无法指定主机上对应的目录，是自动生成的。</span><br></pre></td></tr></table></figure><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">工作目录，类似于 cd 命令</span><br><span class="line">格式:</span><br><span class="line">WORKDIR /path/to/workdir</span><br><span class="line">示例：</span><br><span class="line">WORKDIR /a (这时工作目录为/a) </span><br><span class="line">WORKDIR b (这时工作目录为/a/b)</span><br><span class="line">ps：通过 WORKDIR 设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY 等命令都会在该目录下执行。在使用 docker run运行容器时，可以通过-w 参数覆盖构建时所设置的工作目录。</span><br></pre></td></tr></table></figure><h3 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">用于指定传递给构建运行时的变量</span><br><span class="line">构建参数和ENV的效果一样,都是设置环境变量。所不同的是，ARG 所设置的构建环境的环境变量，在将来容器运行时是不会存在这些环境变量的。但是不要因此就使用 ARG 保存密码之类的信息，因为 docker history还是可以看到所有值的。</span><br><span class="line">Dockerfile中的ARG指令是定义参数名称，以及定义其默认值。该默认值可以在构建命令docker build中用--build-arg&lt;参数名&gt;=&lt;值&gt;来覆盖。</span><br><span class="line">灵活的使用ARG指令，能够在不修改Dockerfile的情况下，构建出不同的镜像。</span><br><span class="line">ARG指令有生效范围，如果在FROM指令之前指定，那么只能用于FROM指令中</span><br><span class="line"></span><br><span class="line">格式:</span><br><span class="line">ARG参数名=默认值</span><br><span class="line">eg:</span><br><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">FROM $&#123;DOCKER_USERNAME&#125;/alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span></span><br><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">set</span> -x ; echo $&#123;DOCKER_USERNAME&#125;</span><br><span class="line"></span><br><span class="line">FROM $&#123;DOCKER_USERNAME&#125;/alpine</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在FROM 之后使用变量，必须在每个阶段分别指定</span></span><br><span class="line">ARG DOCKER_USERNAME=library</span><br><span class="line"></span><br><span class="line">RUN <span class="built_in">set</span> -x ; echo $&#123;DOCKER_USERNAME&#125;</span><br></pre></td></tr></table></figure><h3 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">格式： </span><br><span class="line">ONBUILD [INSTRUCTION]</span><br><span class="line">eg:</span><br><span class="line">    ONBUILD ADD . &#x2F;app&#x2F;src </span><br><span class="line">    ONBUILD RUN &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python-build --dir &#x2F;app&#x2F;src </span><br><span class="line"></span><br><span class="line">ps:当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发</span><br></pre></td></tr></table></figure><h3 id="使用dockerfile启动"><a href="#使用dockerfile启动" class="headerlink" title="使用dockerfile启动"></a>使用dockerfile启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在Dockerfile文件这个目录下执行命令</span><br><span class="line">docker build -t myubuntu:v1 .</span><br><span class="line">docker：docker命令。</span><br><span class="line"></span><br><span class="line">build：编译。</span><br><span class="line"></span><br><span class="line">-t：镜像的名字及tag，通常name:tag或者name格式；可以在一次构建中为一个镜像设置多个tag，参考docker build命令详解。</span><br><span class="line"></span><br><span class="line">myubuntu：生成镜像的名称。</span><br><span class="line"></span><br><span class="line">v1：生成镜像的版本号。</span><br><span class="line"></span><br><span class="line">.：点符号“.”代表当前</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">c_id</span><br><span class="line">from_clue&#x3D;&quot;&quot;,</span><br><span class="line">up_regno&#x3D;&quot;&quot;,</span><br><span class="line">regno&#x3D;&quot;&quot;,                       </span><br><span class="line">file &#x3D; False,</span><br><span class="line">report &#x3D; False, </span><br><span class="line">release &#x3D; &quot;判断&quot;, </span><br><span class="line">remand &#x3D; False,</span><br><span class="line">write&#x3D;True,</span><br><span class="line">delete&#x3D;True,</span><br><span class="line">finish&#x3D;True</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Dockerfile-构建镜像&quot;&gt;&lt;a href=&quot;#Dockerfile-构建镜像&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 构建镜像&quot;&gt;&lt;/a&gt;Dockerfile &lt;strong&gt;构建镜像&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;​</summary>
      
    
    
    
    <category term="docker" scheme="https://a744740454.github.io/categories/docker/"/>
    
    
    <category term="docker" scheme="https://a744740454.github.io/tags/docker/"/>
    
  </entry>
  
</feed>
